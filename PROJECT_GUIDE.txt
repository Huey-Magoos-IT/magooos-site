=== PROJECT ARCHITECTURE ===

!!! IMPORTANT DEVELOPMENT REQUIREMENT !!!
THE AWS SDK IS STRICTLY PROHIBITED IN THIS PROJECT CODEBASE.
All AWS integrations must use direct HTTP/HTTPS requests, API Gateway integrations,
or other SDK-less approaches. This applies to all components, including Lambda functions.
DO NOT INTRODUCE AWS SDK DEPENDENCIES UNDER ANY CIRCUMSTANCES.

[Next.js 14] client/src/app/
  - App Router: dashboardWrapper.tsx + layout.tsx
  - Dynamic views: /projects/[id]/page.tsx
  - Auth flow: authProvider.tsx → Cognito
  - Team-based access control: teams/page.tsx
  - Department pages: Restricted access based on team admin status

[Express API] server/src/
  - Controllers: taskController.ts ↔ Prisma models
  - Routes: JWT validation → API Gateway
  - Team management: teamController.ts with admin privileges

[State Management] client/src/state/
  - Redux Toolkit: api.ts handles Cognito token injection
  - Lambda API: lambdaApi.ts for direct Lambda function access
  - Dark mode: persisted via local storage
  - Team state: managed through RTK Query

=== AWS SERVICE MAP ===
Frontend:
Amplify (CI/CD) → S3 (assets) ↔ CloudFront
  Domain: https://master.d25xr2dg5ij9ce.amplifyapp.com

Backend:
EC2 (auto-scaled) ←→ RDS (VPC)
  ↑          ↓
 Cognito   Lambda (cron/users, data-processing)
  │          │
 API Gateway ←─┘
  Main Endpoint: https://puvzjk01yl.execute-api.us-east-2.amazonaws.com/prod
  Lambda Endpoint: https://sutpql04fb.execute-api.us-east-2.amazonaws.com/prod

DynamoDB:
  - Locations table (Location-u3tk7jwqujcqfedzbv7hksrt4a-NONE)
  - Direct API Gateway integration for location data

S3 Buckets:
1. Profile Pictures:
   - Bucket: huey-site-images.s3.us-east-2.amazonaws.com
   - Public access for profile images
   - Used in UserCard component with Next.js Image
   - Default profile picture: p1.jpeg

2. Data Department (Planned):
   - New bucket for CSV data storage
   - Will be Restricted access for admin teams (first implemented as a public bucket)
   - Will be integrated with data department page
   - Purpose: Display CSV data for analysis

=== CRITICAL CODE PATTERNS ===
1. Department Access Control:
   - Department pages require admin team membership
   - Access verification through team.isAdmin
   - Restricted content with proper error handling
   - Reusable access control components

2. Priority System (Legacy):
   - client/src/app/priority/[level]/page.tsx
   - Reusable template: reusablePriorityPage/index.tsx
   - Priority levels: Urgent, High, Medium, Low, Backlog (this will be removed for department pages)

3. Component Architecture:
   - Modal system: ModalNewProject ↔ ModalNewTask
   - View components: BoardView ↔ taskController.ts
   - Team components: Enhanced with admin privileges

4. Security Implementation:
   - server/prisma/schema.prisma: RBAC models with team-based access
   - client/.env.local: Amplify config
   - server/ecosystem.config.js: PM2 hardening
   - Team-based authorization: isAdmin field controls access

5. Direct DynamoDB Integration:
   - API Gateway to DynamoDB without Lambda or SDK
   - Uses mapping templates for request/response transformation
   - Reusable pattern for simple data access requirements
   - Implemented for LocationTable component

6. AWS SDK Prohibition:
   - AWS SDK must NOT be used anywhere in the codebase
   - All AWS services must be accessed via HTTP requests, API Gateway, or other SDK-less methods
   - Direct HTTP requests are preferred for AWS service interactions
   - Use mapping templates in API Gateway for service integration

AWS Infrastructure:
- EC2 auto-scaling groups for backend API (port 80)
- RDS PostgreSQL with read replicas and daily backups
- S3 buckets with versioning and access logging
- Cognito user pools with custom attributes
- API Gateway with rate limiting and updated CORS
- Lambda functions for cron jobs and user management
- DynamoDB for location data and reference tables
- CloudWatch monitoring and alerting

Development Ecosystem:
- CI/CD pipelines with Amplify and GitHub Actions
- Infrastructure-as-code (Terraform) for AWS resources
- Local development environment with Docker
- Automated testing with Jest and Cypress
- Error tracking with Sentry integration
- Documentation system with architecture diagrams

=== AWS OPERATIONAL DETAILS ===

Network Architecture:
- Multi-AZ VPC with public/private subnets
- NAT Gateway in public subnet for Lambda outbound traffic
- Internet Gateway for public subnet access
- Private subnets route through NAT Gateway (0.0.0.0/0)
- Security groups with least-privilege access:
  * EC2: Inbound from API Gateway
  * RDS: Inbound from EC2 only
  * Lambda: Outbound through NAT Gateway
  * NAT Gateway: No inbound, all outbound

EC2 Configuration:
- Amazon Linux AMI with PM2 process management
- Security hardening: SSH only via IAM keys, weekly AMI updates
- Auto-scaling based on CPU/memory metrics
- Port 80 exposed for API Gateway integration

RDS Security:
- Private subnet placement with encrypted storage
- Daily automated backups retained for 35 days
- Connection limits and query timeouts
- Security group allows access only from EC2 instances

Lambda Configuration:
- VPC-enabled for RDS access
- Private subnet placement with NAT Gateway access
- Cognito triggers for user management
- Security group allows outbound HTTPS (443)
- IAM role with VPC execution permissions
- Direct Lambda API Gateway integration:
  * Dedicated API Gateway: sutpql04fb.execute-api.us-east-2.amazonaws.com
  * Non-proxy integration for data processing functions
  * Same Cognito authentication as main API Gateway
  * Frontend access via lambdaApi.ts configuration

DynamoDB Configuration:
- On-demand capacity mode for cost efficiency
- Location data stored in Location-u3tk7jwqujcqfedzbv7hksrt4a-NONE table
- API Gateway direct integration for /locations endpoint
- Read-only access through IAM role permissions

Cognito Integration:
- Frontend uses AWS Amplify UI components
- API Gateway Cognito authorizers for all endpoints
- JWT tokens required with 1-hour expiration
- Post-confirmation Lambda syncs users to RDS
- MFA enforcement for admin users

S3 Configuration:
1. Profile Pictures Bucket (huey-site-images):
   - Public read access for profile images
   - CORS enabled for frontend access
   - Used by UserCard component
   - Default profile images stored at root level

2. Data Department Bucket (Planned):
   - Private access with IAM roles
   - CORS rules for frontend access
   - Bucket policies restricting access to admin teams
   - Will store CSV data for analysis

IAM Policies:
- EC2: S3 write access, Cognito admin privileges
- Lambda: RDS read/write access, VPC execution
- Amplify: CodeCommit pull access
- Data Bucket: Restricted to admin team access
- API Gateway: DynamoDB read-only access for locations table

Monitoring:
- CloudWatch alarms for:
  - API 5xx errors > 1%
  - RDS CPU > 75%
  - S3 bucket size > 80% capacity
- Daily service health reports
- Lambda execution logs and metrics

=== TECHNICAL STACK ===
Frontend:
- Next.js 14 with TypeScript
- Redux Toolkit for state management
- Tailwind CSS + Material UI components
- Drag-and-drop functionality with react-dnd
- Charting with Recharts

Backend:
- Node.js/Express REST API
- Prisma for database management
- JWT authentication
- Direct AWS integration (NO AWS SDK allowed)

DevOps:
- PostgreSQL on AWS RDS
- EC2 for backend hosting
- S3 for file storage
- Cognito for user authentication
- PM2 process management

=== EC2 SETUP AND MAINTENANCE ===

Initial Setup:
1. Connect to EC2 Instance:
   - Use EC2 Instance Connect
   - Instance IP: 3.15.240.21
   - Security Groups: huey_ec2-sg (ports 22, 80, 443)

2. Node.js Installation:
   ```bash
   sudo su -
   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
   . ~/.nvm/nvm.sh
   nvm install node
   ```

3. Git and Repository Setup:
   ```bash
   sudo yum update -y
   sudo yum install git -y
   git clone [repository-url]
   cd magooos-site/server
   npm install
   ```

4. PM2 Process Management:
   ```bash
   npm i pm2 -g
   # Create ecosystem.config.js
   pm2 start ecosystem.config.js
   pm2 startup systemd
   ```

Server Configuration:
1. Port Configuration:
   - Express server runs on port 80
   - API Gateway forwards to port 80
   - Security group allows inbound: 22 (SSH), 80 (HTTP), 443 (HTTPS)

2. API Gateway Integration:
   - Proxy integration to EC2 public IP (3.15.240.21)
   - {proxy+} resource forwards all paths
   - HTTP integration type with proxy enabled
   - CORS configured for Amplify domain

Maintenance Procedures:
1. Code Updates:
   ```bash
   cd /home/ubuntu/magooos-site
   git pull origin main
   cd server
   npm install
   pm2 restart all
   ```

2. Server Monitoring:
   ```bash
   pm2 list          # Check process status
   pm2 logs          # View application logs
   pm2 monit         # Monitor CPU/Memory
   ```

3. Common Issues:
   - Port conflicts: Check `netstat -tuln`
   - Process crashes: View logs with `pm2 logs`
   - Permission issues: Verify user ownership
