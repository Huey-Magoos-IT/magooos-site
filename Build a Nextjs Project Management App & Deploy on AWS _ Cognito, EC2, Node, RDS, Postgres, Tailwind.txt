Video title: Build a Nextjs Project Management App & Deploy on AWS | Cognito, EC2, Node, RDS, Postgres, Tailwind
    
Video URL: https://www.youtube.com/watch?v=KAV8vo7hGAo
    
Video language: English (auto-generated)
    
--------------------------------

hey guys this is Ed row so today we're going to be building this complete full stack project management application with a nextjs front end no JS backend and most importantly fully deployed on AWS in this application we're going to have this entire project management page where we can drag and drop different tasks into different brackets we can also add new task and this should be fully validated so we can create a new task if we wanted to we should be able to create a new board meaning a new project as well and then from here we can see a list view a timeline view a table view of all the task within a certain project and we are going to have multiple projects as well and from here we can also go to the homepage where we have a distribution of all the data for the projects and then we'll also have a timeline specifically for all the projects and then we should be able to search different tasks within our entire project list and then from here we're also going to be able to see settings and then users that are part of the entire projects and then also a list of teams as well and you can filter through the teams you can export this list as a file we're also going to have light and dark mode as usual we should be able to close and open our sidebar and more importantly our entire application is going to be responsive including the sidebar we're going to be able to see that every page will be responsive as well and finally we are going to be using Cognito authentication to create all of this information over here where we can create a user information with password and also be able to send a confirmation email to the user and we should be able to sign in to this project with a specific username now in this project management app for the front end we're going to be using nextjs Redux toolkit for State Management Redux toolkit query for API interactions The Styling will be handled by Tailwind CSS we'll integrate recharts for our charts and typescript for typings and material UI for tables want to mention that we are using a separate backend that is not part of nextjs because it makes this application an even more scalable app so on the back end our application will be running on node.js with expressjs framework using Prisma to manage our interactions with the postgressql database and finally what truly makes this application Enterprise is AWS unlike other projects AWS is included to demonstrate that it's not just about easy hosting for applications AWS provides the foundation for infinitely scalable Enterprise scale applications mastering a AWS is a highly valuable skill and understanding its foundations is essential for anyone looking to enhance their portfolio that's where the Great Courses on skillshare are sponsor for today comes into play skillshare is the Premier online learning community with thousands of classes for creatives Tech enthusiasts and developers they have a wide variety of categories such as creativity photography graphic design music and many more for developers they offer a comprehensive learning path titled go from novice to expert in programming with JavaScript this path is perfect for those who are beginning their development Journey or those who are just looking to refine the programming skills and getting better with the basics and the foundations of web development furthermore you can even Explore the variety of courses that they have specifically on AWS now even if you aren't looking for development tutorials they have a large number of other great learning paths such as the one from Ali abdal about productivity his includes a productivity Master Class organizing the workflow productivity for creators and his notion master class so whether it's just to get better at productivity in general or looking to better your skills in the many categories of classes they offer such as design marketing and many more or if you're just trying to get better at boosting your expertise and development on AWS or just simply JavaScript skillshare is an invaluable resource for any developer the first 500 to use the link in my description will receive a 1- month free trial of skill share so don't miss out back to our application we will then deploy our application on AWS utilizing ec2 for hosting our backin RDS for our postgressql database amplify for hosting nextjs S3 for image storage and Cognito for authentication AWS is not just robust but crucial for building applications that are infinitely scalable so don't worry if AWS seems intimidating because I'm going to go step by step to teach you AWS deployment strategies and make this tutorial as beginner friendly as possible as always I designed this application myself so you are free to use parts or even the entire project for your portfolio or whatever other use you want to use so let's dive in and start building so the first thing we're going to be doing is we're going to be installing node.js so node.js is a server side JavaScript  runtime built on the Google Chrome V8 JavaScript engine basically means that you can run JavaScript code on your computer so go to the link in the description and you can install node.js and then from here we're going to be installing npx so npx will help us install some npm package binaries so if you go to the link in the description you can run npm install DG MPX and then for our text editor we can use Visual Studio code I'd probably recommend this text code editor but you can use other options if you want to use those so let's get started by opening a vs code in a desired directory where we're going to create our project from here I'm going to hit control apostrophe to open up our terminal and in our terminal we're going to write MPX create next app at latest and we're just going to hit yes and we're going to call this client because this is going to be our client directory we're going to say yes yes yes yes yes and no so basically all the defaults all right from here we can see that our client directory has been created but back in our terminal we're going to write CD client and then before we do anything we're going to go into the extensions tab over here and we are going to search for es7 react Redux graphql Snippets so this will allow us to have initial templates for our components which will make lives easy you can choose any one of these I have this particular one by D dsz ner installed and also we want to install prettier extension so prettier over here code formatter and Es lint so we can have automatic code save and formatting our code when we save our code and then from here we have two extensions that we can install we have pesticide um which allows us to basically just see the layout of the structure of the page people have been asking what this extension is but it gives us a nice little layout structure which will be helpful when we do our styling and then we also have Redux Dev tool this is optional as well we have Redux and you can see the state that you have right now there's nothing cuz they're not using Redux but it will allow us to see our state then from here we're going to be installing a bunch of packages in our client directory now I'm not going to go  to Every website and tell you every detail about every link but the link is in the description you can read up on what these packages do but I'll give you a brief summary while I'm writing this so the first thing we're going to be installing is data grid which is a table from Material UI so mui material at emotion SL react at emotion SL styled at muy oops sure you spelled that and these three packages are for our data grid and then from there we can do loose side- react this is for our icons numeral is for formatting numbers date FNS is date functions which will format our date much easier than native then axios to make API calls recharts to create our charts react DND react DND HTML 5 backend this is for our drag and drop for a project management feature so this will help us drag and drop and make things very easy it's a very nice library and also Gant task react basically for our Gant scheduling charts for our project management tasks so we're going to have all those make sure you install those correctly and note that if doesn't work some of these libraries might be outdated by the time you watch this video so if you really need you can go to the package Json that is on the repo copy the exact versioning you can just do something gask react at 2.2 whatever whatever you want and that will align it to specifically this version otherwise you can just use this and see if it works or not also I forgot one more Library I'm going to do npmi and I'm going to paste this at mux data grid that was one package I did forget for our tables and then from here I want to install some dependencies so I'm going to do npm das capital D at types SL node at types sluu ID and at types SL numeral these are typescript dependencies that we need to do otherwise typescript will yell at us all right from here I'm going to go to our client directory go to Source go to our page. TSX and we're just going to remove everything inside the main HTML element so I'm going to highlight all of those I'm just going to sit set high and we should be able to see this on our page if we run npm run Dev so if we go to our website we should be able to see hi if this doesn't work you got to do some debugging to see what went wrong but this is the basic template of our nextjs app from here we're going to go to global. CSS I'm going to erase everything except for the top at Tailwind base components and utilities so inside here we're going to do some resetting functions or resetting CSS so that we have a default to fall back after so we're going to do star which means everything it selects everything we're going to do star colon colon before star colon colon after we're going to put box sizing and we're going to hit border box like the and then from here I'm going to do HTML body # root. apppp and we're going to do height is 100% width is going to be 100% add apply which is a Tailwind function text SM like that so by default all the text will be small at apply background gray should be 500 and at apply text Gray 900 like that and we are going to save that and we can see we have a darker background right now this these are not the colors we're going to be sticking with so we we'll be doing that a little later so from here we're going to set up Tailwind so we can have everything ready  to style our application so the first thing we're going to do is we're going to go to our extensions Tab and I'm going to install Tailwind CSS intellisense so this will provide us automatic linting suggestions while we write it which will make our lives a lot easier and then also Tailwind documentation this is optional but if we ever need documentation we can just switch select this and this will pop up documentation on the right side as you can see over here once you hit these commands command control T blah blah blah you can see all the Tailwind documentation easily and then from here I'm going to close all of this out and go back to our terminal where we have our app running I'm going to hit contrl C to cancel it out and I'm going to install as a dependent prettier and prettier Das plugin D Tailwind CSS now this prettier plugin Tailwind CSS will automatically sort our Tailwind classes this is very helpful when we have long running Tailwind CSS class names which can become basically like an essay and this will automatically sort sort everything for you and with that we also need to create a new file we're going to call this prettier. prettier RC and inside here I'm going to create closing brackets we're going to do plugins colon and inside this angled brackets prettier Das plugin D Tailwind CSS and if you want to take a look you can see this basic article automatic class sorting with pretty here gives you the instructions but for example you can take a look at this we have this is the original and then if you save it it's going to align it to this type of sort then from here back to our code editor I'm going to close this out inside our terminal I'm going to run npmi DD Tailwind Das merge which will help us just merge certain classes for Tailwind a little bit easier now from here we're going to set our Tailwind classes specific colors that are specific to our application now if you watch the previous video I basically went to tailin config and I had like an automatic like all you have to do with the light mode and then it automatically gives us the dark mode theme now that's okay it's automatic and convenient but it is probably not the ideal when it comes to like the type of colors so we're going to be specifying the dark colors as we go in our application so over here in our tail. config.txt called Dark mode and I'm going to call this class like so put a comma over there and in our extend object I'm going to write Colors so we can specify custom colors in our object or in our application basically and we're going to set white like so okay there we go and then we have gray and we're going to be setting our own gray colors over here so we don't want to use the default gray values we have specific gray values that we actually want basically tail one has default 100 values like gray 100 that you can use but we want to customize them and that's basically what we're doing over here I'm going to E5 E7 EB like that 300 #d1 D5 DB and then 500 colon number 6B 7280 and by the way you can I have a link in the description that shows this tail and config page but honestly there's not that much so you can just watch me write this or you can pause the screen or fast forward it depending on what you want to do so 3741 151 comma 800 colon number 1 F 2937 like so and Below gray we're going to set blue colon 200 colon number 93 C5 FD comma 400 number 685 fa a like so and then 500 colon 3B 8 to F6 and then below this I'm going to do dark BG so this will be a specific one for dark background one1 214 and by the way you really do need custom values if you want to align these applications to a very nice looking color theme a lot of times the default value just won't cut it F21 like so and then we have dark tertiary like so colon number three B3 D40 comma blue primary so 0 to 75 FF comma stroke Das dark and then colon number 2D 3135 col like that and that's pretty much it that's all the custom colors we're going to be using everything else should be pretty straightforward and our Tailwind configuration is basically set up now all right so basically I pulled up our completed application just so you can know what it looks like so in our complete application we have this basic  sidebar over here and we also have a nav bar once we open it we can see our nav bar or our sidebar and then our nav bar as well but this is basically existent on any page we go so if we go to the users page we can see we have our sidebar over here and we have our nav bar over here as well so that means it exists on every single page so I've done this before in my previous videos but it is a good refresher to try this every time because it is probably one of the more complex UI things that you have to do when you deal with dashboards so we're going to go through it in our app directory we're going to have our files all over here so I'm going to create a new file over here we're going to call this dashboard wrapper. TSX inside here I'm going to write TS RFC so this is from the typescript Snippets that we mentioned before and it gives us our dashboard wrapper like so makes it easier to write all of this I'm going to eliminate these type props because we don't need them and over here going to erase the props over as as well inside here I'm going to write children in curly braces colon children colon react. react node so that gives us our basic class because we're going to be passing in a child component so that this is a higher order component I'm going to erase this dashboard wrapper I'm going to write class name and I'm going to give it Flex with minimum of height of screen with width of full background gray of 50 and text Gray 900 basically what I'm doing over here is this dashboard wrapper when you include the sidebar this is going to be aligned together as you can see over here there's going to be two sides so you look at pesticide this entire sidebar and this entire content are aligned with flex and we also want to give sidebar a minimum height of the entire screen so this is a full width regardless of how many items there are so if I close all of this this is going to be a height of like it's going to take up the entire height of the screen and the width full is going to represent the entire page like this so it's going to be entire over here and then we are obviously going to change the colors as well well so now we don't it does it's not reflected in our current application CU this is not put into any rendering elements yet but we will do it soon but before that we're going to do main actually I'm just going to mention that the sidebar will exist over here so we're going to have a placeholder it doesn't exist yet we're going to be creating that sidebar and inside over here I'm going to do main class name and in curly braces I'm going to do Flex I'm going to do withth of full Flex of column background of gray 50 dark meaning background dark BG so that this dark tag and I'll cover this dark mode in a little bit but basically this dark tag will allow us to change different colors based on whether it's light mode versus dark mode so this will be the color when it's dark this will be the color when it's light and then from here I'm going to give it a media query you're going to see me do MD or SM or XS so this allows us to do media queries and tailwind and when it's larger than basically when it's larger than medium screens is how you can think about it we're going to give a padding left of 64 I'm going to close this out and we're going to have our main tag over here so basically this part this will include sidebar so what we we've seen is this part over here this div right here represents Flex so left and then right side this part is the right side inside here so that includes our navbar and our content section over here so inside this I can say navbar exists and inside this will be the children the children will include anything that falls under this content section over here so this is children like this part I'm hovering over this entire part and then this is the nav bar over here so that's why you see flex and we're doing Flex column meaning that it aligns in a column Direction meaning up and down and then from here we're going to be using this dashboard wrapper inside our layout page so if we go to layout. TSX which means that this is going to apply for every single page on nextjs so anytime time we have anything in here so if I say hi or hello that's going to happen on every single page that is if our app is actually running so I'm going to do mpm runev and as you can see if I have hello it's going to apply it to this page but just realize it's going to happen to every single page of your entire application but that's why we put our dashboard wrapper so the way we're going to do it is I'm going to put dashboard wrapper and as you can see it intell is going to pop it up while we write it and we're just going to import that automatically which also adds this line over here so inside this we're going to pass the children over here and we can see that we have our dashboard being with the children being passed in so we still have high so let's just test this and I'm going to say sidebar like so and navbar like so so we can see where it exists now if you take a look sidebar represents the left side Navar represents the top and the high is the content area so it is kind of a section of how it's supposed to look like we still don't have our proper margins but we'll basically get there our layout is starting to take shape but it's going to take some time to get there all right from here we're going to be working on our Navar so I'm going to close a lot of this out close this terminal and if you take a look at our nav bar over here we're just going to  have some basic elements and we're going to start by doing the layouts first we're not going to do some of the logic but we're going to add basically the layout of the Navar so over here under navbar actually I'm just going to erase this going to put Navar like so close that out and I'm going to import Navar from at slash app slash Prin components PRS SL navbar like so so now we haven't created this as you can see the intellisense is going to tell us this is not existing and just FYI at is the Alias we set up when we set up nextjs so that means that starts from The Source directory so if we go over here at slapp which starts from The Source directory at and then app and then we create a new actually new folder and we're going to put PR components like so and inside here I'm going to create a new file or new folder navbar and inside here I'm going to create a new file called page. TSX so let me explain what just happened so this is essentially where we start our directories PR components and the reason why we put this in PR is because we do not want this to be a separate page so this identifies and tells nextjs that we don't have a separate page for this we don't want to go to SL components route that's what this basically does and then we have navbar over here which is our basic component over here and we're going to create this inside this page actually this should be index my my mistake index. TSX should be our Navar page. TSX is if you want a separate page but we're not going to want that so in here I'm going to do tsrce and I'm going to call this nav bar like so erase all these props because we do not need these props at all and we're going to start from having our nav bar let's double check that everything is as is if we go back to our Dash wrapper if you were having issues I was having some issues that intell ense was not registering it but you just have to rewrite it if it doesn't work so you just want to be able to if you hold command you should be able to click and go to that that means until sense is working so now if we go back we can see that we have navbar and this time it's capitalized because I capitalize the na bar so we know that it's affecting the change as we are looking at it then from here inside our div over here I'm going to do class name and I'm going to pass in Flex items Das Center so it means we're going to Center all our items and we're going to do justify between we're going to give it a background of white PX of four py of three and then when it's dark mode we're going to give it a background of black dark of PX D4 and dark of P Y-3 and make sure you don't have this space I'll quickly explain everything we have so if you take a look at the final product let me just open this up you can see that there's two elements and this is justifi between meaning everything is spaced out and also vertically aligned that's what item Center is basically doing so we're doing the same thing we just don't have the elements and over here as you can see we have PX4 pxy and we have different settings for when it's dark mode and you know what it's actually interesting I don't know why I put dark mode that's pretty redundant so we can just remove that so we're going to start with the left side I'm going to erase Navar now I'm going to put search search bar so when you have a longer component it's nice to have little classifications of where things are identified Flex items Center so this is going to be the left side and we're going to give it a gap of eight so each element is going to have a spacing of eight units in Tailwind now right now we're going to not have this menu right here we're we're going to be skipping this guy over here so we're going to worry about that once we have our sidebar so we can connect it but I'm going to just say class name and we are going to do our search bar so we're going to set this to be relative Flex with the height of minimum with a width of 200 pixel so this one's going to be exact with and inside of here I'm going to bring in search from loose side react so now search is not popping up so we're going to say import search from blide react like so and instead of having a closing tag we can just have a self-closing tag instead I'm going to write class name I'm going to say this is absolute because we need to position that search icon to the left of that value so this is one of those tricky situations where you have this element input and the search icon is positioned to the absolute left within this container this container is this part right here and the search icon is that icon within that so that's why we're doing relative at the parent component and then absolute to position the icon within it that's how you position things on top of something else and then we're going to do top of 1/2 margin right of two height of five width of five and we are going to set negative Translate Y of 1/2 these are all basically positioning so we can have that search bar correct and we're going to have transform with cursor pointer when you hit the when you hover over the cursor or when you hover over the search icon and then we're going to have a dark mode of text white like so if you take a look we have our search when we hover over it we have a cursor so basically this essentially positioned our thing to the correct amount inside this we're going to have an input as well I'm going to close that and inside it I'm going to give it some class name now I know a lot of these there's a lot of classes that you have to deal with when it comes to these inputs and the icons but generally it is pretty self-explanatory and you just kind of have to just play with it a lot of the times it's not rocket science so background gray of 100 padding of two padding left of eight and we're also going to give it a placeholder text which in tail one you can just do placeholder array 500 like so with focus and we can say border is going to be transparent and focus is going to be outline of none with dark background gray of 700 dark of text white because we have to add all these classes when we want to do dark mode so it does get kind of long and then we have dark of placeholder Das white so you got you got to do these things to make things look good it's just the name of the game when it comes to styling things like this and we're going to do type of search with a placeholder of search dot dot dot dot dot if we take a look now we have our search input and we have a lot of these going on search can type we have our clear icon and we can just play with that and then from here we're going to deal with the icons on the right side so I'm going to create a little bit of a section we're going to call this icons and inside here I'm going to do div class name of flex items Center so everything is centered we're going to ignore the sun mode or sun icon Moon icon for the dark modes so we're going to skip to that we're going to skip to the link icon from next SL link and in here I'm going to do href I'm going to pass in SL settings so this is basically for our settings icon which should take us to the settings page then from here I'm going to put the class name and we're going to do height of Min with a Min rounded padding of two with a hover of background gray 100 I'm going to self close this link actually no we don't need a self- closing we're going to pass in a settings icon from loose side react intellisense is popping up now and we're going to have class name and what when I clicked it just realize settings is popped up over here so you want to make sure it's gets imported as well and we have height of six width of six cursor Das pointer with a dark of text- white and we're going to do we're going to close our settings icon and as you can see we have our we have our settings icon and it hovers and we're can see our background and below our link we're going to have a div element I'm going to give it a class name of margin left of two margin right of five with hidden minimum of H of 2em which is just a different way to do pixel but it's a little more precise and then we have 0.1 R background gray of 200 media queries of inline block meaning larger than medium screens we're going to set this to be an inline block and this is essentially for the vertical line so we have the vertical line only when it's larger than medium screens otherwise it does not display that's why we have this hidden hidden happens for smaller screens inline block happens for larger screens so this is a horizontal line that we basically set up ourselves and for now we're just going to leave it at that because right now we don't have authentication we don't have the dark mode and we don't have our sidebar so we're just going to keep it like this and we're going to come back to this a little later all right so from here we're going to now transition to our sidebar so we're going to start creating the skeleton of our sidebar so we're going to go to dashboard wrapper again and I'm  going to add sidebar like so and we're going to have a self-closing tag and I'm going to import sidebar which we have created and we're going to do at slapp SL components slidebar like this so now this hasn't been created we're getting an error once we saved it so we're going to go back to components create a new folder call this sidebar and inside the sidebar we're going to create a file called index. TSX and I'm going to do TS RFC and we are going to label this sidebar like so save it and let me just add a t and we can see that it's being changed just like as we expected now the intellisense is apparently not registering again so I'm just going to rewrite this not exactly sure why it doesn't update right away must be a caching issue but anyways we reput that saved it we're good to go I'm going to eliminate these props over here because we don't need them and we are going to start by writing our state so I'm going to first do show projects and set show projects like so and I'm going to do use state I'm going to import it from react as you can see I did import it from use State when I used the intellisense just FYI we going to hit comma like this so this is representing over here this show projects so we need a state that determines whether these are open or not because we have like a subfolder basically for our sidebar now if you take a look we're getting this error it says you're importing a component that needs used date so it only works in a client component so like in nextjs we need to add use client like so for our page otherwise it will not work because this is going to be a client component we need it to be interactive and we need that use client for it to work and then from here I'm going to do show priority for the other one so set show PRI already and I'm going to do use state is going to be true like this and then here we're going to start with the class names for sidebar but I'm going to have it as a separate variable because this is really long this going to have a lot of class names so I'm going to start with template string because this is going to be a multi-line and we're going to set this to be fixed so the sidebar is fixed and set to the left side we're going to have a flex column I'm just going to show you the final output just so you can understand what's happening this is going to be fixed so no matter what it's going to be fixed in this particular position and we're going to use flex column so that means it's going to flex UPS up and down versus horizontally we're going to do a height of 100% so it takes up the entire height we're going to do justify between with shadow of extra large so that gives it this little Shadow right here I'm going to hit enter we're going to do do a tab we're going to say transition. all and duration of 300 so that gives it a little more smoother feel when you close it when you open it and yeah we're going to do H full with the height of full we're going to say Z of 40 meaning it needs to be on top of everything and Z of 40 is pretty pretty high index we're going to give it a dark background of black when it's dark we're going to do overfly overflow of Y Auto so we don't have a scroll bar we're going to do a background of white and we are going to say this is going to be width of 64 oops actually on the next line we're going to say width of 64 and for larger screens we're going to say width of 64 like so actually what am I doing you you can just set it like this and we're good to go right now we haven't done anything with it so we're going to pass that class name of sidebar class names over here if I spell it correctly pass that in and you can see we have our sidebar already and within this we're going to start with our outer container and we're going to have the logo section as well so we're going to do diff class name Flex height of 100 in Brackets 100% like so with the full Flex column and justify Dash start and then in here I'm going to do another div we're going to say class name and this is going to be on top of it so we're going to set this to a z of 50 Flex Min of height of 56 pixel width of 64 items Das Center justify between background of white pixel of six padding top of three dark of background black like so and inside here I'm going to give it the logo so div class name is going to be text Excel font of bold text Gray of 800 dark of text white so these are just all styling no need to go into depth and I'm just going to call this Ed list you can call this whatever you want we're going to save that and we are going to see at list at the top so we have that we don't have this closing we're going to skip that for now because that's tied with our closing sidebar so we're going to skip to this section right here and over here I'm just going to call this top logo and below this on the second closing div over here I'm going to call this next part team and this is going to be a div and we're going to give it a class name of flex items Center to vertically align It Center with a gap of five Border in the y direction of 1.5 5 pixel actually this should be in braet 1.5 pixel like this so we have a border at the top and bottom and we're going to set the Border color to be gray of 200 pixel of eight or a padding of 8 in the X Direction padding of Y in the four with four dark with border gray of 700 like this and we're going to just close that and above here we're going to have an image from from nextjs we going to pass that in and we're going to say Source SL logo.png now I'll cover where these images will come from in just a sec and the name is going to be logo width is going to be 40 height is going to be 40 and just FYI this is from nextjs they have a image component it it's pretty complicated when it comes to optimizing these images but for now we can stick with this now the image doesn't exist so we're saying SL logo.png that logo PNG needs to exist in our public directory over here now there is a link in the description where you can download all the images I have for this project and you just want to copy all of that into our public folder so let's do that so as you can see I copy and pasted all the images in public this is for offline use but once we go to AWS we're going to host these images on S3 so that will be a different story so as you can see we have these images we're going to save it we're actually going to refresh the page and now you should be able to see this logo over here all right and then below this image let's close this so you can see more space I'm going to have a d like so and I'm going to say H3 class name with text of MD font of bold tracking of wide with dark of text Gray 200 and I'm going to say Ed row team now this is not Dynamic this is just static it's up to you if you want the team but I wanted to keep it as simple because otherwise this would be too much of a half now you probably haven't heard of tracking wide so I just brought it up it is basically leather spacing so it just gives you a specific leather spacing between each letter so if you did let's say tracking widest you can just look at look at the Ed row team and see that the letter spacing has increased but we're just going to keep it too wide so that should be good and then below that we're going to say div I'm going to say class name margin top of one Flex items Center or items start my mistake and give it a gap of two this is where we're going to have a lock icon with text private next to it so I'm going to do lock icon import that from blose side react by clicking the intellisense I'm going to do class name margin top of 0.1 RM height of three width of three text of gray 500 dark of text gray 400 close that we should be able to see the lock icon and it's nice and small in the correct location and then over here we're going to say a p tag with a class name of text extra small text of gray 500 close that out and write private over here and there we go we have our little team section for our sidebar and then below this we're going to have the Navar navbar links now I'm not going to start the navbar links until we handle this sidebar collapse situation and the reason why we need to handle the sidebar collapse is we're going to use Redux toolkit to save whether the state of sidebar is closed inside our Redux store so just like we would do save these values in local state we want to save the sidebar collapsed in global State and we're going to use Redux toolkit so now youve been watching a lot of my tutorials or maybe you haven't but if you have I've been using Redux and Redux toolkit as my  main store State Management a lot of people might not like Redux because they're thinking about the old Legacy Redux where you have a lot of boiler plate but Redux toolkit on the other hand simplifies that boiler plate makes things very easy Once you know how to set up the store how to set up the state and once you have that everything is scalable maintainable and it is probably the most widely used State Management across Enterprise and larger companies when it comes to State Management regardless of what other people say they're using zust stand or something else but Redux is still by far the most widely used regardless so either way let's get started so now I brought the page there's a link in the description you can do Redux toolkit setup with nextjs you can look at that if you want it's a little bit different from regular react so I just bring that up just to let you guys know there's a little bit different setup for this um anyways so we're going to go over here I'm going to close up the terminal because we're going to be installing some of the packages so I'm going to do npm I react-redux Redux JS toolkit Redux persist and EnV so react Redux is our normal package for Redux then we add the toolkit library and then we add Redux persist is is if we want to store the state in local storage so that allows us for example if we want if the user set the website into dark mode it carries on to the next session if they close the browser or close that tab it'll still be in dark mode so that's how that's what Redux persist allows us to do it keeps the local storage persisting and then EMV is the EMV variable that we're going to have to use now that we have our Redux installed now we have to set up our Redux store so we can integrate it into our application now there is a link in the description for Redux fet setup with nextjs but all you have to know is that it's a little bit different when you set Redux toolkit with nextjs because it's how it's structured now a lot of people do complain about Redux and its spiler plate and the setup of how you have to do all of this but to be fair all I have to do is basically copy one or two files that I have and I copy just across different projects and it's super easy to set up now there is other easier ones that have less spoiler plate like zustan or other applications but Redux is by far the most scalable has the largest community and if you look on the jobs and Enterprise level applications Redux is still the most widely used State Management Library across many different companies and most people know Redux to an extent a lot of people complain about the Border they're usually complaining about regular Redux but not Redux toolkit because they haven't tried it they haven't done it in a proper setup like I do where you can just copy and paste and you'll have a full-fledged State and store management super easy so now there's two ways now I installed Redux persist so that's if you want to do it without with local storage so what I'm going to do I'm going to create a new file I'm going to call this red. TSX and what I normally I would typically write this all out but we can just copy and paste this to make it easy so there's a link in the description now I have two versions where I do not have Redux persist so this is the version with that Redux persist it's not too bad you just have Redux store you have the Redux types so this is what actually creates the stores this is what combines all your reducers basically your it's like splitting up your store into separate sections and then over here this is how you provide the store and connect it to your actual application so it's pretty simple there are some extra types that makes it easier when you type things later on but but if you want to use it with Redux persist which means you get local storage I'm just going to eras all this and paste this version which is also a link in the description and this is the one we're going to be using so it is a lot longer but it has Redux persistence meaning we can keep our store everything is set up we just have a make store we have a Redux store and then we also persist it over here so very similar setup it's just if you look at all the documentations you'll be able to see all of this and now we have two linting issues over here and we're going to be creating that very soon the first thing we're going to handle is This Global reducer so what we're going to do is we're going to open up our Explorer close our app I'm going to create a new folder in our source directory called this state I'm going to create a new file inside the state called this index. TSX and now over here we're going to be setting up our Redux JS toolkit setup over here so I'm going to do import create slice and we're going to do that from at Art rux JS toolkit so this will help us create our store I'm going to start with the initial state that is an empty object so we have no state for now we're going to do export const Global slice and we are going to create our slice but an object with within with the name of global we're going to say oops comma we're going to give this an initial State like so with reducers and an empty object and then I'm going to do export const put an empty object I'm going to say Global slice. actions and I'm going to do export default Global slice. reducer and I'm going to save that and then from here we're going to create two different states within this because we wanted the dark mode we want that to be accessible everywhere and the state where we close it and open it so those two states we are going to add to this Global store and it's no different from local store except this is just accessible anywhere so I'm going to first do export interface initial state types like that so this will be the type for our Global store I'm going to say is sidebar collapsed and this is going to be a Boolean and then is dark mode and that's also going to be a Boolean and what we're going to do with this types is we're going to pass it as the type for initial State types over here it's going to give us an error because we haven't created the values we need and we are going to give this a sidebar collapse as false and then is dark mode is also going to be false and just F why I prefix all my booleans with is even if it doesn't make sense so even if even if it has a situation where it's like a has some value or something even if the naming does not sound correct I always just prefix it with is because it just makes it a lot more simpler even if that variable is not completely proper English anyways from here I'm going to do set is sidebar collapsed and I always prefix the reducer name of for the property it's changing to make it easy to understand that it's affecting that particular one and over here I'm going to give it a state and action these are the arguments that are being passed into this function from Redux toolkit and we're going to do payload action and that is going to be something we Port from Redux JS toolkit so this is just a way that we can have a type and we can pass in our state Boolean over there should be curly braces and what we're going to do is we're going to set state. is sidebar collapsed is equal to action. payload so this is basically saying when we set our is Side Bar collapsed inside our action. payload is going to be the value for this particular function so you can think of this like a function that changes our state that's that's all it is set is our part collapse I'm not sure why people always add all these fancy like actions blah blah blah but basically this is just a function we're just passing in the Boolean that is changing the state no different from changing any local state and then from here I'm going to do set is dark mode and we're going to do the same exact thing we're going to copy this entire thing pass it over here and we're just going to change this to is dark mode so basically when we're using this function all I have to do is set is sidebar collapse I'm going to pass I could pass in true or false depending on what I want to change the state to be same thing over here this is all that's doing not not any more complicated not any more you know it doesn't get simpler than that set is dark mode like that so we want to pass the two name names of our functions and there you go we have our Global store pretty much already now this is probably linter is screwing up again but if you just repport that that is good and now since we need to make API calls now a lot of people have been asking should I do react query but if you're using Redux JS you pretty much should use Redux toolkit quy instead because it's designed to make API calls and store St them in the global store not in the local store that react query does so you want to or maybe I think it does in re uh context but this is integrating the API calls and the data you get basically storing them in the global store so now we're going to do the same thing for Redux toolkit but now this is for the toolkit query which is baked into Redux JS toolkit so the first thing we want to do is create environment variable to determine where we are going to make our API call from so inside our client directory I'm going to create a env. local now nextjs distinguishes between EMV local and EMV production so make sure you note that since this is local we're going to be creating an environment variable over here and I'm going to call this next public API base URL http and it's going to equal to http localhost colon 8000 so this is the base URL for the API calls we're not going to make an API call yet we're not going to create the backend just yet but this is for when we do so and just realize for environment variables in nextjs you want to set and prefix your API base URL which is like the name that you want with nextore public so a public environment variable within next gen s so we're going to go back to Redux and over here we're going to create this file at/ state API so we're going to go back to our state folder and I'm going to create a new file called API TSX actually these two should be TS will be the proper name because TSX is for components TS is just a typescript file and then from here I'm going to import create API and that's going to come from Redux JS Tok query but we also need to do slash react I'm not exactly sure why that is but it needs to come from SL react and we also need fetch base query as well and we're going to do export const API we're going to create the API pass in an object we're going to give it a base query call in Fetch base query pass in base UR L and we are going to pass in the environment variable which we do by saying process. env. next public API basore URL like so so that is the environment variable we created so this is the base URL that our API call is always going to use and then we're going to use reducer path pass an API comma and we're going to do tag types we're going to keep this empty for now we're going to set the endpoints to be build Arrow function with an empty object within and this should be end points and then export const empty API now we're going to set up the skeleton I'll talk more about this once we actually make API calls but for now this is the skeleton and this should set up our Redux application so now we have our Redux all set up but now we just need to connect it to our nextjs application and the way we do this is we go to app and we go to dashboard wrapper and we're going to add the provider over here so I'm going to close this out over here I'm actually going to change this and call this dashboard layout and we're going to create a second component over here and I'll explain why I'm doing something like this and over here I'm just going to copy this children above above here with an arrow function and I'm going to return and pass in the store provider we created from do/ rux so that is the Redux this is how we connect it over here this store provider is what we're adding into our dashboard wrapper so our entire application has access to the Redux store and then inside here we're going to pass in dashboard layout like this children like so now the reason why I said separated this into a separate component why I didn't put like store provider over here and wrap this entire thing is because we need to do this if we wanted to access Global state in the dashboard layout right here like if I wanted to access some state from store over here and pass it and use it into this jsx you need to wrap that particular one with the store provider we created or else it wouldn't work and now with this dashboard wrapper we are able to look at layout and we have our store basically connected to the dashboard wrapper and just as a note this is exactly how nextjs wants you to do it there's a link in the description if you want to check it out but this is how you use context providers you need to typically render it at the root of the application so we are sharing it inside this layout we're doing what they want with the theme context create context like so now the only problem is I was I really tried to figure out how I can incorporate this in the same page like they do but the problem was you cannot set this as use client you cannot do use client it's going to give you an error for the root layout because over here we want to use Global State once I use Global state in this dashboard layout over here this is going to require use client which is something we're going to be doing very shortly you cannot do it over here so that's why I wrap it around here instead and write all logic over here so there is a reason to all of this this is as simple as I can possibly make it and this is where our layout exists as well as our store provider and this is probably the best setup I can come up with if you wanted to wrap your dashboard with global context or Global State integrated so let's do exactly that so in here we're going to add a couple Mobile stores so I'm going to add const is Side Bar collapsed like so and we're going to import use app selector again these are one of those types that I added over here scroll down use app selector we'll basically type our Redux toolkit state so that anytime we use this this is using the store State and it gives you linting as well as typescript types when you want to use them so if I go like State and I do state. Global it also knows that it exists like so this is why we did use app selector and we added all those types and we're going to do is sidebar collapsed like so so that gives us our Global store for sidebar collapsed and we're also going to grab the is dark mode as well from the state using the use app selector we're just going to copy all of this same and we are going to pass in is dark mode as well all right and then there's one last thing I want to do I'm going to use use effect pass that in and all I'm going to do is do if is dark mode we're going to pass in document. document element. class list. add with dark so this will add the class of dark to the root element now the problem was the reason why we're doing this is that when we add the background gray of 50 this is not the root remember the root of the layout exists over here so there's no way of controlling this using client without using a used client component that's why this is a used client component over here so we have interaction but we cannot add this to the root so we cannot change the background of the root HTML and body that is exactly why we kind of have to do this slight workaround next is does not seem to have a solution for this so I am basically adding this myself so we're going to do remove and dark and this is the only time we're probably going to have to really edit edit the document tags directly like this all right and then last thing over here is if you look at this the main Navar it's going to be a different size when it's collapsed so right now we have for padding left of 64 by default but when it's collapsed it should be no padding left so what we're going to do is we're going to add curly braces like this around round this value let me close all of this so we have more space I'm going to hit enter and I'm going to say is sidebar collapsed with a turn array operator with empty string and I'm going to save it like this and we're missing one more or we're missing a string over here  around this PL 64 all right from here we're going to keep that we can't see the change just yet so we're going to go to our Navar and now what we are going to create is basically this ability to change light and dark mode and we're also going to add this menu icon where we can open it and close it as well so we're going to start with adding our Global state so we're going to do const dispatch we're going to do use app dispatch pass it in from our app Redux store and that will allow us to use some of the functions so we're going to do is sidebar collapsed and we're going to grab actually let's go back to our dashboard wrapper and we're just going to copy this entire thing because we always we always want to try to be lazy and then once we are seeing this error we want to just erase an r and rewrite the r and the intellisense will bring it up and it'll import it for us like just like that all right and then right below the gap of eight we're going to add the menu icon over here but we're now going to have our sidebar collapsed logic that we can use so if sidebar is not collapsed we're going to do a turn Turner operator and say if it's not collapsed we're going to see nothing it should not exist but if it does if it is collapsed then we're going to create a button and we're going to say on click is equal to PR's dispatch set is sidebar collapsed and we're going to bring it in from at State and we are going to pass in the inverse of what is Side bar collaps is already exact like existing right so we're just basically putting the opposite of what it currently is so that's exactly what this is doing so basically this is just like a function we do have to put dispatch but this is the function we're using and we're passing in the opposite value of the sidebar collapsed and then inside this menu or inside this button we want to pass in the menu icon from loose side react and we're going to do class name of height of eight width of eight and in the dark mode it's going to be a text of white like so actually we're going to run the application cuz it's not running so even if we run the application we can't see the menu because right now we have no way to close this sidebar it's being hidden by that so we're just going to wait till we set up the sidebar and we're going to see the menu icon later but there is something else we can do which is the light and dark mode so over here right above the link we're going to add a button I'm going to do onclick and ins inside it we're going to do just like we before dispatch but this is going to be set is dark mode and very similar oh make sure you import it over here and we are going to invert is dark mode like we did before and we are going to set a class name like so actually we going to close this button to make it a little little easier to read but the class name on the new line I'm going to do is dark mode with the tary operator I'm going to do rounded padding of two with the dark hover background of gray 700 so it's different colors in dark mode and I'm going to do another template string going to do rounded padding of two hover background gray of 100 as well now if you go below before we give it a try I'm copy this class name over here paste it over here and we are going to just add a few things h of Min width of Min if you didn't know what I did I basically held alt so you can type at the same time on two lines just like that so that makes it easier going to save that and we still need inside our button the icons so if it is dark mode we are going to show different icon so the first icon we're going to show is going to be the sun icon this is going to be a class name of height of six width of six cursor D pointer dark of text white we're going to close that and on the next line I'm going to bring in the moon icon and I'm just going to copy this entire thing and it's going to be the same thing and we should be able to see it so let's actually see what happens and we can turn light and dark mode and it works perfectly and with that most of our Navar is set up except for the authentication part which we'll do way later we're going to close this out we're going to go to the sidebar we're going to hit command and click onto sidebar or you can just navigate to the folder directory for this particular page and we're going to finish this up so for the Navar links I want to create a separate component I'm going to do this right underneath over here so we don't have to rewrite sidebar link multiple times so we're just going to create a separate component and in this case generally it's not always one component per file if it's related enough to that particular file you can have the same component in the same file this is just a folder file architecture kind of thing so we're just going to do just that we're going to do sidebar link and we're going to to pass in curly braces hre comma oops comma icon and we should pass in icon from lucide react here comma label comma is collapsed and over here I'm going to pass in sidebar link props and that should be an interface sidebar link props over here with hre of string icon of loose side icon and we're passing that in from loose side react going to pass in label with the string I'm going to call this is collapsed to be a Boolean like so and the arrow function like this is how we are going to create our component so the first thing I want to grab is going to be the path name so now you know we need our navigation for our entire page so if we want like slash users on this URL something like that this is how we are going to navigate to those page and we use the use path name from next navigation to do so and what we're going to check is if it is active we going to check if the path name is equal to the h ref that we pass in so the hre value is going to be passed into the sidebar link and this href value will be the URL link that we want for each sidebar link so this right here determines let's say for example we're on this page and we go to users page we have a slash users so that for the so that for when we create our sidebar link for users we can check if it's equal that means this is going to be active and we use this variable this D damic variable so that we know exactly what page we are on that's what how we can highlight the page that the user is on specifically now there's one exception to this is going to be the homepage because path name is going to be like the home but the href needs to be for slash dashboard so there's one exception to that and there's one last thing we need we're going to need the screen width this is just for like a window inner width that we can do in regards to some of the width issues with our sidebar and we're going to be handling that directly and then here I'm going to grab go back to navbar and we're going to grab these two top items dispatch and iser collapse so we don't have to rewrite it and we're going to import that by rewriting the class Lea so we can import those and we're going to be using that for our return statement and this is going to include next link so we can navigate and what we're going to do is we're going to pass in href with the href we're going to pass over here so we're going to have a class name of WID full like so now over here I'm going to pass in the div is going to get kind of long cuz this requires a lot of classes in regards to active so we're going to do class name and we're going to pass in curly braces and inside here I'm going to do relative Flex with cursor Das pointer items D center with a gap of three transition colors and on the next line we're going to Dos hover with a background gray of one 100 a dark color of background black dark color of hover for background gray 700 and we're going to add some logic in here with the Turner oper operator and we're going to use is active so if it is active we are going to pass in background gray of 100 with text of white and dark of background gray 600 and we're going to have an empty string like so and I got rid of a few curly braces that I didn't need so over here it is a bit long you can just take a look and screenshot that or you know pause it so you can write it but we basically have our isactive logic and then from here I want to copy this you know like make this little small blue icon just to give it a little more flare so I'm going to do in curly braces is active and if it's true we're going to do div class name give it an absolute positioning  with left of zero top of zero height of 100% with a width of five pixel with a background of blue 200 and we are going to close that inside this I'm going to pass in the icon that we just have with class name with height of six width of six text of gray 800 with the dark color of text of gray 100 and we are going to close that and then inside here I'm going to give it a span and this will be where our label exists so I'm going to do class name and I'm going to put font oops font medium with text Gray 800 dark of text Gray 100 like so close the span out and inside the span I'm going to give it the label value and with that right now we're not using is collaps let's comment that out I'm going to go back up here with the navbar links and we're going to now create the sidebar links that we have so inside this I'm going to create a nav HTML element it's good to use the ER HTML 5 Element for this for proper semantics we're going to do a z of 10 with a width of full and inside here I can now add the sidebar link and inside of this I'm going to pass in an icon of home from blue side react with a label of home href of Slash and we're going to close that out and we also it is yelling at us because we have this typescript over here we're going to comment this out and we're going to save it and let's check our current application and so far so good so now what we want to do is be able to collapse it let's do that before we finish up all all our sidebar link because that is something we've been waiting to do for quite some time so over here once again I'm going to go back down over here copy this dispatch and is sidebar collapsed over here we're going to paste it like this so we have the sidebar collapsed value and over here the width of the sidebar is going to change depending on whether it's collapsed or not so this is where we're going to do that so is sidebar collaps we're going to give it a width of zero and hidden if it's collapsed otherwise we give it a width of 64 like so and we want to be able to toggle this so the last thing we need is the the damn button that we've been waiting to do for a while so that's going to be right under this Ed list right here it's going to be is sidebar collapsed if it is collapsed it's going to be null but if it's not collapsed we're going to give it a button with class name of py 3 on click and we're going to do what we did before with dispatch of set is sidebar collapsed and we want to make sure we import it and we want to invert is sidebar collapsed like so and we haven't closed our button and inside this this should be an X icon which is another blue side react icon and we're going to pass in class name height of six width of six text of gray 800 with a hover of text Gray 500 dark of text white like slow close it so now if we click on it we can now open up and close it like this and there we go we have our sidebar collapsed now we got to fix the link so now this is not aligned properly and we're going to add the other links as well so I'm going to go down go over here and over here on this line on line 94 right below is active I'm going to add justify D start we're going to say px-8 py of three and that should put it in the correct location so this is our final this is as what we expect and I realized we're not really doing much with this so we're going to get rid of all of that realized I didn't really need that code so let's just save that we don't need any of that and we can just now work on our sidebar so now it's a matter of just copying these sidebar links multiple times so we're going to add six of these this first one should be briefcase import that from loose side react erase this this should be timeline and this would be slash timeline and then over here can have search actually make sure you import search from loose side react this should be search as well this should be/ search save it settings make sure you import that settings should be over here and then slash settings this should be user singular import that but these two should be users plural this one should be users plural this should be team and slash teams like this and this should be imported and we're going to save that and we should be able to see all these links over here now if you go and click one of these you can see it's taking us to the right page all right so we have our first set of navbar links but then we have projects so we're going to create a button and we're going to call this onclick and we're going to say set show Pro projects like so and we're going to do previous and we're going to invert previous so it's just another Boolean flip switch and we're going to do class name and we are going to put this on the next line call this Flex with the width of full items Center justify between padding in the X direction of 8 py of three text of gray 500 and close that out I'm going to give it a span with class name empty string put in projects over here and we're going to do show projects oops projects and if it's true we're going to do a Chevron up icon from blose side react do class name H of five with of five close that out and as for our last condition for Turner we're going to do chevron down this time import that copy the class name like so and then save it so we have our button for our projects so it flips Down based on if you click it or not now right near we're going to have a list projects list but we're going to do that once we have our API query calls so we can't do that just now now we're going to do the same thing for the priority and we're just going to put we're going to call this projects just projects links like this and then this is going to be priorities links if I spell that correctly like so and then below this button actually this we should adjust this first this should be priority and instead of set show projects this should be set show priorities and then over here this should be set show priority like that and we can save it and see that we have our priority listing over here as well as projects now with the sidebar links we can actually do this one so I'm going to go back up copy one of these so that we can paste it over here so what we're going to do is if show priority is true we are going to render out all the sidebar links that we have in here and we're going to use a little empty fragment because we need to encase them and we are going to put five of these and inside each of these so I'm going to have an icon this one's going to be alert Circle and me just do all the icons first and we'll take care of the other ones Shield alert pass that in alert triangle alert octagon and layers three these are just icons that I've chosen that looks close enough to what I need over over here this is going to be urgent and this should be slash priority SL urgent I'm just going to copy this like this so we can use that this one is going to be high this one's going to be priority slash high this one should be medium and do priority slash medium this one should be low HF should be priority slash low and this last one should be backlog with SL priority SLB backlog and as you can see we have our list of links for those specific ones as well and that's pretty much it for our sidebar we have collapsed we have everything we need and we have light and dark mode for our Navar and sidebar we we'll take care of projects and we'll take care of the authentication that will pop up over here and there but for now this is good and I know sidebar and navbar are always kind of tricky it's kind of a pain but once you do it you have a good understanding of how to set it up in the future it's always good to set it up yourself great our sidebar nav bar is finished let me let's just fix one random thing that I kind of messed up so if you go to global. CSS we should actually change this background gray of 500 to background of white cuz it's kind of a little weird and this should be instead dark colon background of black like so it's so that if we go to another page like users when it's loading the page we have a consistent background of white and a background of dark as you know as you normally would expect even though this page does not exist so with that all set up let's actually just demo what what we have done so far so we have created this particular sidebar we have projects priority we'll take care of projects list later on but we have links to each of the elements in our sidebar we can close this sidebar as well we can see this Navar and we can also change the light and dark mode over here so now in our final and finished application we have a number of pages over here and we have a lot of data showing every single element of our entire application so what we need to do before we start creating our homepage timeline we're we're going to start creating our backend and so for our backend the first thing we want to do is start creating  our data models so I have this data model that I like usually do for all my applications but we are using postgressql for our database so we need to set up the data models and the scheme for our databases beforehand so we can know how to set up our database and all the data that we have and I can tell you this is easily probably the most important part of setting your entire application and the reason why is that this is very much tied to your business logic meaning it is very tied to what your application is requiring and I can tell you people who do not plan their SQL databases and their backend you'll see something like this but 10 times worse if they did not plan it it happens to get way worse because this is the foundation your entire application rests on so just to go over this a little bit I'm going to go in here I'm going to show you that our main application includes two actually three important aspects of this project management app and that includes user so obviously we have users who are going to use the app so this is the data model for that we're going to have a Cognito ID which is the authentication ID we'll need to save for later for auth authentication but we also have obviously username the URL for the profile picture and the team ID meaning it determines what team they're going to be on and then we have task which will be any kind of task that they user is being assigned and they need to complete so these two are very core to the application as well as project because projects are assigned or tasks are assigned a particular project and that includes a big team and then from there you can see that we have attachment and then comments for each task and then the task assignment will be what's called an connector or ad or Junction t table basically it connects user and tasks meaning it is a many to many relationship that when you are dealing with SQL tables it is good to have these Junction tables when you have a many to many relationship which means that more more than one user can be assigned to the same task and vice versa the same task can be assigned to more than one user same with project team so that means there could be multiple teams on the same project but there also can be multiple projects for a team that is exactly why we have these Junction tables now you can go through this look at all the properties it is a little bit of a tedious process sometimes because it's very tied to what you would do when you create the application but it is very important to really understand what is happening and this is important to do when you create your application because this is very core to making your app very scalable and clean and very tied to what data you actually have so this is very important I know I know I don't go through a process because it's kind of boring and tedious so that's why I show you this but I do emphasize how important it is in building your application all right having said that this is our database model now the first thing we want to do is actually install the things that will help us create our SQL databases and set up our SQL tables  so we want to First install postcript ql so if you go to the link in the description we have postgressql toorgle will set up our server for the SQL databases but PG admin will allow us to basically connect to these databases and see what's happening inside so you want to make sure you install PG admin 4 as well well all right just one thing while you install it I've already installed it so you should just go through the process of installing but that while you're doing it keep note of your super user and password you're going to have to remember those when we want to connect to our database so make sure you have those written down because when you want to change that or find that value it is kind of difficult to know and also you want to keep note of your Port so once you do that we'll be able to see our servers over here and we're going to open this up now you will you can probably create your own new server so you want to create a server like this you want to name it and we can just call it test server or whatever you want I'm not going to recreate it because I already have this set up and the connection this host name you can probably call it just Local Host because that is the default one that we want to use you probably want to keep this port to 5432 but you can change all of this you're just going to have to note all of these values because it'll change what you have to use to connect and the password you just want to add maybe like root as like r t add that you want to save that you want to make sure you know those values because when we add our database URL that's where we're going to use it so for example this is just for demonstration purposes we'll be creating this later but I'm going to call this EnV this is a de for demonstration purposes only but I want to show you the database URL that we be using to connect to the database that we created so in this database URL we have postresql this doesn't change but this postgress was the username that we set our server name to be and then we have the password this is the password of the server name not the Super admin password but the password of the server and then Local Host will be the database the database host name and then 5432 will be the port now just remember there is a distinction when you go to your server and you let's say when we connect to it it's going to add ask you for the super user and password so sometimes it's going to ask you for that super user name to connect to a server for PG admin but when you use the database you URL this is going to be the username of the server this is the password of the server so you have to make sure you know the distinctions you have those values all set up in crit and inside this database you would typically create a database and over here this will be the name of the database that you create so in our case we'll just call it project management I already have this created so I'm just going to close this but if you haven't let's create it and that will be the username or sorry the database name that you write over here so this will be the database URL that you use to connect to your local database and just one final note that PG admin if you go over here you won't be able to see what's happening over here but the way you would see your tables you would go under schemas and then you would go under tables this would be the tables you have when you when we seed the data now you haven't seeded the data so you won't be able to see these tables so we will do that next so to see our  database we need to create our backend first so I'm going to close this or delete this EMV file I'm going to just say move to trash and over here I'm going to create a new folder I'm going to call this server at the same level as the client directory I'm going to open up our terminal with control apostrophe I'm going to cancel out of this server and I'm going to go back to the root or Parent Directory I'm going to go into server as well with CD server and inside here I'm going to write mpm andit Dy so this will initiate a package Jon in our server even though there's nothing in there at the moment and inside This Server folder I'm going to write mpmi D capital d to save this as a node dependency I'm going to install ts- node typescript and at types SL node you can see we have these dependencies installed and then from here I'm going to type npx npx ts-- init like that and then we'll we should have a TS config.js and we're going to go down and modify this just a little bit so I'm going to close this out give us some more space over here actually let's get rid of this and inside here we want to go down to module I'm going to change commonjs to node next make sure you spell that correctly I'm going to uncomment module resolution and I'm going to call this node next as well I'm going to go to resolve Json module over here I'm going to keep that to be true and we are going to go down and find out directory up here I'm going to call this slash and then finally I'm going to go all the way down below this object I'm going to add a comma I'm going to say include and we're going to include quotations Source SL double star one star comma Source SL dat slst star star slst star. Json like so and Prisma SL star star SL star so this will allow us to include those specific Pathways for our typescript files it basically just includes typescript checking for those particular files that we will add later on and then from here we have to install Prisma so I'm going to go back go to our  server open up our terminal and I'm going to write mpmi Prisma and then at Prisma SL client once that's installed we're going to write MPX Prisma nit and then from here we have our Prisma folder now what we want is the seed data so mock data that I have created so go into the link in the description and there is going to be a folder called seed data I want you to copy all of that and paste it into our Charisma folder so you should have all this data this will be crucial for creating our mock data and then from here you're going to have a new file we're going to call this seed. TS and inside the seed. TS there's going to be a bunch of code that you can find again in the link in the description and let me close this out to show you this is a code to seed our database now I'll just briefly cover it I don't want to write all this code because it's kind of boring it's not very useful to really learn but it helps you just see the data so basically I'm choosing the path of where we grabbed our seed data so our mock data I'm making sure that it gets added in a specific order because if you try to add something like task assignment which is dependent on like User it's not going to work so there's a specific order where you see the data and then first we want to delete all the dat the first which we have over here so this function basically deletes anything that already exists so it completely wipes your SQL databases um so just in case you need to receed the data this will automatically do it and then over here we're just going to add each seed data one by one for each file and we have some console lock that shows us that we did it so that's basically the gist of what ourc data is and then from here I'm going to save it I'm going to go to our extensions Tab and we're going to going to install one little thing we're just going to search Prisma and the only thing you really need to install is this Prisma over here which will add syntax and formatting so that when we add our schema for our Prisma we can automatically format so if we go back to our Explorer we go to our schema. Prisma it's going to what we the what we just installed will automatically format this type of file so that's all that code extension is doing and inside here we can create our models for our database all right so if you want you can go into a link in the description again where there is the schema. Prisma file and you can just copy everything that's in there and just paste it into the schema. Prisma but for completion purposes I'm going to do this uh one by one show you every single property over here it is up to you if you just want to skip it and just copy it it is a little bit tedious and kind of boring but basically we're going to copy everything in our data model so we're going to start with user ID which is going to be a primary key and it's going to require at ID in at default Auto increment and we're going to execute that and this should be spelled correctly like that and then we're going to do Cognito ID and we're going to say the string at unique we're going to do username with string at unique profile picture URL string with a question mark and then team ID would be int question mark and if you save it as you can see the vs code extension automatically formats it and then over here we haven't talked about it so far but authored tasks will rep present our task data model so these are for our relations and this is something you need to do as Prisma ask you or tells you to do in the documentation to connect your relationships between your tables so for authored tasks this is a list of all the tasks that we have and then assign task is going to be task an array and at relation with quotes task assign and then task assignment so that's the one data model that we had so we're going to say task assignment friends now it's telling us or it's giving us error because we haven't created it yet but we'll get to that we're going to have attachments and that will be the attachment data model and then we have comments with comment data model team and team with the question mark because because it's optional we're going to have an at relations and we're going to say fields that represents team ID so this is the foreign key for the team ID and we are going to set references as the ID inside that table I'll I'll come back to it once we get to the table which is something we are doing next so we have a model of team so let's go to oops model team over here and it's pretty simple for this one we have ID with int and we can just copy this over here from model user paste it lowercase the ey and we should be good and then we have team name which is just going to be a string so I'm just going to copy the username over here from the user paste it over here and I'm just going to say team name make sure that's camel cased like that and then over here I'm going to have product owner user ID with int and then project manager user ID with int project teams because we're going to identify that foreign key so even though in our data model we don't have that specifically listed but we have to set that for Prisma because it is kind of linked with that it is something you have to do in the Prisma schema and then user which represents the user as well because that's another model that the team is using okay and then model project and we're also going to copy this ID over here and we are going to look at over here that's the primary key once again and then we have name description as well so I'm just going to copy this over here just change this to name same thing paste it change this to description but this one should be a question mark and then we have a start date which is going to be a date time so this is a different type of type that we are using we're going to paste it once again call this end date and then from here I'm going to have tasks and then task singular project teams and project team so this shows what we what is connected to project again so tasks connect to project project teams are also connected to project as well then we have models of model singular with project team and over here I'm going to once again copy this guy ID paste it into there team ID with int project ID of int and then team let's actually copy over here because this exactly the same from the team over here at the top with the model user we're going to paste it over here so this is a foreign key relationship from Project team and we're going to do one more paste that but this should be project CU we are identifying a foreign key so project team oh by the way I did not move over here as you can see these are foreign Keys getting connected to team and project as well I'm going to save that actually over here I should write FK FK so these are the connectors or basically the foreign keys and this should be project ID as well and then finally we have task is going to be the next model so I'll go scroll over here I'm going to say model task and inside here I'm going to say this once more ID like so make it super easy and I'm going to actually copy the name over here from project and we're just going to paste this multiple times because we you're going to have quite a few of these I'm also going to paste copy and paste the start date end date as well and over here I'm going to change this to title description status priority tags and I'm going to get rid of these two this is start date but this is also due date not end date I should probably make that consistent in the future then we have points which is going to be optional int we have project ID which should be an INT as well author user ID with int and assigned user ID which is going to be int so those are going to be some of those are going to be foreign keys I'm going to copy the project I did make a mistake over here this should be project qu or project and get rid of the question marks for both team and project so make sure you have this correctly written because I messed up but either way I'm going to copy both of these because we're going to just use this as a template project is going to remain the same but over here this team is instead going to be author this should be changed to user and we are going to call or remove actually add task author over here as a string to identify as something unique and we are going to call this author user ID sometimes it gets a little tricky if you have a lot of relations for using Prisma schemas so make sure you check the documentation and then we're going to paste this again I'm going to call this assign this should be task assign e and we're putting this assigned user ID and the reason why we have to do it is because we're using the same user data schema but for two different values because there's an author the person who created this task but there's also someone who gets assigned the task as well and they're the ones who get task assign e and also we have a relation saying task ass assignments so that should be Zone data model we haven't created and attachments as well so we're going to say attachment and then comments will'll be a comment object model as well and I'm going to save it and from here I'm going to say model task assignment put it in curly braces and inside here I'm going to copy this primary AR key once again have user ID with int task task ID with iner and then we are going to go over here see if there's any existing ones actually let's just write it down I don't think we have any but I'm going to say user with user object relation Fields user ID with reference is of colon user ID copy and paste this because we have one more foreign key over here which is going to be task and this should be Capital task right here this should be task ID and this one should be just singular ID and as you can see it should be ID with one letter D not two D all right we're almost done I told you this is pretty tedious to write but we have model attachment so if I go over here we have model and should be attachment over here and we're just going to copy this so we're going to have an ID once again with the primary key copy this over then we'll have file URL should be string URL should be capitalized though file name should be string task ID should be integer file name is optional we're going to give another one uploaded by ID with integers so this is a foreign key so that's why we have to do the next part again we have the task so we're just going to copy that over right here cuz that's another foreign relation I'm going to copy task one more time but I'm going to adjust this I'm going to say uploaded by with user and then uploaded by ID and there should be a user ID like so I'm I'm going to save it I'm going to have model comment like this because this one is going to be the last one copy this ID once again we're going to have text string task ID integer user ID integer and then we are going to copy both of these once again and should be pretty straightforward from here so task ID is fine but this one should just be called user instead and we're just going to call this user ID like so and with that everything should be good we do have some kind of error going on make a mistake in copying a few things it should be pretty self or pretty easy to fix so we can go over here task assignment should be plural and if we go down to task these two should be instead user ID not just ID there's a mistake that I made user ID as well and this should be optional for this particular one because ass signy does not mean it's always assigned and then the task these should be optional title should not be optional but description status priority tags should be optional because they're not always going to exist at the beginning so make sure you have that correct worst case or worst case scenario you want to just copy the schema. Prisma from that file that I gave you so you can just copy and paste it make sure you don't have any errors otherwise the seating process is not going to work then from here we can now write the package.json we can write a script for that and we're just going to call this seed colon ts- node Prisma .ts so we basically writing this script so we can run the code that we have for our seed file over here so this will identify and run the code to see the data we have and then from here we are going to add the database URL that we were talking about and the EMV already exists because Prisma already added it so let's go to that and in here I'm going to just replace this value so postgressql already exists so again I'm just going to write this one more time postgress and in our case I have this password as 1 2 3 4 but maybe you have it as root it depends on what you set it up and over here my database should be project management so make sure it's aligned to whatever setting that you set so this is our database URL and just note that in our Prisma we have a schema Prisma this is where it's checking for that database environment it's going through there grabbing that environment variable and that's how we connect to our database I'm going to open up our terminal and I'm going to run a few commands and these are necessary for specifically Prisma because we use Prisma which is an orm object relation which is an object relational mapper basically it allows to connect to our database or use our basic information in our database a little bit easier it's up to you you can read up on om's but it's an optional thing you can just use base SQL but we won't get into that for now so what I'm going to write is npx Prisma generate to generate and connect our Prisma so I'm going to do MPX Prisma migrate Dev D- name andit and you probably won't see this because I already have data but follow the commands it should just migrate data automatically and over here once you have written that we're going to do mpm run seed and if you see all of this you're going to have all the cleared data from all your SQL it's going to see show all this and it's going to seed all your data as well now if you get blocked over here which can happen that just means typically you will have your schema schema Prisma not correctly set up or maybe you didn't copy the seed data correctly so you want to make sure you have those and correctly set if you messed up in some kind of way you can write this if it works don't do this but you would do npx Prisma migrate reset which will reset all the migrations all the generations that Prisma set up so it'll just be like a clean slate now if you did this correctly we can now go to PG admin and what we should be a able to see if you go back to your project management you would rightclick refresh and you should go under schemas public and under tables you should be able to see the tables that you have and the way you query what's in your tables is that you hit this all rows button for each one and you should be able to see every single data point that you have for each so if I go click user over here you want to click this button all rows and it'll basically grab all the data that you have now that we have our database  connected now we can just create our backend API using node and express now by the way remember I told you we are not doing nextjs backend we are using a separate nodejs backend because it is much more scalable than having a connected nextjs front end with the back end it makes it in general Enterprise app applications you're probably going to have a separate nodejs backend with the exception of situations where you need really fast speeds for the front end but that's for a lot of static websites I do a lot of interface where you're doing dashboard type applications and a lot of times you generally want the backend API to be a separate server over here we're going to go to our server and I'm going to open up our terminal so we're in our server directory and I'm going to going to start installing our packages for our backend so I'm going to do npmi Express body- parser which will help us parse the request then we'll have cores for Cores issues. EnV to manage our EnV variables then helmet to secure and Morgan for API request logging so we're going to install all of those and then I'm going to install the dependent so I'm going to write npmi D capital D Rim ra and concurrently so these will be used so that we can run our application for typescript as if it's like a node server so we would use node mod on top of some Rim ra and concurrently to allow us to run our server live anytime we make changes it's going to update live so these are what's needed and then from here I'm going to write types at types sces at types Express at types Morgan and @ types SL nodee these are all the dependencies that we are going to be using and then from here I'm going to create a new folder I'm going to call this Source in our server I'm going to create a new file in there as well I'm going to call this index.ts so this will be our root directory of our node.js application and inside here I'm going to write some code so I'm going to do import Express from Express what we just created we're going to import EnV from EnV we're going to import body parser from body parser so we have intellisense for that so I'm just going to use those import cores from cores like so import helmet from the helmet package import Morgan from the Morgan package and we're going to leave a comment and we're going to write route Imports cuz that is for later and then below this I'm going to have another comment I'm going to call this configurations so over here I'm going to do mv. config because these are just configurations that we need to do for our backend to work properly over here I'm going to do const app is equal to express and execute it so we can run our Express server then we can do app.use express. Json so we can configure the Json and then app.use helmet for running our helmet application and then we need to set the helmet cross origin resource policy so we don't deal with cores issue we're going to say policy colon cross origin like so app.use and we're going to say Morgan and we are going to set common as the value app.use body parser and we're going to have Json like so make sure it's not M Json but a singular Json app.use body parser do URL encoded we're going to put extended colon false and then app.use cores and make sure we execute that and below this we have routes and then I'm going to set app.get so this is just going to be a route that we have for the home this is not going to do anything in specifically but this is just for making sure we do debugging purposes it'll help us call the backend and just check if the back end is running so we're just going to say this is home route and then finally we are going to run the actual Express server so I'm going to do con Port equals process. mv. port capital slash or or 3,000 like that and then app. listen we're going to make sure we listen to our Port execute our function and we're going to do console log put in PRS template string I'm going to say server running on Port and I did make a mistake this should not be capitalized for this particular variable the port should be lowercase over here so we have our server running it's going to be running on this particular EnV variable otherwise it's going to run on 3,000 but we want to write a separate Port so I'm going to write Port over here and this should be 8,000 inside our EMV variable and then from here we need to write the scripts to run our server so we're going to go to our package.json and under scripts I'm going to write build actually it should be in quotes build colon Rim ra dist so we create a dist folder npx TSC so make sure we're running our typescript then we have start as well and we are going to write mpm run build and and node dis SL index.js comma and then Dev is going to be the live server that we want to run so we're going to write npm run build and concurrently slash forward slash actually I messed up forward slash quotes npx TSC DW for slash quotes and then yeah just make sure you write this correctly because it's there's a lot of forward slash happening so slash quotes node Monon D- ex EC TS node Source index .ts SL double quotes like that and make sure you have a comma at the end let me just open this up so you guys can see a little more clearly what's happening over here so make sure you have this written correctly otherwise you're going to get an error so I'm going to open up our terminal I'm going to run npm run Dev and it should show you what's happening over here it basically created the this file and we should have our server running on Port 8000 so this means it is running so we do want to test this and the way we want to test this is I'm going to open up another terminal and I'm going to write curl Local Host colon 8000 and you should be able to see This is Home Route right below mine's all kind of messed up because it's all jumbled up but basically if you see this that means the server is running curl is basically polling Local Host 8000 now a lot of people don't want to just always use Curl to test the servers but you can also use Postman so if you go to a link in the description we have a postman link you want to just download whatever it suggests depending on your platform and when you go to postman you can have a little get request over here and you can just hit send and you should be able to see this is home round it just gives you much more options you can see it in different versions and you can have a lot more configurations like headers authorizations using Postman so it's up to you but make sure everything is running so that we can then start setting up our actual apis so the first thing we're going to be setting up in our application is going to be the  projects page over here and we are going to start with this board where we have drag and drop functionality and we're going to use a particular package for that but first we're going to need a list of the tasks in each project and also each project itself we'll also be able to show that same list of tasks in this list View and then also in the timeline view like again chart and then table as well and for each of these Pages we're also going to be able to create a new task so we need a create task button that will send information to the back in and create that task as well as create a new board so this will be another model where we create a new project so we're going to be doing all of this so we will need to create on the backend a list that grabs the tasks so we can show it on every single one of these pages and also the project list so we can display it on this particular sidebar all right so from here we're going to go to our server directory under Source directory I'm going to create a new folder I'm going to call this controllers and inside this controllers I'm going to create a new file called project controller. TS in this file in these controller files is where we're going to have most of our Logic for our apis we'll also have a routes folder but we'll get to that shortly so from here I'm going to import request and response these are more for typescript so we'll be using those and then we're going to import Prisma client and it's going to be from at Prisma client not the extension one let me close this so we have more space and over here I'm going to say const Prisma is equal to new Prisma client and we're going to invoke it this is so we can use the Prisma and grab data from our database we're going to do export const get projects is equal to async and we are going to set wre is equal to request and res is response so this will grab information from the request and res will be what we use for our response and for our typescript we're going to say it is a promise and we're going to say void like that inside here we're going to do a TR catch block and we are going to try for projects we're going to grab from Prisma project. find many so this is pretty simple we have Prisma and inside our Prisma we're going to grab the project schema the project schema is if you go back to Prisma we can see that we we have project over here once you generated when when we did the npx Prisma generate it creates all of these files and we are able to grab it from Prisma directly via this command and find many just grabs the entire list of projects so it makes it easy so this is an omm makes it easier to grab all this information in one go and this should be plural by the way and we're going to do res. Json projects so basically in our response we're going to return the Json of our project's list and that's that so from here we're just going to write catch to catch any errors that happen and in here we're just going to say res. status 500 meaning we get an error code and we are going to say message is error retrieving projects like so and that is all we need for get projects we are now going to create a new folder over here I'm going to call this routes and inside here I'm going to say project routes. TS inside here I'm going to do import router from Express and and we are going to import get projects from the folder or from the file we just created so we're just grabbing this get projects file and we're going to be sending this as a separate route and this is how we use router we're going to do router. getet with the home or just a slash and we are going to say get projects and we going to export default router all that's happening here is telling Express using a router meaning we are able to use this route list in a separate file and we are setting the get request for this particular domain using get projects logic and the last thing we need to do is go back to index.ts and we are going to go under routes and we are going going to say app.use SL projects project routes like so and we are going to make sure we import that project routes from routes SL project routes like so and now the way you understand this let me make sure I save this the way you understand this is when we go to slash projects and if this was like SL DS or something it would be SL project DS but we have it as just a slash so that means it's just SL projects to reach this particular route and once you hit that route all of this right here is going to be executed or from get projects basically so let's actually give that a shot to make sure we have a running endpoint so make sure your server is is running and inside here I'm going to do curl Local Host 8,000 SL projects and as you can see even though it's not very well structured we can see we're getting some list of data and now because we can't see it we can use Postman to do the same thing so I'm going to go back to postman I'm going to write SL projects like so and then send it and as you can see it's prettified pried meaning it's easy to understand and we have our list of projects like so we have 10 and this is the same data that we have in our mock data list over here when we originally seated that information it's basically the same and one last check we won't do this every single time but I just want to show you that right now we should be able to see that this is the same exact information over here so I'm going to click all rows in our project table and we should see we should be able to see the same information that we just received so we have these names description and that's basically the same thing we have in our Postman name description start date end date so perfect everything is working okay so then now we can do the create project which is just the this new project list if we go over here we can see the model we're going to create the endpoint to create the project so we're going to go back to our project controller and we're going to do the same thing except this will be for create project so I'm just going to copy this get projects but we're going to adjust that this will be create and make sure we say this is singular and inside over here I'm going to write const and the values that we are going to grab is going to be name description start date and end date so these are the values we want the front end to send to the back end so we can actually create the project so if you take a look at new boards this is all the information that we are sending and then the team ID will be something we'll be setting up later and that will be more in the front end but over here we grab the name description start dat and end dat we're going to keep this the same except we're going to say error creating project and over here I'm going to remove this and this is when be const new project and we are going to do await Prisma do project. create like so and we need to actually pass this in as data and we are going to say name description start date and end date and what we want to do is set res. status 2011 to make sure we're giving it a uh success code for the beginning or for the front end and I'm going to do a new project like so so here to recap we have a crate a create function from Prisma where we pass in the name description start date and end date that we receive from the end or from the front end simple enough so we're going to now go to Project routes we have most of this set up but this time we're going to do router. poost because we are creating something so when you create something you want to use a post request and we also want to import the function we just created which is create project from the project controller and we should be good to go for that and we don't need to do anything over here because this is importing all the routes so instead of the get request we can now do the post request all right so now we want to test this create project endpoint we can use the C command over here but it is kind of a pain to do that in a c command so it is more ideal to do it over here in Postman so let's give it a try if we change this to post request we are going to hit this SL project endpoint and we're just going to get an error that says error creating a project and that's because we actually haven't sent anything in our body and also the error message that we have is not very descriptive we should actually know what type of error message we're getting and over here I change this to error. any because I want to change this I'm going to create a template string and we want to actually add error. message this will provide a more descriptive error for what is happening and we're going to do the same thing before we forget up here we're going to say airor retrieving projects and we are going to say colon any we're going to save it and now if we give it a try we're going to send it and now it actually gives us a more detailed error and it says argument name is missing so this will give us more information even though it's a little jumbled up maybe there's a better way I guess yeah it's a little a little jumbled up but we have information about what is actually happening so we actually need our body so when we create a post request and we have this name description start date end date we actually need to be able to send this in the body of the request for a post request and the way to do that is we're going to select body we're going to go down to raw and we are going to input those values and the way we're going to add is going to be start with name and then new project like so and then we're going to say description and we're going to say this is a new project and by the way this is Json format so you do need to make a quote around the keys and I'm going to say start date colon and I'm just going to write 2023 0 1 01 it's going to be T and we're going to say 0 0 colon 0 0 colon 0 0 Z so this is just a example format of our time and we're going to do the same thing with end date except give it a different date I'm going to just copy this entire thing paste it and we're just going to change this to 12 31 all right so now if we try to send it we're going to get this unique constraint failed on the fields ID so this is kind of a complicated problem but I will explain very quickly on how to fix this so if you take a look at let's say we have our project we're going to query our project list so ignore 11 12 13 cuz I just created those but 1 through 10 is from the mock data that we seeded earlier now because I manually added these IDs while postgressql and Prisma is set to autoincrement it still believes that the ID it's going to try and create is going to be one but that is conflicting so we need to add an SQL statement or we need to run an SQL statement to try and fix that so if you go down you don't have to go to a link in the description or anything but there is a command in the description below that you can copy and this will make sure that we start from 11 in your case mine will start from 13 so there is a command to do this so over here we are going to run a query so this is how you would run a query directly an SQL query directly on your database so we click this query tool button on the project table and I'm going to paste the value you can if you don't want to just copy it you can just take a look at the entire thing over here maybe pause it for a second and what we need to do is change this to project we're just going to change this to project for the data model name here and what this will do is basically take the max value that's already existing in the ID and I'll make sure the autoincrement ID that's being tracked by postgress will be set to the max value so if I set an execute script mine will be 14 yours will probably be 11 if you haven't added any values so that means now the autoincrement is at the correct value so if I go back over here and I do the exact same request I don't change anything and I hit send now we should be able to see I'm going to hit the pretty that we get the project that we just created back and that's exactly what we want this is the new project that will be added to our table so if I do something like this I'm going to hit don't save we are going to refresh our tables and I'm going to requery this projects and you should be able to see your new project over here so there we go our post it was a little bit of a struggle but we got our create project working with our API requests so that when we create this on the front end we know the back end is already working so we'll get to that soon all right so now from here we're we're going to do the same thing except we're going to create a new one we need the tasks as well so this is just a project so that's the entire board but we also need to create the task which are the individual items for each project so under controllers I'm going to create a new file I'm going to call this task controller. TS and inside of here I'm just going to copy from get projects up over here go into task controller and I'm just going to paste this and we're just going to adjust from here so instead of get projects this should be get tasks and now instead of just grabbing the list of tasks later on we're going to have to grab tasks based on which project is open so projects include a number of tasks so we need to grab the project we're going to from the front end we're going to grab the project ID we're going to be sending that project ID to this backend and we are going to grab the tasks associated with that project ID so to do that we are going to grab project ID from our rec. query so in our query instead of the body this time it's going to be in the query because this is a get request so it's going to be a query pram that we are going to set the project it and we'll come back shortly so over here I'm going to say const tasks is equal to await Prisma task. find many but we are going to have several conditions and in Prisma you can use where and inside here we can do project ID and we're going to say number is going to be project ID like so so this this should be a comma so this should provide a project ID that we can pass into the tasks and the task will be associated with this particular value and we can also make sure we include specific properties we can say author is true assign is true as well canot tree Walker and then comments should be true attachments should also be true as well so now this will grab task specifically from that project ID and we should change this to tasks and over here instead we can say error retrieving tasks instead so this is our get task endpoint and inside here we can create a new route we can say task routes. TS do the same thing over here copy it from the project routes and we are just going to say and then from here I'm just going to get rid of the create project remove this and I'm going to change this to task controller and this should be get tasks for both of these so I'm going to save that inside our index file we want to do the same thing say app.use and this should be slash tasks and then this should be task routes and we are going to import that as well import task routes from routes slask routes and we can save that and now we can give it a try we can do curl as well actually let's just go straight to postman because Postman is a lot better we are going to use a get request we're going to say tasks and we are going to we don't need a body for this so we're going to send it and we do seem to get find many oh we do not have the project ID Associated or we're not sending the project ID to grab the list of tasks so if you take a look at the seed data we can see that the project ID for this particular task one is going to have certain number of tasks so project ID it's all dependent on which which one has project ID so we're going to be sending project ID of one and the way we do this is we go over here we can say project ID since this is a query program and the value should be one and if we send that we will get all the task associated with project ID one so as you can see these are all the relevant tasks for this particular project great so we have the list of tasks that we can grab but now we should be able to create the task so I'm just going to close all of this keep that open keep those open so now what we need is create task so this is going to be a similar process to what we did before actually let's open up project controller and inside here we're just going to copy the create project and go back to task controller and paste it over here now we're going to have a create task and now create task is going to include a lot more information so bear with me we're just going to add all this information over here so it's going to include title description status priority tags start date do date not end date points project ID author user ID assigned user ID and that's pretty much all of them and so what we're going to do is we're going to grab this entire thing and inside our data we're going to just paste it and this should be task instead so this should be new task and it seems like we're getting a validation issue but pris can tell you if you're spelling it wrong and it tells you that this should be with an O like so and it seems like I did miss assigned user ID as well so we can pass that in and we're just going to call this new task and over here we're going to say error creating a task for our error message and then like usual we're going to go to task routes and inside of here I'm going to do router. poost slash and then we're going to do create task that's going to come from task controller so we have our create task and we already have our task routes already set up and so now we want to test this so before we go to postman I want to just copy this entire thing over here this will make it easier if we do it in our vs code editor so I'm going to create an object and inside of this I'm going to paste everything we have had select all of this shift Tab and then I'm going to hit alt command or alt control and hit the down arrow and select all of these and then also hit shift alt and then right arrow that will select each one I'm going to hit the double quotation and that will highlight that press the right arrow button once or actually twice and then hit the colon and we're just going to leave it like this this will make it easier to write inside our Json object when we add the post so I'm just going to hit command X and then go to over here we're going to remove this we're going to change this to a post and we are now going to go to body like we did before and go to Raw so now I'm going to paste it so now we actually have an easier time writing this so I'm going to say new task like so inside the description I'm going to say task description status needs to be identical to one of the values because it's a enum I'm going to say to do for example this priority we can say it is high I'm just copying something like this this is more for testing purposes we can say deployment now you know what we could just actually copy this entire thing make it make our lives a little bit easier and we're just going to paste it and that should be pretty good we don't need the trailing comma and from here let's give it a shot probably won't work but if you take a look unique constraint once again because of the ID issue so we're probably going to get this error for every single one so instead now we're just going to go to believe it doesn't matter but we're just going to task we're going to go to query tool and we're going to copy the same little SQL command that we had before we're going to paste it over here the select setv and we want to change this to task and same thing over here we're going to say task as well and I'm going to execute script make sure we have 41 and now let's give it a shot one more time and as you can see it seemed to have worked worked so we have ID of 41 with the new task task description so let's actually go over here query this CL all of these I don't need to see those so now we're going to go down and we can see that we have our new task perfect everything is good project author user ID everything that we set is now correct all right all right we're almost done with the backend for this particular projects page but there's one last thing we actually need if you take a look when we are looking at the board and we move one of these we are actually changing on the back end what status these tasks are at so it's changing from if I do this task 32 it goes from a to-do task to a work in progress status task so that means we need a backend that updates the task status so to do that I'm going to narrow that down I'm going to save it and we are going to let's go up here and I'm going to copy the get task over here just paste it below and we're just going to change this to update task status and what we're going to do is we're going to use both query prms and direct. body for this one so we're going to say const task ID and we're going to grab it from rec. prams and then const status and that's going to come from the rec. body and from here I'm going to change the tasks to updated task and we're going to do Prisma do task and this time it's going to be update because we're going to use the patch instead to update the task as opposed to cre creating a new one and what we're going to do is we're going to say where ID is for number task ID so we're going to again add a constraint and say the ID for this particular one this is what we want to update so instead of include we are going to say data colon curly braces this is going to be status colon status like so and the res. Json should have updated task like this so this is how you would update any of the values in Prisma and we're going to say error updating task now I'm going to save it and now we're going to go to task routes and now this one's slightly different we're going to do router. patch patch is for updating and we're going to set this to be slash task ID because that's Dynamic so the endpoint that we want to set is going to include the task ID we are setting over here and we also going to set status like this so basically to hit this endpoint it's going to be slash whatever task ID we want to change and then we're going to WR SL status to change that and we want to grab our update task status from our task controller like usual and now we should have that route and now we want to test this task so we're going to go back to postman and we're going to do patch this time for tasks and we want to update our information so we can basically use the same body except get rid of everything except for the status and we want to do is get rid of this trailing comma and change this to-do instead to work in progress and for the prams we actually want to add instead of project ID we're going to say task ID and we want to change the one we just created so 41 is going to be the one we change that is the task ID and instead we're going to change this a little bit this is actually going to be sl41 SL status like so to hit our endo and now that we sent it we have work in progress so this is our endpoint we have to custom set this URL because it's not going to add by query prams we have our own way of doing it and let's actually check we're going to refresh this once again for tasks and we're are going to hit the all routes double check that we have for task 41 work in progress is the new status so it does work as expected and we don't need to reset the ID for this one because we're not creating a new one so we are all set for  that and so there we go we have our projects API and then we have our task API already ready for this particular project page so now we can go to our front end let's close all of this close all of this and now we can go to our source all right so from here we're going to go to state go to our API and the first thing we're going to do is actually create some types and we'll use these types to create our endpoints so I'm going to do export interface project like this and I'm going to go to our server go back to controllers go to Project controller and I'm going to grab all of these name description start date end date paste it over here move those back to ID is number like this and I'm going to hold alt option and click all of these colon and I'm going to put string like this get rid of the comma put a semicolon for each and I'm going to also hit alt for all of these put a question mark like this and that is our type for project now we're going to do the same thing for task so I'm going to go down to task controller once again and over here I'm going to copy all of these values come over here I'm going to say export interface task and I'm going to paste it down here and then from here I'm going to move these back I'm going to hit com I'm going to select the comma do command D all the way down over here erase this with a colon and for now I'm going to keep this to be number it's going to not all be number but we're going to change it so this title should be a string and then we also should have an ID to be a number description status priority tags start date due date points author user ID and assigned user ID should all be question mark I'm going to change the description to be string this one should be status which is something we'll create very shortly this one should be priority tags start date due date should all be strings instead so I'm going to do command d three times do string like that and we are just going to save that for now so now we actually need status as well so status is going to be an enum status like this so we're going to set this to be to-do is equal to Todo like that work in progress is equal to work in progress under review is going to be under review completed is equal to completed like this and just to let you know status is enum that it can only be one of these four values and we're going to have the same thing for priority which is also an enum but with different values of course so we're going to say priority and we are going to say urgent is equal to Urgent in strings high is equal to high in strings medium is equal to medium in strings low is equal to low in strings backlog is equal to backlog in strings comma and we are going to close that so basically we do need to set these typings which will help us identify what the type structure will be for each one of these API calls that we make and inside of task we actually if you go back to task controller we added inside our get task we get these values author assigning comments and attachments so now we haven't created some of these or we haven't dealt with some of the comments or getting those request but it grabs information relevant for the foreign key in our task so in this request we are able to grab the author assign comments and attachments even though tasks does not include the data model even though it's not included in the data model of tasks so that allows us to grab this extra information so that's where we are going to add these included options over here so we have something with user and we have assign colon user like this then we have comments as well which will be also a comment type attachment qu uh plural question mark attachment as well so these are more types that we are going to write so if I scroll up over here I'm going to do export interface user and this should be capitalize as well this should be user ID ID question mark colon number username should be string email should be string profile picture URL question mark colon string Cognito ID is also going to be a string in team ID question mark colon it's going to be a number I know this process is a little bit tasus but it helps us get the types correct and it'll help us later debug a lot easier from here I'm going to do export interface attachment inside here I'm going to do ID of number file URL is going to be a string file name is going to be a string task ID is also going to be a number uploaded by ID is going to be a number so there we go we have all our types that we're going to be using and now we can actually create our API calls so these are going to be the end points that we are able to call the back end like the end points that we've created in our backend this will allow us to make that call from the front end and the first one we're going to write is going to be get projects and that includes build. query so this is part of Redux toolkit and we are able to make API request via bill. query over here and project is going to be what we get back the typescript schema that we get back from the back end that is exactly what's coming back and inside here we're going to set the query and it's going to be an arrow function with projects meaning this is basically the endpoint SL projects so the way this works is that we have fetch based query this grabs the public base URL and right now if you go to env. loc that is localhost 8,000 like we've seen before and then it tags on SL projects from and lastly we need to have something called provides tags and inside here is going to be projects so that means we also need to identify the tags to be projects so what this basically means is that when we grab the API request of projects we're going to get some data on the front end and the way Redux toolkit query identifies where that information or data is stored in Redux toolkit is via projects this will be helpful later on when we create a project we can invalidate this particular tag meaning if we create a project Redux schol kit query would automatically get the new list of projects with that new one you just created and it's going to recall get projects once once again so it's always going to give you the updated version if you invalidate properly so let's actually do that so let's say we have create project and this time since this is a post request it's going to be a build. mutation not query this time and we are going to say project and what we receive is going to be partial project which all that means is that we're only going to receive the part ual amount of the return meaning it's just only part of that type it's just a shorthand and easy way to do it so we're going to have query over here inside here we're going to pass in project so this is going to be in our API call the body that we have sent remember in our Postman when we sent the values this is where we are going to send it so inside it's going to be URL projects so like before this was a shorthand notation this is no longer a shorthand notation because we need to pass in a body we also need to pass in a method in this case and it's going to be post and the body is going to be project now this project is going to be in the actual function where we make the API call this is going to be that value for that body so right now we don't identify that but we will when when we create the create model or create project section so when we create this front-end as aspect we are going to pass the project into this particular function to make the API call over here we're going to hit comma and this is invalidates tags don't put don't go for that one put that one right here and we are going to pass in or colon pass in projects inside this square bracket so this like I said when we create the project it's going to say hey we need to update this Project's value so that means when you create this project Redux toit query is automatically going to refetch and grab the entire new list of get projects automatically so that you don't have to deal with the annoying code that you would typically have to write get projects after this happen happens so you don't have to write that you can just write invalidate tag to make sure we have the most updated version of the Project's list so that's why it's very useful to have this this is the same in t St query or SL react query which is the same thing this is a similar process in Redux toolkit query it does the same thing and then from here we just need to open this up so we're going to say use get projects query and and then we're going to do use create projects mutation and that will be the function you can think of this as a function like a fetch call that will call the backend grab this information but it would automatically just say use get project query that will grab data from the back end that we have and then we can use that and I'll show you that in just a moment but before that let's do the tasks as well so we're going to just copy this entire thing and this time is going to be get tasks instead and we're just going to change this a little bit so this first parameter is obviously task array so that basically just remember that this is right here the return like the schema like how the type of the return is going to look and then the second one is what you're sending so in this case it's going to be project ID in an object as a number and inside our query we're going to have user ID because we're going to need to add that to our query so this is going to be tasks slash task sorry question mark project ID is equal to in dollar sign curly braces and this should be a template string instead and I did make a mistake this is not user ID this should be in curly braces project ID same with over here and now this one's going to be slightly different we're going to have a tag type of tags like we typically do but because we have multiple tasks and we have a list of tasks that are for different IDs because we have something like this we are going to have to modify the provid tags just a little bit so we're going to do result like this with an arrow function and we're going to say if the result exists we're going to say result. map we're going to pass an ID like so there should actually be two as pars and we're going to do an arrow function we're going to say type is equal to tasks like so as const I and we're going to close that so that is a way for us to handle this result situation because we want to map it otherwise if the result doesn't exist we are going to pass it in as type colon tasks as const and this was kind of necessary specifically for for what we are doing with tasks because the typing doesn't work unless you do this and I did mess up this is not tags this should be tasks we just save it and we should be good to go with the get tasks and now again we're going to do create tasks similar to create project so I'm going to copy the create project put create project over here we're going to say create task build. mutation instead of the project I'm going to hit command D grab both the project it should be task instead grab the project over here I'm going to hit command D twice after I highlight this project and I'm going to write tasks and then this one should be capitalized T like so and this should be pretty good similar thing we have the tasks in validation once we create the task you'll get a new list and then right below we're just going to use use get tasks like that query and use create task mutation and we are going to save it and finally we have just one more the update task status and don't worry I know this is a lot just to make this particular board page but this is probably the most intensive part of the application so that's why we are going through this long process to create our board so from here I'm going to do update task status and inside here this should be task and this is going to be slightly different we are going to have we're going to pass in task ID of number Status should be string as our object inside our query we're going to have task ID and this should be in curly braces because this is an object and we are going to pass in status as well inside the URL we're going to have slash dollar sign curly braces task ID like so and status and over here with the double quotes this should be template string like that and the method should be patch finally inside here the body this should be in curly braces status and over here we need to invalidate the tag and again because we have an array this needs to be slightly different because we're invalidating these get tasks and we want to invalidate them individually so we're going to do result error and then the last part is going to be task ID so we are trying to grab this particular value and inside here we're going to write type should be tasks comma ID should be task ID and just just so you know if you don't fully understand what's Happening Here specifically is cu when we update task status we're updating a specific task and we're doing this via task ID that's why we have to do this extra Arrow function otherwise we do not want to update the entire list of tasks we want to update a specific task any time we use update task status however obviously in create task we are updating the entire list because we're creating a new task we can get refetch the entire list of tasks but when we update task status we want to update one specific task only so we don't have to refetch all the tasks that we have over here so that's why we are doing that all right so from here the first thing we're going to be building is going to be this projects page and it's going to include this header and the boards Button as well as these tabs over here so we're going to do just that and now if I create a new folder I'm going to create and call this project projects right here and inside this I'm going to create another folder and I'm going to put this square brackets call it ID in there so as you can see if you look at the URL SL projects SL1 so that is actually the project ID number so to do that since we want to make it Dynamic we can probably go to Five 3 2 and nextjs this is how it's being handled so over here I'm going to minimize this a little bit I'm going to create a new file I'm going to call this page. TSX and this is exactly where we are going to write our code and before we do that we're actually going to move all of these components we're going to move it outside to the source directory because this is probably the correct way to do it and we're just going to change this to components without the pr so this will not be included in our directories and over here we can save it make sure we change this right here in our dashboard wrapper so we have the proper location for where our components is and then in here we're going to go back to our page. TS all right inside our page. TSX I'm going to do TS RFC and we are going to call this project like so and inside our props we're going to add prms curly brace's ID of string and we're going to grab this over here in the prop section and we're going to take out prams as well so the reason why we can do this is actually this particular page grabs the ID that we are getting from the page and we can use that value so the way we grab it is we can do ID like this and we actually don't need to pass pams into this project component because it's automatically doing that by default from nextjs and right now we're going to do const active tab set active tab so this will determine the state so we're going to use use state from react and we are going to grab the board as well this will determine the state to figure out which of these tabs tab items will be selected and then from here I'm going to do is modal new task open comma set is modal new task open so we are going to have later on I'm going to set this to be false we're later on we're going to check this for state to determine whether the new task model is open or not okay and then from here inside our div we are going to leave a placeholder for modal new task we'll get around to that and we are going to create a project header component which is something we will create in a moment and our project header component is going to take active tab so we're going to bring we're going to bring down the active tab State into this child component and we're also going to pass in the state for the set active tab as well and by the way what we're going to do is if active tab we're going to do stuff like active tab is equal to board and we are going to if that's the case we are going to set that to be the board component so we're just going to write this out just a little bit just so you know understand what we are planning to do and then from here I'm going to import project header I'm going to say import project header from at slapp SL projects brackets or slash brackets ID SL project header so this will be where our file will exist and by the way this is going to need a use client directory over here so we're going to save that let's actually run our application so right now we are running the server but we are not running the client so the front end so what what I'm going to do is I'm going to run npm run Dev and so right now we can't see anything so let's just create our project header real quick I realized this should not be in the ID directory it should be in the projects folder so I'm going to create a new file call this project heather. TSX and inside here I'm going to use TS RFC have project header and leave it for now and now my linter is messing up so I'm just going to erase that hit project header like that to fix that problem and we are we're just going to comment this out just for the sake of brevity for now so what we want to do is be able to see the projects but the projects we don't have a list of or in the sidebar so we're going to do just that we're going to go to our sidebar and we are going to make an API request to grab all the projects so we can show it on our sidebar so to do that we're going to go down to right above dispatch I'm going to say con and I'm going to grab the data and we're going to rame it to be projects and we're going to grab it from our use get projects query from the state of Redux toolkit that we created so that will grab the data that we are going to need and once we have that we can actually go down to our button where we have our projects list right below this we can do show projects so remember this is the toggle for showing our projects list and we can do projects question mark. map so this will give us our list of projects and I'm going to create an arrow function inside over here and it seems like above here I should call this projects not project singular so over here inside project directory I'm going to add sidebar link and inside here I'm going to add this time we are going to need a key because we are doing a list so I'm going to do key like so project ID and then we're going to put an icon and we're going to put a briefcase from loose side react and inside here I'm going to grab the label and we're going to use project. name for this with h ref of template string projects SL dollar sign curly braces project. and then we are going to close that and if we do that we immediately see all the projects we have created now it looks ugly with the new project but we have all our projects list in here and now we can click on it to see our project so now right now we don't see anything because we do not have anything displayed for our projects page but this is exactly how we would show our project list then from here now we can go back to our project header page I'm going to close the index for the sidebar and inside our props we're going to add the props that we need which is active tab colon string and then set active tab colon tab Name colon string like this this is going to be the set function that we have and inside our props we're going to add active tab comma set active tab like so and also we also need State for the new project when we open that model as well we already created the task one but we also need to create the mute the model for the new project and we're going to do it inside here and I'm going to say modal new project open like so and then set is modal new project open and then we are going to bring in use state from react and I'm going to set this to be false and then over here I'm going to write class name with PX of 4 XL PX of 6 so different padding depending on the screen size get rid of the project heer I'm going to write a comment for modal new project which we'll handle later and then we'll do div class name of padding bottom six padding top of six and we're going to have different padding depending on the size of the screen so I'm going to do all of this right here and then I'm going to add a header component which we will create so I'm going to go into our components directory create a new folder I'm going to call this header and inside here I'm going to create a new file I'm going to call this index. TSX inside here I'm going to do TS RFC call this header so we have a header component this is just for having a consistent header like this we're going to have the header title we're also going to have a header button and that's going to be consistent across multiple Pages some pages might not have this button so we're going to account for that aspect so we're going to go back to our header component and inside of this we're going to have some props I'm going to call this name with the string with the button component question mark and this is going to be any because it's could be a lot of different things and we're going to do is small text and we're going to have like a smaller text version for certain pages so we're just going to keep that and inside here I'm going to have curly braces I'm going to do name comma button component comma is small text and we're going to have that to be a default of false inside here we're going to do a div we're going to do a class name of margin bottom five Flex with a width of full items center with justify between so vertically aligned and spaced between as far as possible those are the settings we're going to have our header I'm going to get rid of the header text I'm going to put a H1 tag I'm going to give it a class name curly braces template string and we're going to set is small text pmark text LG colon text to extra large we're going to close that and we're going to do font semi bold with a dark of text white so we have different colors for different modes and then we're going to put name in there as well below this we're going to pass in the button component so that they're spaced out so this is the title this is the button that is optional so now we can go back to project header and in here I'm going to bring in at components header so that will bring in the header that we have but we also need to pass in the name so we're going to do product design development and I'm going to save it and we don't see anything but that's because if we go to the page. TSX we want to to uncomment that out and we should see product design development over here I don't know if that's the correct title for this but whatever it you can name it whatever you want I'm not exactly sure a good name for that before we go to the tabs the list of tabs that we have over here we also want to create a tab button so I'm going to create above or below here I'm going to create a component called tab tab button like so and we're going to create another component over here but this is going to require some props so I'm going to say type tab button props and in curly braces we're going to do name of string icon of react. react node set active tab colon tab Name colon string we're going to add the void as well and then we're going to do active tab colon string as well and over here inside the curly braces I'm going to do name icon set active tab active Tab and then colon tab button props so we have props for our tab button so that we can use it for different scenarios and we're just going to set if it is active we are going to do active tab is going to be equivalent to the name then from here I'm going to do return put PRS I'm going to do button like this and I'm going to do class name and we are going to write a really long Tailwind for our tab button so we're going to do relative Flex items Center we're going to do gap of two pixel or padding X in the One py 2 text Gray 500 and we're going to do after we're going to add an absolute and then after we are going to do negative bottom 9 pixel in square brackets and we're going to do after left of zero after colon h of one pixel after of width full then we're going to do hover Colin text text blue 600 do dark of text neutral 500 dark colon hover colon text white I know this is super long but we just want to add all of these Styles and then do a large PX4 for basically different medius queries and then we're going to do dollar sign and we're going to do is active so we're going to have a different color when it's set to active Tab and we're going to do text of blue 600 and make sure there is a question mark and inside of here we're going to do after colon background blue of 600 dark colon of text white and we're going to do colon empty string so quite a lot of classes for this particular one inside here we're going to do on click and we are going to in curly braces is do set active Tab and we're going to pass in the name and inside of here we're going to pass in both an icon and a name so we have our tab button quite extensive quite long but we just got to do what we got to do for this so we have our tab button now now we can go back to our code and make sure we have an equal sign for the tab button props otherwise it's not going to work right below our div with the header we're going to add a section we're just going to call this tab tabs like that and I'm going to do div class name and we're going to do Flex we're going to add a flex wrap reverse so we're just going to reverse the flex for this one we're going to do gap of two with the border of y border of gray 200 padding bottom of 8 pixel padding top of two we're going to do dark border stroke dark like this and for media queries with items Center like so inside here I'm going to give it a div with class name and it's going to be Flex of Flex one items Center gap of two medium screen with gap of four going to save that let's actually remove that space and now we can actually add our tab button so we're going to add the tab button that we created and we're going to say name is going to be board with an icon we are going to pass in Grid 3x3 from blue side react make sure you import that we're going to have class name of H of five with a width of five close that out and we're going to do set active Tab and then set active tab as well do the same thing with active tab active Tab and we are going to close that tab button and once we save it we should be able to see our board tab over here and it's highlighted with an underline you have hover effects and we know that it is active so now we're going to do the same thing but for list timeline and table so I'm going to paste this three more times change these values so I'm going to say list this one is going to import list from lose side react this one is going to be timeline and we're going to pass in clock from loose side react and then table over here and this one's going to be table for the icon and I'm going to save it and that should pop up every single one over here so that is our tabs but we also need these icons with the search and the tabs so that when we are on small screen this should be showing on top whereas this one is going to be on the right on larger screen so we're going to do just that so below these we're going to have a div with a class name of flex items D center with a gap of two we're going to close that over here I'm going to add a button with the class name of text Gray 500 and if we hover over it we're going to do text Gray 600 and for dark colors we're going to set this to be text neutral 500 and if it's dark we're going to set hover to be text of gray 300 close that out and we're going to add our filter icon from loose side react we're going to say this is class name of H of five with of five and we're going to close that and below this we're going to have another button and we're going to be using a share 2 icon instead so from lose side react make sure you're importing it each time and over here I'm going to do a div of class name and set this to be relative so we can do the search icon and we are going to do input with type equals text placeholder of search task and below this we're going to add a class name of rounded media order padding in the y direction of one padding left of 10 padding right of four with the focus of outline none so we don't have a border when we're focused and then we have a dark border dark secondary color so this is for dark colors and then we're going to do dark with background of dark secondary like this and for dark we have text of white like so inside our input we're going to do grid 3x3 again we're going to do class name and we're going to do absolute and again remember we're doing the good old absolute is going to be positioned with within the relative icon so now I did make a mistake right here close this the input should be closed over here like so and we can do class name left left of three top of two height is going to be four with the four units text of gray 400 dark of text neutral 500 and we are going to close this grid and now if we check our application we should be able to see our filter share and our search like so all right so from here we're going to start with the board view page this is probably the most intense page that we're going to be building on the entire application so there's going to be a lot going on we are going to require all of these task column headers right here as you can see and this should create a new task as well if you H um if you click on these buttons as well as this task elements and then we also have the task columns so we're going to do all of this on our page so we're going to go into our projects directory I'm going to create a new folder and we're going to call this board View View and inside here I'm going to create a new file I'm going to call this index. TSX and in here close this out I'm going to do TS RFC let me close all of these guys out so we don't have to deal with any of this and I'm going to call this board view just for now so here we're going to have several props so I'm going to just call this board props inside here I'm going to do ID of string and we're going to do do set is modal new task open so we want to pass in that state so we can change the value of opening our model but this is for a little later but we're just going to do it while we do this and inside here we're just going to pass an ID as well as set is modal new task open and over here we want to set and map out the task status because we're going to be using these values as an array so we're just going to pass in to-do work in progress and then under review comma and completed like so so inside here the first thing we're going to be doing is grabbing the tasks so we're going to do const we're going to grab the data and we're going to relabel it as tasks plural and we're going to grab the is loading and error and we're going to grab all of that from use get tasks query and we're going to import that but when we get the task remember we also need to pass in a project ID and we do that by going like this project ID passing in the number and we are going to pass in ID like so so this is going to use the get task query that we created so if you go over here you can see that we require the project ID so that we know which project tasks we need to grab so that is exactly what we're doing over here and before we do anything else I before we forget I want to go back to our page. TSX inside here I actually want to uncomment the active tab is equal to board so we can actually see it and we need to pass in the ID of the project ID as well as set is model new task open and we're going to pass those in as well so we can use the board and make sure we need to import board from board view but we're just going to call this board instead and as you can see we have a board view over here nothing is styled just so we can know that this is actually displaying so in here we want to create a function called move task so this is going to be a function that we will use to handle the moving of task from different columns to another column and what we need is the task ID and also two status so we need to fix or figure out what status is going to change and we're going to pass in update oops task status like so and this value right here is going to require our API call that we created earlier so to create this we're going to call this update task status and it's going to come from use update task status mutation so that is the API query that we made before so if we go to our API functions we want to use the use update task status which is a query we actually haven't created so if we have used update task M status mutation we can save it and then we can rewrite the N grab this value and it gets imported so this particular function or mutation API call will be called when we are running this move task function and you can call this whatever you want but this is the trigger the basic trigger function that will call this API inside of here we can do task ID grab the status and we're going to pass in two status as well like this and below this we're going to say if is loading we are going to return with div and we're going to say loading dot dot dot so basically if the page isn't loaded we or like we don't get the lists of the task we can render out a loading div and if there is an error we're going to return a div and we're going to say an error occurred while fetching tasks like so and now from here what we are going to actually use is going to be the drag and drop provider which is the react DND drag and drop for react so if in the link in the description there is going to be a link to react DND if you're curious on the documentation but this will allow us to do all the drag and drop functionality that and so we're going to be using that so I'm going to write DND provider and we need to make sure we import d n Provider from react-dnd like so and we're also going to need to provide the HTML 5 backend it's basically a different they provide like a backend way if you want more customization for your drag and drop provider so I'm going to say HTML 5 back backend it's all part of react DND docs and we're just going to grab the react DND HTML 5 backend as well and we're going to pass that in into the backend section over here and we are going to pass in HTML five backend and we are going to be using just that and right now we don't have any error but we also don't have anything shown so we actually need to pass in a few things so we're going to pass in div class name with grid grid columns one with the gap of four padding a four with media queries of grid columns two extra large we're going to do media query of grid columns four so this will set up the column list and you can see that we had our media queries before we're going to close that div and inside of here we're going to we're going to grab our task status list of array and we're going to map that out because we want a column for each of the status that we have in there and we want to pass in task column and for each of these we're going to pass in a key with status status should be the status itself tasks is going to be the tasks that we already have cuz each column is going to require all the tasks and then move task is going to be the function that we pass in and also we need to set is modal new task open if we want to be able to open a new task for each column so I'm going to grab that over here close this task column and we are obviously going to get an error because task column is not cre created and also we need a closing PRS like that for our task column and so next up is going to be the task column and as you can see we'll also have a task component as well but for now let's create task column and inside here we're going to have a curly braces of status with a list of tasks we're going to have move task and we're going to do set is modal new task open like so and inside here we're going to call this task column props because we will be creating it just right here call this interface task column props for the curly braces we're going to do status actually we should just keep this to be type instead to be consistent and we're going to set the status to be string with task being task type and this task type is going to be the same type that we have from type from the API endpoint so this should be export interface task so we're going to import that but we don't want to call it task because we are going to create a component called task so instead I'm going to call this task type from at SL State SL API so that will pass that in over here and that's going to be our task type below and then from here I'm going to do move task and we are going to have the same type that we have before for this particular move task function and I'm going to call this two status to be string with a return of void and we're going to do set is modal new task open and we're going to set this to be is open is going to be a Boolean with a void return function and then from here I'm going to close out the return function and we should have all of this ready now we can use some of the drag and drop functionality so the first thing I'm going to do is the square bracket and we're going to have is over meaning this is the functionality from drag and drop when we determine when we have something hovering over another column we can use those values and we are going to use used drop from DND this is a particular hook for us to do that inside here we're going to have a curly braces and hit enter and we're going to accept colon a task and we are going to drop the item colon and we're going to do ID of number like so and we are going to return move task for item. ID comma status so when we drop it this function gets executed and if you remember move task is going to update and call or backend because we are saying use update task status mutation this is the trigger for that API call and the final thing we actually need to do as part of the documentation we need something called collect and we need to pass in a monitor and this monitor is going to say for is over we want to make sure we change this to a Boolean and we want to invoke this function to make sure the things are over it again we need to close this drop so that we have everything working make sure we have an equal sign and close this out and make sure we have a beginning PRS like this oh we can remove this closing PRS and it should be good so there's a lot of little brackets and curly braces that gets a little confusing but once you have this this is the functionality for the drag and drop if you're able to write this hook and understand it then you should be able to be good to go and then const we're going to grab the task count so we need the number of tasks for each one we're going to say task filter we're going to grab each task we're going to say task. status so we determine which status we're talking about we're going to grab the status of the particular column that we're talking about which is associated with this task column for example to-do column will check the current task status we're going to filter it out and count the number of task per column and we're also going to change the status color based on the column and we're just going to use a little bit of a map we're going to say to-do colon number 256 3 EB comma work in progress colon and we're going to do number 059 669 comma and we're going to do under review colon number D9 7706 comma completed colon 0000 0 0000 0 and we're going to have a status color just for that then we're going to return and we're going to have a div and for us to use drag and drop inside our div we need a reference to the drop return that we grabbed from DND so I'm going to say instance because that's going to be the instance that's going to be passed in and we want to drop that instance into over here now just remember this is all in the react DND documentation but this is basically how you would go about it and then over here I'm going to say class name and we are going to do SL of py of for rounded large py D2 XL PX of 2 and we're going to say is over question mark BG blue 100 dark of background neutral 950 and go over here add a colon with empty string and close that out and we still haven't seen anything because we haven't displayed anything just yet so over here I'm going to have a div with class name margin bottom of three Flex with a width of full close that out have a div that is self-closing in this case and we're going to call this class name with a width of two and we're going to make this an important tag because it doesn't override without using the important tag in Tailwind and we're going to pass in status color curly brace or square bracket status and make sure you get the curly braces and square bracks correct here because it's a little confusing and then rounded s large like this and for our style because we are not getting the correct background color with all of that we are also going to pass in background color just in case with status color of status so we still don't have anything inside each column that's why we don't see anything so I'm going to do div with class name of flex with the width of full items Center justify between make sure everything is spaced out we're going to do a rounded of e large background of white pixel or padding of five in the X Direction Four in the y direction and we're going to give it a dark background dark secondary color now in the future I'm using a lot of classes right now but in the future I will start using a component Tailwind component Library like Shad CN so a lot of this Tailwind class styling will be handled by the library so for this one we're kind of doing this manually so we're going to have an H stre tag we're going to do Flex with an items Center with a text of large font semi bold and we're going to have a dark with text of white and finally we're going to actually have some text and we're going to pass in our status and we're going to add a little space after it like so and now we should finally see that we have our column headers visible because we actually have content within before we couldn't see any of it because we did not have any kind of content content so we also want to add the task count the number of tasks per column so we're going to add a little span tag inside the span tag I'm going to write tasks count but we also want to style this so I'm going to do class name margin left of two inline block rounded full background of gray 200 padding of one text of Center text of SM leading none and a dark of background dark tertiary like so and give it a style of width of 1.5 R RM height of 1 point5 RM and there we go we have our task count for each one we don't see our task cuz we are going to get to it and I believe the styling is not correct so we're just going to grab this SL H3 surround it and pass it over here and the task count should be right next to it and it should be a different font size and below this we're going to have a div we're going to say class name is going to be Flex with items Center gap of one and we are going to pass in a button with class name of flex H of6 with of five items Center justify Center and a dark of text neutral 500 inside of this I'm going to say Ellipsis vertical from loose side react and I'm going to say size is 26 pass that in and we will see this ellipse is vertical and we're also going to have another button and we're going to say class name is going to be Flex with a h of six width of six items Center justify Center rounded background gray 200 with a dark background dark tertiary different colors for dark mode and then we're going to say dark of text white and then inside of this we're going to we're going to have an onclick and this is where we can open up a new modal task if we wanted to so set is modal use task open is going to be true if we click this button and inside here there should be a plus icon from loose side react and we're going to set this to be size of 16 we're going to close that out so we have our plus icon and now finally we can handle the tasks list so make sure there is three closing div icons and right here we're going to hit enter and we're going to say tasks. filter and we're going to filter by the task status so we want to make sure all the task are in the correct column and we are going to set that equal to status to make sure we filter it out correctly and we're also going to map and we are going to pass in task once again make sure in this Arrow function we are returning a task component we do not have created and in here we want to pass in task. ID and also the task object itself so we have access to that in our component so if we do save this we're going to error it out because the task component has not been created so let's actually do that uh like I told you this is the longest part but this is the most in-depth page of the entire application so to start off we're going to create a type for task props and we're going to have task to be task type that we created or passed in earlier from our API file below this I'm going to create a task component and this will be a task that we grab from our task props and we will once again use something from react DND so now in our task column we had this particular used drop function now we can use another function but it's going to be called used drag but it's going to be very similar to how this is set up so task column is where you are dropping the items task is where you're going to drag something so I'm going to copy this entire thing go down to our task and we're just going to paste it and this use drop should now become used drag from react DND and we're just going to call this use dragging instead and now the type should be task instead instead of accept now we can get rid of this guy and we can say item should be ID colon task. ID and then collect should be very similar except this is going to be is dragging now and we are going to forcibly change it to a Boolean using a double oh not operator I forgot the name of that whatever it's called and we're going to say is dragging and we're going to execute that and make sure we have comma over here and that should be good for our used drag hook and now be below this we want to split up the tasks tags because each tag has a list of tags and we're just going to do some operations just so we can clean it up we're going to have a function task. tags and we're going to do a tary operator say that tasks. tags dot actually hold on task singular tags dosit we're going to split them by a comma otherwise we're going to have an empty array so we do not error out so we have that list already and then we also want to format our due date and start date because it's in UTC time and it's also in a format that's not very useful so we're going to say this is going to be a start date instead we're going to give it a task. start date give it a question mark say format would be new date task. start date should be like so and then we should put a p in there and now this format is going to come from date functions it's kind of annoying that it's not coming from the intellisense but we can import format from date FNS like that so now we can go down we can see and we can use the format over here and make sure we close the start date and remove one of these prems and we have our format all working and then we just need to do finish up our turn operator with an empty string just in case we're going to do the same thing for due date I'm going to copy this I'm going to copy this guy over here paste it call this formatted end date and we're going to have this to be do due date uh end date not it should be due date instead and then task start start date should be and then also we need the number of comments so we're going to say number of comments is going to be task. comments and we're going to grab the task. comments. length and we're going to default it with zero so we don't error out and also we're going to create a priority tag for these and we're going to use a bunch of Turner operators to make it easy so inside here we're going to grab the priority colon like this and priority should have a type of task type of priority so that we don't get typescript errors and this is going to return a div and inside here is going to be the priority but we're going to have different colors for each priority so we're going to do a class name now I don't usually use nested tary operators but this is a good simple use case for something like this so I'm going to do rounded full padding of two in the X Direction padding of one in the y direction text of x say font semi bold and we're going to use a Turner operator I'm going to say priority is going to be urgent if so we are just going to set this to be background of red of 200 with text of red 700 and then over here I'm going to say priority is going to be high and inside this on the next line I'm going to say background of yellow 200 text of yellow 700 and then I'm going to say priority for medium we're going to have a background put on the next line background of green 200 text of green 700 100 and then finally I'm going to say priority is going to be low and in here I'm going to say background of blue 200 text of blue 700 not 7,000 700 and we are going to do colon background of gray 200 with text of gray 700 and I'm going to save it and it should be formatted like this so this is a different priority tag different colors for each column and different tags and now from here we're going to return and we're going to have a div and we have to do a similar thing that we did before with drag and drop we're going to have a reference and we are going to pass in instance or the argument and we're going to pass it into drag this time and we're going to pass in instance and this drag is not identified because I forgot to change the drop that we had before to drag so now that should be perfectly fine for our div and inside our div we're going to give it a class name of margin bottom of four with rounded medium background of white shadow dark and background dark secondary and we are going to pass in it tary we're going to say is dragging we're going to change the opacity to be 50 so it's going to look a little bit different when we are dragging we're going to say opacity is 100 when it's not I'm going to close this div out and I'm going to save it all right and below this we're going to go over here we're going to say task. attachments so if we do have an attachments we're going to also check if there is something in the attachments. length so these are just all checks that we don't get an error for when it doesn't exist and inside this we're going to bring in the image from next slash image and the source URL that we're going to put is going to be slash dollar sign curly braces task. attachments we're going to put zero for the first one because it's always going to be at the first element and we're going to pass in file URL so now we do not have this image but we will do it after I write this out so we're going to have task. attach attachments zero and we're going to say file name instead give it a width of 400 a height of 200 class name of H Auto with the full rounded top of medium and we're going to close this out so now if you do this the image does not exist actually do we place I guess we I don't recall but we did place the images yes we did place the images earlier and so we are able to access the image that we have okay from here we're going to add a div we're going to call this class name with padding of four and if it's larger than medium screen we're going to give it a padding of six we're going to say div class name with flex items start and we're going to do justify between for each one over here I'm going to say div would be class name of flex with flex of One Flex of wrap items Center gap of two and close this div out inside of here I'm going to do task. priority and if that exists we are going to pass in the priority tag that we created so priority should is equal to task. priority and then we can close this out like so and the curly braces so now we should be able to see that we have this task element for each tag or task basically inside here we're going to have a div we're going to call this class name we're going to do Flex with a gap of two and pass in task tags split and we're going to map this out and we are going to give it a tag for each one below this this is going to be a with key of tag within class name of rounded full background of blue 100 padding of two in the X Direction padding of one in the y direction text extra small and we are going to pass in tag in curly braces and make sure we close our div and that gives us our tags right after our status and priority below this after two closing div tags we're going to add a button and we're going to do class name of flex height of six width of four Flex of shrink zero items Center justify Center dark of text neutral 500 we're going to close this out pass in ellipses vertical and we're going to give it a size of 26 close this out like that and we're getting there so below this button and this closing div we're going to go to the next section and we're going to have a div and we're going to say class name of My3 Flex of justify between close this out and we're going to have an H4 tag with class name of text Medium font bold dark of text white close this out call this task. tile and close it as well so now we have the task name most of these are just numbered I should have probably input different task task title you can do that but the next thing we want is type of task. points and we're going to check if that's equal to number make sure we don't error out because it might do that we're going to have a div with class name and we're going to say text extra small with font semi bold dark of text white close this out I'm going to have a closing div tag over here with task. points this should be points like this so right now none of these actually have points but if you did add points um project manager's favorite you would be able to see the points as well below this we have a div and this is going to be the dates so text access text of gray 500 dark of text neutral 500 as you can see there's a lot of styling going on if you really want something to look nice you're going to have to add all of these little details there's a lot of details when it comes to very nice looking websites it's just takes a whole process and takes a lot of time to do that so here we're going to add a span and we're going to add a formatted start date and we're going to close that span and over here we're going to do formatted due dat and we're going to do the same thing with the span close that out formatted due date not sure what the config file is talking about going to save it then we should be able to see this and it seems like we also need a dash in between and so that is our start and due date and by the way right now we can move this back and forth already because we have the drag and drop as well over here we have the P tag we're going to say class name text extra small text of gray 600 with the dark of text neutral 500 close this out put a task. description save that below this we're going to have a div we're going to say class name margin top of four border of t a border on the top border of gray 200 dark border stroke dark so this is the bottom or top border for each and then finally we can add basically Al the users the assigned users and things like that so we're going to have div we're going to add a class name which margin top of three Flex items Center justify between we're going to close this out and inside this we're going to have a div we're going to give it a class name of flex negative space x 6 pixel and we're going to do overflow hidden close this this out and we're going to pass in task. assign and we are going to pass in another image and we're going to pass in the key this is going to be task. assign e. user ID this is going to be a source let's actually go up over here and we're just going to pass all of this in from Source right here because it's going to be very similar I'm just going to paste that in move that up and adjust this so task dot assign e with profile picture URL and we want to make sure it exist and that's the nod operator and then we're going to change this to task. assign e. username give it a width of 30 height of 30 and we're going to change some of these values so we're going to say h of 8 width of eight rounded full border of two border of white object Das cover and dark border dark Das secondary and we want to make make sure we close this image tag out and we can then save it and we should be able to see our first user which is the assign from here I'm going to copy this and paste it and we're going to do the same thing except change all the assignes to author so I'm going to hit command D four times change this to be author and we can leave everything basically the same so now we'll have the second user right on top of it and then finally below this we're going to have the number of comments on the right side over here so right below this closing div we're going to add another div call this class name would be Flex items Center text of gray 500 with the dark text neutral 500 close this out I'm going to call the message Square icon from blue side react actually message Square more that's the one we want we're going to give this to be size of 20 and we're going to close this out give it a span with class name of margin left of one make sure I have class name spelled correctly text of small dark of text neutral 400 close this out and have number of comments in here as well and as you can see we have the comments now there's no functionality open up the comments but if you would like you can add that and with that let's just demo what we have created so we have all of these columns we have tasks we have these tags the name the dates we have the users and then the comments and we can drag and drop these values into different locations and we will get a fully updated Jura board and it is also responsive so there was a lot going on so I just want to recap what we have in our code we have our entire board view page we also have the dragon drop provider that is what we are using and we are passing in the task columns that we create for our columns and inside our task column we have different elements of what this particular points are we styled everything over here we even have a button for creating a new task and then we have our list of tasks for each column and inside the task we also use the used drag functionality in the drag and drop provider with different priority tags and we are passing in different values all the values that we need for each particular task so there was a lot going on but this is how you basically create Trello or Jura if you depending on how you want to look at it all right so the next page we're going to create is going to be the list page so the list page exists over here and it's pretty simple it's just going to display everything in just like a card format so I'm going to go back to our Explorer go under projects create a new folder we're just going to call this list view now this will be a lot simpler compared to the board view because this is just a lot e easier so I'm going to call this index. TSX close this out close the board view close the API and I'm going to do TS RFC call this list view save it and we're going to go back to page. TSX and we're going to add another active Tab and we're going to call this list over here inside here I'm going to call this list like so we're not going to import anything but we are going to import list from do do SL list view like so so now if we go to our page we can hit list and we should be able to see list view over here so if I go back to our index now we can start filling this out and the first thing we're going to add is we're going to go back to board View and we're just going to cop copy this ID and set is modal new task open from our board View and we're going to paste it over here and one more time we're going to go back to board view we're just going to copy this part over here and we are going to replace our props so that we have the correct props for our component inside here I'm going to say const data callon tasks with error is loading and we are going to import use get tasks query like we did before and we are going to pass in Project ID with number ID in paren and go back to board view go over here copy this is loading and the error as well below this I'm just going to paste it in error curred while fetching task so we'll have an error as well inside here I'm going to say class name with PX4 pb8 XEL colon px6 so different padding for different screen sizes I'm going to get rid of the list view text I'm going to add a div call this class name padding top of five inside here we're going to import our header from our components folder we're going to add the header we're going to add name with the list and I'm going to just close this header out actually this should be a self-closing tag so we have a list tag so that will be our Heather and below this we're going to have a div we're going to call this class class name with grid grid with Columns of one gap of four and for medium and larger screens we're going to give it a grid of columns two large screens we're going to give it a grid of columns three and for large screen we're going to change the Gap to six close that and we're just going to map out our task lists and we're going to do map and we are going to set the task to be task type so we are just going to import task from at State API we don't need to call this task type because we do not have a component called task like we did before so inside here I'm going to create a component called task card because we're going to be using this task card in another location but for now we're just going to pass in a key with task d d because that is necessary for react and then task is going to be passed into this card so obviously our task card has not been created so what we're going to do is we're going to first import it task card even though we haven't created it we're going to do at slapp SL components actually sorry no slapp we just need SL components and we are going to pass in task card we're going to save that and go to our components folder create a new folder we're going to call this task card and inside here I'm going to create index. TSX I'm going to call this TS RFC so we initialize our component once again pass in task card save that and for props I'm going to pass in task and the type props is going to be task which would be task from our at/ state API typing I'm also going to import format for later because we're going to we're going to format our dates as we did before and inside here we're not going to do a lot of things we're just going to have a lot of a lot of jsx that will display our information let's actually close this div and then we're going to have a class name with margin bottom of three rounded Corners background of white padding of four Shadow with a dark background dark of secondary and a dark of text white inside here I'm going to give a task. attachments we're going to check if that exists and again we want to make sure it also has some value inside it otherwise we just keep it empty and we we can add some divs in here so inside this div we're going to make sure we have a closing tag we have a strong tag we're just going to make the Bold right here with attachments colon and then the div with class name of flex Flex wrap and we are going to close that as well inside this Flex rep we're going to have task. attachment and we're going to grab the task attachment link greater than zero just to make sure we're not erroring out like we did before and we are going to pass in image component from next image and similarly from the board view we're going to search up our image tag we're just going to copy this entire thing go over here and paste it exactly that way and the only only thing different is we're just going to keep the rounded MD but everything else should be the same and then from here we're going to set the ID so we're going to have a P tag and we're going to set the strong so we're just going to copy the attachments of the strong over here we're going to pass in ID inside here and I'm going to have task. ID like so I'm going to save it I'm going to copy this because we're going to be just using this multiple times to make it very simple let's paste it over here multiple times because the format is pretty much identical throughout this should be title task. tile as well this should be description this should be in empty string so we have space and in side here we're going to hit enter we're going to put task. description make sure it exists we're going to say no oops has a or operator no description provided like so this one is going to be status and task. Status will be the value priority this would be be task. priority tags we're going to say task. tags or no tags if it doesn't exist we're going to have start date and over here we're going to have a space as well and on the next line we're going to add task. start date do a tary operator we're going to pass in format with new date task. start date close the parentheses comma capital P colon not set going to save that we're going to copy this entire thing over here for the next line this one should be end due date this one should be due date for both of these and we're going to copy two two more times from the tags like this we're going to pass in author we're going to say task. author have a Turner operator say task. author. username and remove this we're going to do colon and unknown and the last one should be assign we're going to copy this entire thing once again paste it over here and I'm going to change the author to assign KN and this one should be unassigned and save it so now I'm going to go back to list View and we're going to make sure the task card gets imported correctly close that out task card should be there and save it and we should go to our list and as you can see we have our list of tasks pretty simple you can probably style this better than I did over here this is just a list to show all the information in a more list like fashion which might be a easier view to see sometimes for tasks so the next thing we're going to be building is going to be this timeline over here so this will be a Gant chart is what it's called and we have different days of where the task exists and that includes the start date end date and so on and so forth so we have week day month and these all exist and we have an add new task over here so I'm going to minimize it over here so you can see that we actually and this is the Gant task react library that we're going to be using to create this otherwise it would be kind of too much of a pain to create it from complete scratch so we're going to be using this Library as you can see in the demo you can take a look on what it provides but this provides more of a timeline view of all the task and you can check the link in the description for this all right so let's go over to our own application and inside page. TSX we're going to be copying this but we're going to create it for timeline this time this will be timeline like so and we are going to call this timeline which is a fun or a component we have not created so we're going to import timeline from do/ timeline view we're going to save that we're going to go we're going to get an error because we haven't created it but we're going to do timeline view and inside this folder we're going to create a new file called index. TSX inside here I'm going to do TS RFC and we're going to call this timeline save it and we're going to make sure it works over here so I'm going to repport that timeline view and we can see we still have an error because we haven't added the props so what I'm going to do I'm just going to open up the list view just so we can copy a few things so in our list view I want you to copy the ID string set is modal all of those good stuff over here we're going to paste that we're going to go down to in our list view once again copy this paste it over here so we have the same set and we're also going to create another type and we're going to call this task type items and I'm going to put task or Milestone or project so this will be different items for our different types that we'll be using a little later inside here we're also going to have a dark mode because we want to make some color adjustments for dark mode and this is the one time we're actually going to use it so it's nice that we are able to select from our Redux store and just pass it over here and we don't have to drill we don't have to do any kind of react prop Drilling and in here we're going to have state passin state. Global is dark mode like so and once again we're going to grab the tasks so over here in our list view we're going to grab everything that we had with the use get desk query paste it over here and make sure we import that as well and then inside here we're going to do display options and set display options we're going to have a state so we have different visual options for our timeline and that is part of the library and we also want to pass in display options as the type and that comes from Gant task react so we are going to import display option from Gant task react and and also we need to import use State and this actually should be singular over here so we have that aligned and then we can have View mode and we also have View mode that gets imported from Gant task react and then we're going to set that as month and we're going to set the local to be English us so that is exactly what this is doing so by default it's month but we're going to be able to change it to week and day with these values and then inside here we want to format our Gant tasks so that the library can read it because our format for the task is not exactly the way we need and we're going to use use memo just so it only updates as needed so we're going to return we're going to return the tasks and we're going to map it and we're going to pass in task as well over here and it should return an object so make careful note of the closing and opening paragraph or pars and curly braces over here we're also going to do start with the new date task. start date as string we're then going to pass end to be new date task. do date as string as well and then we're going to do name task. tile ID colon template string should be task to be task ID so we have a unique ID for each one we're also going to have a type and this one's going to be task but these are going to involve different task type for Gant task so this is necessary for how Gant is setting up our types and then progress is going to be task. points and we're going to do a tary operator say task. points divided by 10 multiplied by 100 or zero if it doesn't exist so it depends on how many points that we have is going to determine what the progress bar is and we're also going to set is the disabled to be false and we also forgot a print uh comma over there I'm going to make sure we initialize with an empty object over there we're going to do comma pass in tasks over here and we are going to save it and once again I'm going to go back to list view I'm going to copy this if is loading an error and pass it over here to make sure we have that error handling and then finally we're going to create a function that will handle the change for The View mode so basically something that will help change this we need to make some modifications to it so we're going to do handle View mode change and we're going to put a parns we're going to say event is going to be react. change event we're going to pass in HTML select element and with an arrow function like so we're going to set display options and inside here I'm going to set previous and return inside over here make sure we have the right amount of prints and we're going to copy the previous values but we're also going to add a View mode and we're going to set event. target. Val as View mode so this will allow us to have a event handler that will change based on the month day or week that we change it to so over here in our div we're going to do class name PX4 XL px6 so different padding for different screen sizes inside here we're going to have a div with class name of flex Flex wrap items Center justify between and a gap of two py of five again we're just doing a lot of flex items and setting up the layout we're going to set H1 to be class name with me2 text of large font of bold dark of text white and in here I'm going to pass in Project tasks timeline as well and we can see let's click on our timeline and we can see that header over here and then I'm going to say div is going to be class name with relative inline block with a width of 64 inside here I'm going to add a select dropdown and add a class name with Focus to be Shadow outline so this is going to be kind of long but we're going to have block with width full appearance actually yeah that's correct appearance of none with a rounded border border of gray 400 background of white padding four in the X Direction padding two in the y direction padding right of eight leading tight shadow a hover with border gray 500 focus of outline none a dark of Border dark secondary and a dark of background dark secondary and a dark of text white so a lot of just styling for light and dark mode I'm going to save it go over here we need to add a value to select so I'm going to set value to be display options to be View mode over here on change is going to be handle View mode change so that will be the event handler for the select that we created earlier inside his is going to be option with value view mode. day and the day will be the value and we're going to copy this two times over so paste it over here paste it over here this should be week and this should be month and that should be able to adjust when we select it and then two closing divs later I'm going to make a space I'm going to do div class name do overflow hidden with rounded medium orders background of white shadow dark with background dark secondary and we're going to do dark of text white inside here I'm going to have a div with class name of timeline now we're going to be styling it this in the global CS says file and that's because we cannot directly select it without it being kind of invasive so we'll take care of that shortly but let's create our Gant chart first so we're going to grab Gant from Gant task react and inside of here we're going to pass in tasks so I'm going to pass in Gant tasks that we had above here right here that's what we're passing in and we're also going to have to put in our display options as part of of this library and then from here we're going to set the column width and it's dependent on The View mode so column width is going to depend on whether the View mode is equal to the view mode. Monon so if it is we're going to set that to be 150 otherwise we're going to set that to be 100 then we're going to set the list cell width to be 100 pixel the bar background ground color is going to be is dark mode and if it's not we're going to do one Z 1 2 1 4 colon AE B8 C2 like this and this should be a string like that and below this we're going to do bar background selected color is equal to is dark mode question mark with 0000 0 colon number 9B A1 E6 and we want to close this up and as you can see it's a little jumbled up and messed up right now now and we're getting an underline issue over here that's because if you go over here this should be not in string I'm not sure why I put that in string and it should be test type items so we can save it we won't get that underlined error but we do obviously have this weird problem of styling which we'll but before that let's add a div below we're going to say class name is PX D4 padding the bottom of padding top of one we're going to close that we're going to give it a button like so and inside this button we're going to give it a class name with flex items Center rounded background blue of primary PX of 3 py of two text of white and hover background blue 600 below this I'm going to set on click would be an arrow function to be set is model new task open to be true and again we did not create the Modo just yet but this is for future so we're going to add a new task over here so we should be able to see that button now for this Gant task there's not much styling options you can change the background color the selected color as well but there's not much option to really customize it so what you have to do for a library like this is open up the inspector Tab and then you can go and select different options and we would want to select the classes that are provided by the library so if you take a look some of these classes are shown but you really need to be able to Target the correct ones but we're going to go through and we're going to write all the styling over here and in the link in the description you can go to the global. CSS file and you can basically just copy and paste all the styling over here and we can paste it down here and this is a lot of custom styling for our G chart and it should turn up light if you go back to timeline view there's a few things I wanted to change right here it says 9ba A1 E6 this should be A6 and as you can see we still have this weird issue of the alignment so we actually need to import something we actually need to import Gant task D react slist index.css and this is part of the Gant task chart and as you can see we have a lot of our styling go to dark mode we can see that we have styling for that so it's a bit of a hassle to style this particular library because you have to use Global do global. CSS to do so but once you do you'll able to be used this timeline in in a nice and easy manner also I refreshed the page to fix the scroll bar cuz if you just change the CSS it's not going to automatically fix so there is our gance timeline chart for this particular board and last but not least we're going to do the table page if you go over here this is a pretty straightforward table we have all of these values we can add this table with the same list of tasks that we have before so let's get started so we're going to go and do our usual I'm going to keep the timeline view open so we can copy this later but we can go to page and we can just copy this over for the timeline but this is for table change this to table and this will be table as well and we are going to import table from Dot View save that we're going to get an error because we need to create the folder we're going to call this table View and inside here create a new file called index. TSX and inside here I'm going to do TS rce change this to table view save it and then go back to page make sure we repport it again save it and we can start working on our table View and just like before we're going to go back to timeline view copy this over with the ID and set is modal task open paste it over here go back to timeline view go into these curly Braes copy that paste it on top of props as well and we can also once again go back to timeline view copy this entire thing from is dark mode and use get Das query we're going to be using that same some values for these task and we're going to make sure we import everything use app selector as well going to retype the query for use get task query grab the list of task and go down to timeline view once more go down over here we're going to copy this is loading and we're going to paste that over here so we'll have loading and error as well below this we are going to add we're going to do class name of height and it's going to be precise we're going to do height of 540 pixel and a width of full with padding of four padding bottom of eight and for extra large screen padding of six like so very similar to what we did before inside here I'm going to do a div with class name of padding top of five close that out bring in our header component from at component slhe header with name being table and this should be a self closing tag and we also want to set this to be is small text version so it's a smaller version of our normal text so if I go over here we should be able to see table and it should be aligned perfect and below this this is where we can add our data grid component and this should be imported from mui data grid so I'm going to import data grid from at mu at muy SLX data grid so it's not going to work just yet because we need some props for data grid as well so we're going to add rows this should have tasks but we should also account for the possibility of not having any values and then we're going to have columns as well and it's going to come from a columns object that we have not created so again this is material UI data grid which is a nice library for basically the table and this is one of the best table components that I know because it has extensive functionality they have a Pro Plan which is paid but you don't you generally do not need that option you can do the free one and it should cover majority of your use cases so you can install those and you can create your table with very much ease I can tell you if you ever create your table from scratch it is it is not easy it is a pain there's a lot of work involved so using a table component is very nice over here I'm going to create columns and I'm going to pass in Grid column def from mui dat the grid and it's going to be an array so this is just the way you type the grid columns and in here we're going to set the columns for each value so this is mapping out the task object that we get from the back end and we're mapping it into separate columns so the field and the value that we're going to map from is going to be title and this one's going to have a header name of title and we going to have a width of 100 so this is how you specifically set each column for each row and then field is going to be description lowercase the header name is going to be capitalize description but this time we're going to have a width of 200 because it's longer and for now let's save it and let's take a look so right now we have title and we have description so we're basically mapping out our values and we're going to continue doing that for now we're going to skip the status because that one will be the most complicated but we're going to say priority like so and also add a capitalized priority over here this one is going to have a width of 75 and I'm going to pass or copy and paste this couple more times we're going to have tags and this is going to be capitalized tags with width of 130 we're going to have a start date and then this should be start date as well width should be 130 due date over here due date should be capitalized and width of 130 copy this paste it over here for author lowercase we're going to have a capitalized author over here and this is going to be 150 and we're going to modify the cell for this one we're going to have render cell we're going to pass in prams and this is going to be ps. value. username and we want to make sure that if it doesn't exist we're going to have an unknown so this is if we want to customize our cell we use render cell for those we're going to do the same thing for assign change this to assign capitalize the header name keep the width to be 150 keep everything the same except this is going to be unassigned and finally we can save it we can see all of this and then we can also do status so we're going to go up and that should be after description I'm going to put field colon status header name should be status capitalized width of 130 render cell is going to be params and we are going to modify this to include a span with class name inline Flex rounded f background green of 100 pixel of two or padding of two text of extra small font semi bold leading of five text of green 800 and we are going to wrap that around pam. value so basically we're customizing it so it can look like this so basically we have a rounded circle around our text and that's how we can use render cell to do such a thing so now if you take a look it looks pretty good but there's a few things that are different from our final version so if you take a look a lot of this is all white which looks a little better than this grayish color that we have for the background if you take a look over here and we also have dark mode we can switch this to dark mode and it looks really good but if you go over here the color is kind of messed up so we're going to do a few things to modify the classes over here so typically we can just write class name over here and class name like this and we're just going to keep it empty and then we're also going to have SX is going to be data grid something like that we're going to have some values but we're going to be reusing this multiple times so instead what we're going to do is I'm going to go outside of our folder because we're going to be reusing it and I'm going to create a new folder called lib and inside this lib I'm going to create a file called utils TTS this is so we can reuse this particular function that we're going to be using through multiple tables because we're going to be using this table component multiple times and this is to make it a lot easier to use so in here I'm going to do export const data grid class names and this is going to involve border border gray of 200 background of white shadow with dark border stroke dark and a dark color for background dark secondary and dark of text Gray 200 we're going to save that and we're going to import data grid class class names from at lib utils so if we save that we can see we have the white background but we still have not finished everything yet so that's where we're going to use SX because some of the class names you can't really access just by using the class name so we're going to use SX to do the rest so I'm going to go back to utils I'm going to use export const data grid SX Styles and inside this I need a is dark mode because I need to pass the Boolean in from the parent component because we need to have different colors depending on the dark mode or light mode so I'm going to return and over here I'm going to do a and mui data grid column headers so this changes the background color and if it's a color we are going to set is dark mode with a Turner operator we're going to set E5 E7 EB inside here I'm going to do colon empty string and I realized this needs to actually be surrounding that like that and over here I'm going to set and roll is equal to row like this and this we're selecting the rows over here we're going to do colon put an empty bracket and we're going to say background color should be we're just going to copy this over here cuz we're going to use this multiple times but we're going to be setting different colors these are all manual colors and I know we could probably do a better setup but sometimes we're just going to make it easy and have it all set up manually over here I'm going to do border color border color paste it over here and we're going to do 2d3 1 35 like this and go on to the next line and over here I'm going to do and. mui icon button root call in and I'm going to set the color copy this over paste it over here change this to A3 A3 A3 I'm going to copy this entire guy and we're going to copy this multiple times because it's going to be very similar and make sure we have comma and mui button rout this should be mui table pagination we're going to keep that the same we're going to hit a comma over here this one's going to be pagination table pagination Das select icon keep everything the same mui dat grid for this particular one D cell and we are just going to set this one to be border to Be nonin Strings put a comma over here mui data grid row and this one's going to have border bottom and inside this template string I'm going to do one pixel solid change this to 2D 3135 and in this string E5 E7 EB and then the last one mui data grid with border color we're going to change the Border color over here and we're going to copy this guy paste it over here and I'm going to remove this last one there should be a comma over here and we should be pretty much good to go and again in the link in the description you can go to the repo and copy this if you're having any issues not aligning it to what you see on my screen so if you go back to table we're now going to import that guy data grid SX styles from at lib utils and we're also going to pass in is dark mode because we need to pass in the dark mode that we had originally and we are going to save it so now this will allow us to see that our dark mode is aligned just as we have it over here and it seems like it's almost identical I think there is some issues with the border and if you take a look one thing that's different is this mui data grid I forgot that a and you can see that our  border only comes at the bottom of this particular one and there you go that's pretty much our table that we have and we can see everything going like this perfect all right with those four tabs out of the way now we can look at our new board section so this is our new project and we can do project name description and we can add team ID as well so over here we're going to create this button we're going to go back let's close all of this we're going to go to page. TSX and we are going to go to Project header go in here and we're going to create a new model over here so we're going to do model new project and we are going to say is open and we're just going to pass in is model new project open and on close we are just going to set the Arrow function set is modal new project open and that's going to be set to false and we are going to close that and then from here we're going to go to header and we're going to add button component so we can see how we can click on this model so we can have it pop up so in here I'm going to put button like this close it and inside here I'm going to do class name with flex items Center rounded medium Corners background blue primary padding in the X direction of three padding of two in the y direction text of white hover with background blue of 600 and on the next line I'm going to say on click we are going to put the arrow function and do set is modal new project open to be true inside of this we're going to put plus square and we're going to import that from loose side react to class name with margin right of two height of five withth of five we're going to close this and I'm going to put new boards like this and if you look at our current project we're going to get model new project is not defined but I'm just going to comment this out so we can see that we have a button now now this button doesn't really do anything so what we want to do is we're going to create this modal new project but we also want to create the modal component and we're going to have that separate because we're going to use this for both new project model as well as new task model so we're going to go to over here in our components directory create a new folder we're going to call this model and inside here here I'm going to have a index. TSX I'm going to close that out write the TS R afce initialize that and say modal and save it all right so this is going to have some props we're going to say children is going to be react. react node so we can pass in a children for this particular one we're going to have is open we're going to pass in a Boolean and we're going to pass in on close this will be an empty function with void the name is going to be string and inside here we're going to have the same exact props so we're going to have children with is open on close and name as well and we're just going to say if is open is not true we're going to return null meaning the modal is closed in that scenario and for a modal component we actually can use react. D.C create portal actually react dom. create portal like this so this is when you want to essentially create a portal within and make a model on top of everything else and in here we're going to do a number of styling so we're going to do div class name is equal to fixed with an inset of zero Flex with the height of full withth of full items Center justify Center overflow of Y Auto background of gray 600 background opacity of 50 padding of four so essentially what this part is exactly doing is it's going to give us the background mask when you see it take a look over here we have a new board everything else is mask behind it we also need to import over here react Dom from react Dom like this so in our div we're going to have another div as well so this is just a container of the model so we have the background mask and this is the inside part so we're going to set this to be width of full a Max width of 2 XL rounded large background of white padding of four Shadow being large and a dark background of dark secondary I'm going to close this and inside here we're going to have header from our header component and I'm going to say name is going to be passed in the name that we have with button component is is going to pass in our button which we can do with class name with flex height of seven width of seven items of Center justify Center rounded full background of blue primary text of white and hover of background blue 600 so this is the close button for our modal and we want to set on click to be on close I'm going to close this button and over here we're going to have an X from loose side react and we're going to set that to be size of 18 and we are going to close that and over here we're going to make sure we have a self- closing header we can save it and also we want to make this to be is small text Cu that's a variation and inside here I'm going to set the children inside our jsx and the last thing we need to do is add document.body because that is exactly what the react Dom create portal is going to need so that is our modal component and now we can use this modal component inside the modal new project and modal new task so we're going to go back to project header close this index that we just created we're going to grab this model new new project we're going to import model new project from do do slm modal new project and we are going to create this component now so over here under projects create a new folder called modal new project and inside here I'm going to do index. TSX and we're going to do TS RFC to create our component so I'm going to do modal new project over here and now inside our props I'm going to give it an O open Boolean so we can check or we can pass in the props and determine if it's open or not and then on close is going to be an empty Arrow function so we can close it as well if we need to so in here in our props we're going to have is open and on close and within here we're going to have create project and we're going to set this to be is loading so this is going to be an API call and we created this a long time ago use create project mutation so now we can call this and we can use this for creating our project once we create our board so when we hit this create project that will create the project on the back end so let's go back currently everything is messed up because we do not have this to be existing so let's actually fix this and it should be do/ model new project not to dots so we can save it and we have our model new project over here and what we want to do is if you take a look at the final product we have all these inputs and we're going to be saving each of these inputs into a different state now we can use a form library but for a small form like this we're not going to have that much validation so we're just going to keep it simple and just manually do it and keep the validation to a very minimum we're going to say use State pass an empty string over here and we're going to copy this five times this one should be description like this make this capitalized this should be start date like so capitalize this s the end date like this capitalize the E and then the team ID team ID and we're going to set the T keep it empty like that and what we're going to do and you know what I don't think we actually need the team ID if I recall before it seems like we actually didn't really use the team ID so if you take a look create project yeah there is no team ID so we actually don't need to add that so we're just going to keep it like this and have no team ID over here and the first thing we want to handle is a handle submit function so this is going to be an async function with an arrow function like this and we're going to say if project name does not exist and we're going to check if start date does not exist or end date does not exist we're just going to hit return cuz those are values we need otherwise we're going to to say await create project and we're going to say name is going to be project name from the state that we have description start date start date like so actually this could be just a comma like this and end date as well so this is the API call and again we're passing in Project name description start date and end date so if if I go to use create project mutation I can go back up create project we're passing in the project list that gets sent to the back end and our back end is going to utilize those values once we hit submit and we're also going to check if is form valid we're going to need this function we're going to say return project name check check if it exists as well as a description and then we are going to do start date end date like so and we're going to set the input styles so this will be the styles for every input that we have and we're just going to set this because we can repeat this for every input so the width is going to be full it's going to be rounded border border of gray 300 padding of two shadow of small with the dark border dark tertiary like so and a dark background of dark tertiary that should be a dash dark tertiary like this with the dark of text white a dark a focus outline and none so that is our styles for input so now we can actually go to our jsx and we can start inputting the things we need so we want to import the modal component cuz this is a easy way for us to surround our component without having to write all the styling and the button all of that stuff we don't have to rewrite or anything like that so we're first going to pass in is open and we're going to pass the is open that we have from the parent component same thing with on close and the name of this component will be create new project we're going to save that and voila we have this create new project we can turn it off go back and create it again but we want stuff in there so we're going to create a form and inside here I'm going to do class name of margin top of four with space of Y6 to give it our spacing and onsubmit we want to set e to be like this and make sure that when we hit submit we don't refresh the page and we do that using e. prevent default and we also want to obviously invoke our handles Smit function when we hit submit so all our inputs is going to exist over here so we're going to set this to be input with type is equal to text like this and then class name is going to include the input styles that we created so input styles like this the placeholder is going to be project name the value is going to be project name and then on change is going to be the event handler like this with set project project name with e. Target do value I'm going to close this out and we're going to have our first input this could be a closing input like this so it's more cleaner all right so we're going to copy this multiple times but we're going to modify a few of these so the first one is going to be a description but description is going to be a text area instead and the text area does not have a type we can use the same class name we can have a description as the placeholder but the value is going to be description and this is going to be set description so we have description over here with project name and the next one is going to be the dates the dates has to include like a little grid we're going to do grid with grid Columns of one Gap and SM for larger screens we're going to do grid columns two so that they're on the same line with gap of two as well so this is just a small modifications so that we get some variance on bigger screens this is going to be type of date instead and the value is going to be start date we're going to get rid of the placeholder and we are just going to set this to be set start date and we can actually just copy this one and replace this input over here and we are going to change this one to be start date this should be end date and I'm going to capitalize this one right here and as you can see we have some values and we can change the values as we need and lastly we can get rid of these inputs we don't need team ID like I mentioned so we're just just going to create a button and this is going to be a type of submit and we're going to have a number of class names over here we're going to do a template string with margin top of four Flex with the full justify Center rounded Corners medium border border transparent background blue primary padding in the X direction of four padding of two in the y direction text of Base font medium text of white shadow being small hover of background blue 600 with a focus of an outline of none Focus being ring-2 and focus of ring-b a ring blue 600 and then Focus offset D2 this are a lot of yeah there's a lot going on over here and we if is form valid is not true we are going to set is loading and we're going to set cursor not allowed and opacity is going to be 50 and we're going to have an empty string like this and I'm going to close this and the button should be is disabled and it is actually disabled should be singular like this for lowercase I mean and we're going to check if his form valid or not and if it is we're going to do is loading there is is no not operator so we're just going to keep it like that so it's disabled when it's loading and when it's not valid form and inside here we're going to say is loading and we're going to set creating otherwise we just want to write create project and now we should have our create project now you cannot click it over here but you can do it when you have all of these values test project and test description and let's actually check if this is going to work so before I hit create project I'm going to open up the inspector alt command or alt control I and we're going to go to network and we want to see when we hit create project we are getting a fetch error and the error we get is expected ISO 8601 date time so that means our date time is not exactly what we want so now I consol log this start date so you can see that we have 2024 815 this is not the right format what we want is a format that looks like this if you remember this is the type of format that we want and we can do that with the date functions Library so over here I'm going to import format ISO from date date FN so we're going to import that and what we want to do is go over here I'm going to say const formatted start date and we are going to write format ISO plural or actually capitalize I mean and it's going to be a new date with start date comma an object with representation colon and complete like so I'm going to copy this line go to our next line and I'm going to change this to formatted end date and this should be end date as well and over here where we have our start date we're going to say formatted start date same thing with our end date we're going to say formatted end date and we are just going to check this see if it has the right actually we don't need the console log we can just test if it's going to go and create the right value in the network tab so if you take a look we hit create projects and as you can see our end date startdate is now correct we go to preview and we can see the response we get the project back basically saying that it worked we now have that project in our database so there we go we have our create new project model all working perfectly fine all right with that we can now go focus on the modal new task so I'm going to open this up close that over here minimize this and what we want I'm going to close all of these except for page. TSX and we are going to create our modal new task over here so right here I'm going to say modal new task which we have not created and we're going to say is open is equal to is modal new task open and then from here I'm going to use on close have an arrow function we're going to set is modal new task open and we are going to set this to be false and we are going to close that like this right now it's going to error out because it does not exist and a couple other things that I want to do before we start creating this model is we want to go to list View and we did not actually add a button component over here so we want to actually do that so we're going to do button component and we are going to pass in our button so we're going to do button like this with class name Flex items Center let me close this background blue of primary adding of three in the X two in the Y text of white hover of background blue 600 and on the next line I'm going to select on click we're going to have an arrow function we're going to set is modal new task open to be true close this button and we're going to write add task and below this this is going to be is small text which is something I didn't do last time so we're going to have a Heather component right here that is going to do that and similarly we're going to go to we're going to copy this the button component and I'm going to go to the table view cuz we did not have a component over there I'm going to paste this replace it with our button component like this and it should be exactly the same and now if we go back to our actual view we can see that table task we have an add task button over there and then if you go to the list we now have a list over here and add task button over here and I think it actually I think it looks better with a rounded Corner radius so we're going to add this to table View and list View and we should have round corners so that should be good okay so now modal new task so now the modal new task is actually going to be let me close these pages is actually going to be in the components directory because we're going to use this model in another page so this is not the only area like the projects area is not the only place we're going to use this so we're going to create a new folder we're going to call this modal new task in our components directory and I'm going to create a new file in there with index. TSX and in here I'm going to do that WR TS RFC in our new file call this model new task and in here I'm going to make sure we import it from act components model new task like that and I'm going to save it and to make our lives easy cuz most of the styling and things like that is going to be similar to the m new project we're going to have to modify a number of things for sure but we can just use this as a template so we're going to cop command a or control a to select everything command C copy it and we're just going to paste it over here and we will be modifying quite a bit but let's grab modal new project to command D so we can grab both of them and we're going to hit modal new task like this so over here instead of this create project we're going to use create task like this we don't need the is loading for this particular one and we are just going to use use create task mutation so it's similar but this is for task so instead of creating a project we're going to create a task for our project and over here I'm going to do title and I'm going to set the title as well I'm going to just copy this multiple times because we're going to have a lot of properties for this one because it's the task and we are going to set this one as status and make sure we capitalize the status over here the end date should be priority like this the next one is going to be tags so I'm going to select that should be tags like so make sure we capitalize that the next one is going to be start date like so make sure the S is capitalized the end date is actually going to be due date instead make sure we capitalize that we're going to have we're going to copy this and this is going to be off author user ID this should be capitalized for the author I'm going to copy and paste this one more time like this and this author user ID should be instead assigned user ID and this should be capitalized for assigned and over here for the handle submit we can do title description actually description is optional so we're going to do status and actually if we take a look over here we go to our API file with the types so we can go over here we can see the task a lot of this is optional so we can just keep this as as title otherwise we can just return that's the only thing we really want to add instead of this end date this should be a due date and this create project should instead be crate task and we can just start filling this out like we normally do with title description status priority tags start date but this one should be formatted start date this one should be due date and that should be formatted due date formatted end date sorry actually this should yeah just to be clear we need to make this a due date instead because we had a different value for those and then author user ID we're going to say it's parse int to make sure it's a number so we're going to say author user ID like this be a comma and assigned user ID colon parse int should be assigned user ID now we have these two screaming at us so instead if we go to our status it's because we are not typing in accounting for the fact that these are status values and it's a enum so we need to bring in status from State API and that's why enums are pretty useful for scenarios like this and we want to set the status to be Todo as the basic default so you can actually use the enum at runtime for typescript so just remember that you can do something like this for enum only and then we're also going to import priority as well so we're doing the same thing and I'm going to pass in priority dob backlog as well for our priority and our linter is no longer screaming at us for create task now for is form valid we're just going to have return title so it's pretty much the same thing title is the only one that is basically mandatory and we have our input styles or we can just use that and instead we're also going to have select Styles as well and we're going to be using that multiple times because we have two selects I believe and then from here we're going to do margin bottom of four with block with the full rounded with the border and the border is going to be gray 300 color padding in the X direction of three padding in the y direction of two we're going to have dark in dark mode border dark tertiary colors that we set a long time ago in Tailwind same thing background of dark tertiary and dark of text of white and for dark we're going to set the focus outline to be none like this now we're getting there we still have some errors because a lot of this is not defined and we need to fix this but for now we're just going to start with create new task instead of new project and inside of here we're going to have an input type of text placeholder is going to be title oh my mistake class name should be input styles placeholder should be title value should be title as well and set project name should be set title I'm sorry uh this is not set title this should be title as a value and for a text area we can leave the input styles description is fine description is all of this is pretty much fine we can keep that as is and for this part we're going to change these dates actually we're going to keep this we're going to copy it and we're going to paste it over here now we're going to do the same thing except for select dropdowns so we're just going to remove the inputs over here and we're going to have a select drop down like this and inside our select we're going to have a class name of Select styles with value of status on change with an event handler being passed into a function and we are going to do set status like so we're going to pass in status and what we are going to pass in is the e. target. value and we're going to set as key of type of status and this is the wonderful typescript that we have to deal with and this closing bracket is key of type of status space so basically on change we're passing in a status of the value that we selected so it's a little confusing but we're basically passing in the option and we're just using the enum to select them so the value is going to be an empty string and we are going to set select status as our first option and below this we're going to set another option we're going to say value is going to be status. too and we are going to use to-do as the first option I'm going to copy this paste it three times this one's going to be work in progress this one's going to be under review this one's going to be completed we're going to change this one to be work in progress as well this one's going to be under review and this one's going to be completed so we have our first select dropdown and I'm going to copy this and we're going to paste this and we're going to do the same exact thing for priorities so I'm going to set this to be priority set status should be priority I'm going to select both of these status and that one and all of these right here with command D and I'm going to set all of these to be priority capitalized so this is going to be urgent below this is going to be high this is going to be medium this one's going to be low and we're going to have to copy one more for backlog this is completed should be backlog at the bottom completed over here should be low this one should be medium this one should be high and this one should be urgent I'm going to save that and we're going to go back up grab this first input that we have and we are going to paste it below or select dropdowns and this one's going to be type of text input styles the placeholder should be tags with comma separated like so this title should be tags and we are going to do set tags didn't mean to do that so set tags like this now for the dates we just have a small little modification we can keep all of this set State start date is fine but the due date should instead or the end date should be due date like so and since we already had it pasted we want to add two more inputs we're going to input text to be author user ID for the placeholder like this input styles the value should be author user ID and same with set title set author user ID and the last one is going to be assigned user ID capitalized title should be assigned user ID and set assigned user ID as well and we did miss the is loading so if I go back up here I'm going to grab the is loading from our create task mutation and we can save it and this should be creating create task instead and if you take a look we can hit this button and we can see that we have a create new task item for each of these and if we try and fill this out let's say test task description test description say this to-do and backlog um we don't need any tags we're just going to put this put some random dates um no author user ID so we're just going hit create task let's try it one more time cuz I and it seems like we are getting an error once again and this error project is missing is basically for the project ID so if I go back we actually need to pass in the project ID from the parent component so I'm going to add an ID pass that into modal new task add the ID over here which is going to be a number and the number is going to be ID that as well and we are going to have to create or actually we don't need to create another input we can just go over here pass in Project ID and that's going to pass in the ID we just had this is actually should be a string and we need to convert this project ID to a number via the number in JavaScript save it save it over here oh and one thing I did notice it seems like author user ID is required so we actually want to add that make sure we have author user ID that needs to exist so if for example we have two we're going to make sure that particularly works and over here I'm going to say author user user ID I'm going to save it and let's say we create task and we should have our task over here and we will have a new response saying that it basically worked so we have ID 43 test task and we have a new one that popped up and there we go we have let's  actually get rid of this we have our modal new task and modal new board all creating a new project and new task as needed so we have new project model and a new task model as well and there you go that was probably the hardest part of our entire application we have a board we have list timeline and table we have all of these Pages all set up using from one list of tasks so we're going to take a break and we're going to take a break by going through some of the easier pages so we're going to do timeline search settings users and teams first because these are a lot simpler these are basically onepage things so we're just going to do this pretty quickly so I'm going to open this up make sure we close this in Spector Tab and we can open this space up and we are going to start with the timeline and this timeline is very similar to the timeline we just created over here except this will be for projects timeline as opposed to task timeline so it's a slightly different with different data but it should be relatively straightforward so I'm going to go into our app directory I'm going to create a new folder and we're going to call this timeline and inside our timeline I'm going to add page. TSX and from here instead of using TS R fce we are going to go back to our timeline view and we are just going to copy everything in this file and we can just modify a lot of the things that we are going to see on that particular page so let's close everything up because we don't need it and we're going to P paste in our timeline so this time we are actually going to have to add a use client because it is not a child of a client component this is its own separate page page that is exactly why we need to add use client specifically for this page now for this we don't need any props for our timeline because this is a separate page so we can just remove all of this and instead of using use get task query we're going to instead use get projects so we're going to do const and curly braces data Colin projects we're going to set is loading to be is error like so and we are just going to grab use get projects gry from our API endpoint we're going to save that over here use State all of this can remain the same as well as the dark mode that we added earlier now for a Gant task this should be instead projects over here and this one should be singular project and I'm going to select all of these task over here so that we can change the values to be project now it's not going to align perfectly so we're just going to keep it like that for now but this should be end date over here project title should instead be name this should be capitalized for project and this should be task type items and in this case we're just going to set the progress to be 50 to make our lives easier in this case and we're going to instead of having task we're going to put projects over and over here instead of error we can do is error and make sure if project does not exist we won't have anything and also I want to just make sure actually it doesn't matter over here we're just going to say an error occurred while fetching projects like this and over here we're going to do a few things different because the styling needs to be different because it's an entire page this time so max with a full with padding of eight we're going to change this section over here to be header and make sure we close it over here as header and this is going to be margin bottom of four Flex items Center justify between and instead of an H1 we're going to use our header from our components and we're going to do name is equal to projects timeline like such close that we're going to have div class name we're going to keep all of that the same same with the select all of this can remain the same to make our lives a lot easier and over here we can have all of this and we don't need an add new task instead but this time we're not going to use bar background color cuz we're using the Project's part of the Gant task so in the documentation we instead set the project background color and we are going to change this to be is dark mode Let's actually bring our own version and we can see our own timeline right now let me close this up we can see all our projects at the current moment but we are just going to modify a few things so we're going to say one1 214 like so and then colon number 1 f29 actually this should be in the string number 1 F 29317 then we're going to do project progress color and this should be is dark mode with question mark copy this value over here I think there is a extra number yeah should get rid of that one in there paste it over here and we're going to do colon a e b 8 C2 and then we're going to do project progress selected color and we are going to pass in is dark mode colon 0000 0 colon number 9 a b A1 a six and this should be a question mark over here and we are going to save it and let's actually open this up and see what we have so we have a nice little color over here and we can change it from day to week to month change it from dark mode to light mode and everything is pretty much set because we've already created the groundwork for our previous gance chart so this is pretty simple and we can get rid of use get task query up here so the next page we're going to handle is going to be the search bar which is right under the timeline and now we should be able to search something let's say description and it should search across task and we can SE cross projects so it's going to search not only just task projects but also users as well so we want to create a backend for this particular page so I'm  going to go back close all of these and we are going to go back to our server and this should be pretty straightforward we're going to create a new file we're going to call this search controller. TSX or. TS and like I did before we're just going to go to task controller I'm just going to copy this first one and all of the above over here to make our lives easier when we write the first set of lines so instead of get task we're going to write search inside here this should be a query instead of a project ID and we're going to do rec. query like so and we're just going to remove all of this and I'm going to say const task is equal to await Prisma task. find many but we're going to have conditions and we're only going to search the task so it really depends on what you want to search for or what the users what you want the users to search for and we we want a or condition over here and we only want condition where the title colon contains query as string like so and we're going to do a comma and we're going to pass in description as well and we're going to do contains query as string so we're searching both title and description for tasks and we're going to do the same thing for projects so I'm going to put projects right here and projects over here singular this time but instead of title for project this is going to be name like that and we're going to copy this one more time and paste it and this is going to be users like so Prisma do user find many and for this one we're just going to check the username so I'm going to remove this we're just going to have username like so and what we are going to pass to the front end is going to be tasks projects and users and this should be plural over projects as well and this error message Mage is going to be error performing search and we'll just keep the error message as is pretty straightforward we're searching multiple different ones and you can always tweak your search query as you want and over here in our routes I'm going to create a new file and I'm going to call this search routes. TS inside here I'm just going to go over to the project routes copy all of this once again so we don't have to do all the writing and I'm going to erase this this should be get or actually search instead and that should be coming from the search controller that we just imported and we're going to be saving it and then finally we're going to go to our index. TSS we're going to do app.use SL search and we're going to do search routes like this and we are obviously going to import search routes from routes do/ search routes like that now this time we're not going to test it we can probably we can just test it from the front end so let's just do that so we're going to close all of these guys and we are going to go to our state API and we are going to write our API request for our search and before we do that we actually want to create the type for our return turn so we're going to do export interface search results which is what is going to what the type of schema of the response is going to look like and we are going to set tasks to be optional with task array and then projects question mark project so it's all optional because it might not exist and then we're going to do users with user like that and then down below we are going to create an API request endpoint so we're going to do search with build. query we're going to pass in search results comma string and then we are going to pass in an object we're going to say query with query as a function and it's going to be a template string with search question mark query is equal to query like so and just as a reminder what we did when we created our backend over here we can look at our search query this is the query we are grabbing from that list in our search routes so that is how this is getting passed when we make the API call and it's get getting fed into search controller like this so we're going to close that and we got to make sure we don't forget we're going to pass in use search query like this and then now we can create the front end for our search page so let's go to app directory create a new file or folder we're going to call this search and inside our search directory I'm going to do page. TSX and I'm going to write TS RFC and we are going to create our search page this is also going to be a used client directory CU we need to be able to use an input so use client is going to be required we do not need any props because this is a brand new page for nextjs and under here we're going to say we need the search term for our state so we need to make sure we keep track of that state and we are going to use use State as well from react with an empty string within and then from here we are going to make our API call and we are just going to grab search results as the data is loading and is error like so and we are going to grab use search query from our API endpoint we're going to pass in search term so we are using this value and we're going to be using that to perform our request but we are going to make sure we skip performing that request when the search term. length is less than three so we never make an API request until the search term is at least three letters and on top of that for our search request we want to use something called The Bouncing so we are going to have a function but we are going to pass in debounce and it's going to come from low Dash and we don't have low Dash installed so I'm going to remove this I'm going to do ENT PMI low Dash because we want the debounce function from low low Dash so I'm going to import debounce from low Dash like so and we need to save the types for low Dash I believe yeah so we need to save the types for low Das so once again close this I'm going to do npmi DD at types SL L Dash and that should resolve our issue of not being able to find it so over here in our debounce we're going to pass in event yeah event like so with react. change event this is just the type that we need and HTML input element is the type that we want and in here we have an arrow function and let's actually fix this there's another pen like that and we are going to do set search term and that's going to be event. target. Val and this should be set to 500 milliseconds so this will prevent us from always searching as basically over searching our and inundating our backend you don't want to make a search on every type you want to do it every 500 milliseconds just in case people type really fast you're just going to bog down with really fast typing and then you have a use effect as well and in here this is how we handle the return of handle search. cancel so this is particularly for low Dash and in here we're going to put in Brackets handle search. cancel make sure it is inside the square bracket and let's just check that we have our search page make sure your server is running and right now with the search text this is what we expect for now and inside our div we're going to say class name and we are going to say padding of eight inside of here I'm going to give it a header from our components with the name of search and we're going to close that we're going to give it a div around an input type of text with a placeholder of search dot dot dot class name of width of 1/2 rounded border padding of three with a shadow so this is just the input for our handle search and the on change is going to be of course the handle search we spent some time to create and we have our input so right now it's not going to display anything but below this we're going to add another div and in here we're going to give it a class name of padding of five and below this we need a loading indicator just in case so is loading when we are making the API request so we're going to do a P tag keep it simple with loading dot dot dot and over here I'm going to give it it is error if there is an error we are going to make an error message so we're going to say error occurred while fetching search results Dot and the reason why we're putting this not over here like we did before because we want the loading indicators to be below this which is where our search results is going to be and then finally if is loading if it's not loading and if it's not in error and search results exist to make sure we handle all the null situations we're going to have a div and this is where we are going to add all our search results so we're going to have to add multiple ones so over here I'm going to say search results. task plural make sure that exists search results. task question mark. length make sure that exist oops greater than if that's greater than zero we are going to then display H2 of tasks like that I'm going to copy this section right here for the search results task and then we are going to Now map it so if I have task like this we are going to pass in our task card let's close this right here task card and that's going to come from the components task card that we created earlier so we can reuse that make our lives easy so this is going to be task ID and we're going to pass in the task Val value so we can display that we're going to save that and now we're going to do the same thing except for projects so I'm going to save it grab all the task like this change this to be change this to be projects and this should be project capitalized and this is actually going to be project so this is going to be a card that we haven't created so let's actually just finish this up because these cards are pretty quite simple so I will create this very shortly but let's get the user and the user card as well which we have not created either so over here we have projects change these to be users capitalize this one change the project over here to user and also change the task above here should be project same with over here this should be user and this should be a user card over here and instead of ID I believe this one is user ID capitalized like that so let's close all of these out and then I'm going to go to components we're just going to create a new folder this is just going to be project card and inside here is going to be in index. TSX and we are going to say TS RFC add the project card as the name for our props we can just do project and we can pass in Project from our at State API to grab the correct typing and over here we can grab the project value and inside inside our div we are going to do class name with rounded border padding of four with the shadow like that inside here we're just going to do H3 with project. name close that Curly braces put a paragraph tag over here and we're going to do project project. description remove this slash cap p and then we're going to have another paragraph tag start date and then project start date like so and we're just going to copy this guy over here this is going to be end date this one is also going to be end date as well and that is going to be our project card let's make sure we import that from our act components project card and can save it we can now close this project card and we are now going to create our user card as well in the same components directory user card create a new file call this index. TSX and then use TS RFC and call this user card inside of here I'm going to pass in user colon with user from the at State API grab the user value and we are going to do our magic inside here with class name with flex items Center rounded Corners with order padding of four and Shadow we're going to remove this user card and inside here we're going to do user. profile picture URL if that exists we are going to put the image in the image tag from next image the source is going to be a template string of SL p1. JPEG and then the alt will be profile picture with the width of 32 height of 32 class name of rounded full and we're going to close that image tag below this we're going to have a div I'm going to give this an H3 with user. username close that Curly braces put a P tag over here we're going to have user. email and we'll have our fully built out user card pretty simple and we're just going to import that from our act components and now our search should be perfect complete so if I write description search now we should be able to see task and project it's not very pretty but it does the job done and you can style it as much as you want and now for the next page we have a  user settings page now this one I'm just going to do mock data because we can grab the user information but that's going to be later where we require Cognito and actual Authentication so this is just a display of mock data we're just going to go through this very quickly just to a front end just so our scope doesn't balloon up so I'm going to go over here go to our projects page and under app I'm going to create a new folder I'm going to call this settings and inside our settings I'm going to create a new file called page. TSX close these out and I'm just going to write TS or FC so make sure we are on our own page and write settings over here and we are on settings so right here I'm going to do const user settings within object we're going to do username that's is going to be John do comma email with john. do@ example.com and then comma team name colon development team like so and then R name should be developer I'm going to remove these props get rid of the type props over here and we are just going to start giving our label Styles and we're going to do block with text small font medium and dark of text white and then from here I'm going to have text Styles is equal to margin top of one block with a full border and then border gray of 300 with the rounded medium Corners shadow of small padding of Two and a dark of text white inside here I'm going to have a div say class name of padding of eight and in the settings we're just going to have a header tag from our act components this is going to be name of settings capitalized and inside here I'm going to have a div with class name of space of Y of four now this is pretty straightforward we're just going to have a div with label of class name and label Styles we're going to have a username as the label and then also a div with class name of text Styles close this with user settings. username and we have our username over here we can see that we have our labels and we can just copy and paste it three times this is just going to be email capitalized and then lus email this should be team and this should be team name and this should be rle name or roles let's say or roll singular and roll name like so and we are going to save it so we have our settings now fully there pretty simple straightforward I just wanted to do this just because it's more for completion purposes and then next one is going to be the users page which is just a table and we have username profile picture as well as their team so this is another pretty simple page but we do have to go and create the back end so we're going to go to Source directory go to  controllers create a new file and we're going to call this user controller. TSX and we're going to do the same thing we typically do so we're just going to go to task controller I think search task controller is probably the easiest so let's go to that paste it over here and we are just going to do get users instead keep everything the same we can remove this we can remove all of this and we can just say const users is equal to await Prisma user. find many and we don't need to do any conditions cuz we're just going to grab the entire list of users and I'm going to pass in users right here and I'm going to change this to error retrieving users like we normally do and we are now going to create our routes so I'm going to create a new file create a new user routes. TS and I'm going to go to task routes copy this paste it over here to user routes and we can just get rid of these two and the only thing we really need to grab is to get users from controllers like so and save and the reason why we're getting an error because I accidentally wrote TSX this should be a TS and then finally we're going to go to our index page I'm going to import user routes from routes sluser routes like that and I'm going to do app.use slash users and then comma user routes like that again we don't need to check it because this is a very simple route we can just easily go to SL users and that will determine if this is working or not so I'm going to go now to our API and we're going to be doing the same thing now I just wanted to tell you like we're doing a lot of similar things as we build each page but I can tell you with this kind of setup it is so easy to add new features cuz you have everything in place and everything comes super easy after you do the initial setup anyways user with an array should be over here in our API request so we don't need to change anything we can just write query we're going to have an arrow function with users over here and then we're going to do provides tags as well and we are going to create another array that we haven't with users so I'm going to do comma like that and we're going to go to Pro uh tag types and we need to add the users for this particular one and let's not forget we can just do use get users query like so and now we can go close this out go to our app directory create a new folder and we're going to call this users and inside here create a new file called page. TSX and now this one's just another material UI grid so we're going to do just that I'm going to do TS RFC this is going to be users like so I'm going to remove the prop because we do not need any react component props and inside here I'm going to say const data colon users with is loading is error and we are going to use the get users query that we just created grab that list of users and we're also going to grab the is dark mode because we want different settings for our table and we want to grab the use app selector to do so put our state in there with our state. global. is dark mode this is why it's very useful again just want to reiterate Redux toolkit makes it so easy to grab this state and avoid drill profit or prop drilling prop drilling is the worst thing ever and then from here we have is loading and we can just return with the div make sure we have a loading element like this and below this we can say if is error we want to make sure users does not exist so we can return with the div and we can say error fetching users like so now inside this div we can add class names so class name of flex with a width of full Flex column padding of eight like so and we are going to do another header component from our components and we are going to do name users like this inside this we're going to give it a div and I'm just going to use style instead because this is usually better for styling we're going to give it a height of 650 withth of 100% close this div and we are going to pass in data grid from Material UI data grid I'm going to close this inside these there's going to be a number of props that we add so we're going to do rows we're going to pass in users and make sure if users doesn't exist we are adding an empty array columns is going to be the column settings that we are going to be adding oops if I can spell it correctly we have columns over here and let's actually create the columns first columns with grid column def as an array which is the type for materialized data grid and we can just do field colon of user ID with a Heather Name colon of ID with a width of 100 and then here we're going to do field colon of username pass in header name again and this is going to be username capitalized with the width of 150 and finally let's just copy this one last time I don't CU I don't want to write that one more time and then here this is going to be profile picture URL so this one's going to be the URL that we want want for our profile instead of our normal cell the width is going to be 100 and in here we are going to do render cell to have a custom little cell for our image so we're going to do prems with an arrow function pass in a div with a class name Flex height of full width of full items Center justify Center close that and pass in a div with class name to make sure we encase our image so it doesn't so we can constrain our image because you kind of need to do that with next js's image tags and over here I'm going to put an image from next image and I'm going to do source is equal to template string SL dollar sign param Dov value like so with an ALT of ps. row. user name with a width of 100 height of 50 and a class name of height full rounded full and object Das cover and we're going to close that like and right now let's go to users and let's just see what we have so far more importantly we're importing material UI data grid so we need to add the use client or else we get that error and it seems like we need a unique ID property and that's because every row we are going to require that ID to be one of the IDS for the row so get row ID is how we can modify that because if we grab the row by default it tries to find the value in each row for the value ID as a string but we want to change that to row. user ID instead so that will grab the user ID from the values that we have and we also want to include pagination we're going to add the class name that we did before so if you remember we created these class names in our utils folder for this reason so we have the same styling and we don't have to duplicate all the long styles for each of these and remember we need to pass in is dark mode for this and we're going to save it and as you can see we have our users the only thing is I want to show you we can add a custom toolbar which is pretty simple and it's pretty cool to do this in material UI we're just going to do custom toolbar like this and it's super simple if you want to create your own we can use some of the given values from Material UI this is all in their documentation but you want to grab the grid toolbar container with a class name give it a toolbar with flex and a gap of two and that is our container and then we can add the grid toolbar filter button like this if we want to add that we're can add grid toolbar export as well like this and we can save it and then from here we can scroll down into our data grid and we're going to add slots but two curly braces going to add toolbar and we're going to do custom toolbar as well and as you can see now we have filters and then we have export so we do this if we want to add extra toolbar functionality we can add whichever one we would like and it's pretty cool by default you can have all of this with very little code but you can really customize it if you would like and that's pretty much our users table pretty  simple the next page is teams which is very similar to our users page but we're going to have product owners and project managers and I'll show you how we can make those relations in the back end so let's do just that so I'm going to close all of this we're going to go back to our controllers create a new file we're going to call this team controller. TS and we are going to go to our user controller once again copy that paste it over here and we're going to make a decent number of adjustments for this one so we're going to have get teams and we are going to grab teams over here we're going to do Prisma do team. many and inside here we're going to do const teams with user names and what we need to do is we're going to use a promise.all because we're going to make sub subsequent request and we do this via team.map and we're going to set an async function with Team colon any for now and we're going to do an arrow function like this and this should be plural like that and we are going to do con product owner like this and we're going to do await Prisma do user. find unique and the reason why we do this is because we need to figure out where the user ID is the team product owner user ID and we need to make sure that's a existent number we are writing this condition because we are checking what the user's product owner I owner user ID really is so we need to find that specific user and see if they are a product owner or a product manager so this determines who the product owner and the product manager project manager of that team really is and we also need to select for username specifically true let's just change this to username like make sure there's a comma and we can find our product owner because if you take a look it makes sense over here because we are looking through teams we are grabbing the product owners user ID for that particular team because every team has a product user name name so if I go to schema and we go to let's find team we have a product owner user ID so we need to figure out who that product owner is because we only have the user ID so we need to figure out where that user is and we do that finding it through the user so this is how you're doing SQL statements and you're basically searching through multiple tables to find what you're looking for and SQL is dedicated for finding relationships between things and over here we can have project manager and we're going to do the same exact thing for that except this time we're just going to change this to project manager user ID like so now there are some limitations because this is Prisma and orm and this is okay this is not a bad request but you can probably optimize this more if you're just using plain SQL so there's a lot of debate whether people should use an or versus not using an or but for a project like this this is okay but if your project is really really big and you're at extremely large Enterprise level you can use an RM but you probably need to find a way to add your own version of adding custom SQL anyways inside here we're going to return and we're going to pass in the entire team that we already have product owner username and we're going to bring in the username as well so this is just adding it to the list of teams that we already have when we searched it and we're just adding the username on top of it and we're going to do the same thing for the project manager username as well and we're going to do project manager oops with the question mark. username like so and over here I'm going to do teams with usern names and below this error retrieving teams is what I want to do and there you go pretty simple and I'm GNA go over here to routes create a new file called team routes. TS go to user routes copy this and change it for our use case for team or get teams my bad and that should be coming from the team controller remove the get users and now we can go back to index. TSX import team routes from SL routes SL team routes like so and Below over here I'm going to do [Music] app.use in quotations we're going to do uh teams comma team routes like this and then once again we can now go back to API in our state and and we actually don't have an interface for our team so we're going to create that so I'm going to do export interface team team I'm going to do team ID with a number team name to be string product owner user ID question mark go and number and project manager user ID question mark number I'm going to scroll down and under search actually under get users we're just going to write get teams with build. query we're going to pass in the team array as what we'll get back from the back end and over here I'm going to do query it's going to be an arrow function with teams and we're going to do provides tags colon and we are going to grab teams from the back end and it provides tags the tag types has not been added so I'm going to do comma teams like this and below this I'm going to do use get teams query to make sure we have the query that we can use and finally we are now going to create the teams page so I'm going to go to app directory create a new folder call this teams inside the teams create a new file call it page. TSX and this is very similar to the users page so we're going to go to our users page copy everything and paste it over here I'm just going to close everything now and we can focus on our teams page now I'm going to relabel the users actually just hold alt over here rename it to teams and we are going to change things from here we're going to change the data to be users so I'm going to do command D actually so the way I'm going to do this once I hit command D I'm going to click these two buttons If you see these this is a search and it's going to do an exact search so I'm going to select all the users and I'm going to select or I'm going to rename it to teams plural then I'm going to change this to be use get teams query make sure we import that and over here I'm going to change this users to be Capital teams and over here we have a div style everything can be pretty similar we can get rid of getro user ID this time because it doesn't need it because it's just ID for default everything else can remain the same and these columns is going to have to change though so this ID is going to be just ID this is going to be team ID over here this is going to be team name this one header name is going to be team name capitalized and all of this can be erased because we're not going to have a profile picture this time going to paste it twice this one's going to be product owner username to grab the username that we added this is going to be a header name of product owner and then project manager username will be the field for this one header name should be project manager and both of these ones with the width should be 200 like so same with the team name we're going to keep that 200 actually not 2,000 and we can remove the image up here and remove the use get users query and this should be pretty much our team page so I'm going to go to it and with that we have our teams page perfectly similar to what we had before white and dark mode everything looks pretty good all right we're getting there we're getting there so now we have the homepage now this is a note dashboard is complete without a homepage so we're going to have like a simple bar chart a pie chart and a task list of a different project so we're just going to add that we don't need to change any back end so we're just going to go and  straight to the front end so we're just going to go over here I'm going I'm going to create a new folder I'm going to call this home and inside home I'm going to add a new file call this page. TSI we're going to start this with TS RFC close this so we have space and I'm just going to call this home actually homepage because it conflicts with the actual home component at the root component so we just want to change that this is not going to take any props so we're going to remove all that we're also going to add use client like so so we're going to save it and let's actually go to our page make sure it exists and it does not and that's because we got to grab this page we also want to set this as a root so to do that we can go to page. TSX and where we have this main component we can just pass in the homepage that we just created like so and get rid of the image so that we have this at our root page all right so now we're going to go to our homepage and in here we're going to grab our data just like we normally do I'm going to call this data to be tasks and we're going to have is loading and it's going to be is error now let's actually be more descriptive this time we're just going to say this is is going to be tasks loading and is error is just going to be tasks error just to be more descriptive and we're going to do use get task query we're going to grab it from our endpoint and we are just going to do project ID so now this is going to be hardcoded right here with one but if you ever want it you can change this project ID to be whichever project ID you want to display for the specific user we could have added the functionality but I didn't have time to add that functionality so it's up to you if you want to extend the features you can do so as well and then we're also going to grab the projects list because that's also part of the data that we need so we're going to grab is projects loading as well and we can do use get projects query from our API and then we are also going to get the dark mode is dark mode as well and we are just going to grab use app selector we're grabbing it from Redux and we're going to grab the state we're going to do state. global. is dark mode like so and we want to do the checks make sure these also load otherwise we are going to give a loading div so we're going to do is projects loading and we are going to return with div being loading like so and if tasks error we're going to make sure tasks exist and also projects exist otherwise we are just going to return an error div with error fetching data and we're going to remove that space and in our application let's say we we need the number of priorities so task priority distribution for a specific project so we're just going to do priority count like so and I'm going to do task. ruce and in here I'm going to pass in an accumulat there for a reduce function and we are going to grab a record and this record is for basically like an object we have string as the keys and number as the property so this is a easy short way to do objects if all the keys are the same type and all the values are the same type and inside here we're going to set task to be the task from the type of at State API we're going to grab that task make it the same type as that we're going to have an arrow function and over here I'm going to set the priority and it's going to equal the task as well and inside here the incubator object we're going to pass the priority as priority [Music] type as well from at State API and then from here I'm going to pass in the accumulator object with priority as priority because we need to deal with the typing and there's going to be a zero if it doesn't exist and we're going to do plus one so this looks complicated but it's mostly because of the typescript we just want to pass in the priority but we need to make sure we have the priority priority enum there then we're going to return the accumulator object for reduce and I'm going to do comma pass in an empty object like so so this will grab the priority count for each value for Urgent medium high and backlog and then we're also going to take a look at the const task distribution like so and we're going to do object. keys with the priority count and we are going to map each one so we can use them we're going to pass in an object we're going to do name with the key and account should be priority count and we're going to have a key so this is a lot of just data transformation changing it so we can use it so now that is the priority count we want to do the status count as well so I'm going to copy the priority count logic like this but change this to status count but this one is going to require us to grab from the Project's value and this is going to be project this is going to be project type from our API file and over here we're going to just change this this is going to be status is equal to project. end dat like so we're going to put completed colon and active like this I'm going to change this to be status accumulator should be status like so and I'm going to return keep it like that so that is our status count below this we're going to do project status and we are going to copy the object. keys so is exactly the same except for project status this is going to be status count same with this over here and then we're also going to have task columns which is going to be for our table so we're going to grab grid call def from Material UI and pass an array and we're just going to pass in Field title like this header Name colon title with a width of 200 I'm going to copy and paste this three more times change this to status make this capitalized priority priority here as well and then due date like so this should be capitalized doe date and all of these 200s should be 150 just going to save that and we are missing the commas so I'm going to add those and then for the colors for the chart we're just going to add this as a constant and we are just going to pass in 0088 Fe and we should make sure we close the double quotes 00 0 C4 9f and then number FF bb28 like so and then number FF 8042 close that out and we should also have different chart colors as well so this is for the chart and then we're going to set is dark mode like this we're going to have a Turner operator we're going to set bar to be number 88 84 d8 like so actually this should be a comma we're going to have a bar grid with number 303030 Pi fill should be number 4 A90 E2 text should be Coline number FFF FFF we're going to be using this and I'll explain what's happening and we're just going to copy this entire thing but we're going to have a few different colors so bar grid should be e0 e0 e0 this one pill should be 82 CA 9 D and the text should instead be white like that and since all of these are constants let's actually move these outside of homepage so it doesn't reender anytime something gets rendered all of this will be implemented and actually we need to have chart colors inside here cuz is dark mode exist only inside the component so that is the one that we cannot change and now finally we can actually write the jsx cuz we have done all the data Transformations we basically needed and we're going to have a class name with container h of full wi of 100% background gray of 100 BG of transparent and padding of eight all right and then from here I'm going to get rid of the homepage now and I'm going to add header import that and we're going to do name project management dashboard and over here we're going to do div of class name with grid grid Columns of one gap before but when it's larger screen we're going to do grid columns 2 like [Music] this and then we are going to start writing the task priority distribution but let's save it let's see what we have so far we have our header which is exactly what we are expecting so in here I'm going to do a div with a class name with grid grid Columns of one gap of four and for larger screens we're going to say grid and over here I'm going to do div class name rounded large background of white padding of four Shadow dark with the background dark of secondary and we're going to close that and we're going to have an H3 tag with class name margin bottom for text large font semi bold with dark of text white and we are going to close that and we are going to write task priority distribution and then below this H3 we are going to use responsive container from recharts so we have charts that we can basically use and in here I'm going to set the width to be 100% and a height of 300 make sure I imported yeah I imported in here we have a bar chart from recharts as well and we are going to pass in the data of task distribution that we added earlier inside this we are going to use the cartisian grid to to add the little Grid in the background so stroke Das array is how we can customize the background so three of three with the stroke of chart colors doar grid and we are going to close the cartisian grid below this I'm going to have an xaxis pass that in from recharts we're going to do data key we're going to pass in name with stroke being chart colors. text so all those data manipulation that we had we are passing all of those in and we're also going to pass in y AIS this is going to be a stroke and this is going to be a chart colors. text as well with tool tip is going to be the next thing for our recharts and we are going to set the content Style with two curly braces with to be Min content inside and height of Min content like so make sure we have a self-closing tag for Tool tip and we are going to add a legend and we are going to add a bar from recharts make sure you import that make sure you also import Legend from from recharts we're going to have a data key with account and then Phil is going to be chart colors. barar and we are going to close that so if you see we have our status task priority distribution of our status and now we can just grab this entire thing right here make sure you grab it within this grid columns we're going to paste it and we are just going to change this to project status and we're going to modify a few things because it's not the exact same chart we are going to use a pie chart so it is a little different so we're going to change this up so pie chart from recharts we don't need X or Y axis for pie charts so we can get rid of those the tool tip we can just leave it without any of that content keep the legend the bar can be removed we can change this bar chart to pie chart and instead of this being a cartisian grid we are going to pass in pi from recharts and we are going to say data key is equal to count with data is equal to project status we're going to have a fill of 8 2 c a d 9d and we're going to put a label close that and we're going to set the project status we're going to map through that pass an entry with index have an arrow function and inside here we're going to pass in the Cell from recharts with a key of cell Das index like so and a fill of colors fill is equal [Music] to Colors Capital index and do modulus operator colors. length like so and make sure we close the cell as well and we should be able to see our project status it's all completed but typically it would be different and finally what we can do is just grab this div right here and below this one closing div after this responsive container I'm going to paste it but I'm going to add an extra one MD column span 2 so the table will be two columns with length instead of just one if it's on larger screens and we're just going to say your task like so and below this I'm going to write a div and this should have the same styling as most of the other data grids so I'm going to just do style is equal to height of 300 width of 100% in strings and inside here I'm going to have a data grid from Material UI data grid close that out and pass in for rows should be the tasks that we have fetched with columns and that should be task columns and then checkbox selection for this one we're going to do loading if tasks are loading we're just going to add that we're going to do get row class name and we're going to pass an arrow function with data grid row do get cell class name and we are going to pass in Arrow function data grid cell with class name of in curly bra data grid class names make sure we import that so we have the same styling and finally we are just going to pass in data grid SX styles and we are going to pass in is dark mode to get that same value and so we seem to be missing a closing div right here and once we have that we should have all three of our nice little widgets so if I open this up you can see this task takes the entire WID same with all of these these should be pretty good maybe the height for the task should be larger so we can increase that I think maybe 400 might be a good compromise and there we go that is our homepage we have all of these Pages all of these are pretty short and easy most of the difficulty was the project cuz that was a lot more details this is just to show you how easy it is once you have everything set up you can expand on your project very easily because that's usually where a lot of time gets taken  up so now we want to handle the priority all right so this priority page is pretty simple we just have urgent high medium low backlog all of these are pretty identical in terms of what you see you're going to just have a list and a table view but I just wanted to add this because it's very specific in terms of getting task specific to a user so we actually need to add another endpoint to get task just for for a specific user so to do that we're going to create we're going to go to our controllers and we are going to go to task controllers and we're going to have something similar to get task so we're going to grab this we're going to go down all the way over here and we are going to do get user tasks so these are tasks specific to a user now so in this query we are going to be sending a user ID to the back end and we're going to set this to be rec. prams instead but instead of having this wear condition we're going to have an or with an array and we are going to pass in author user user ID with a number with the user ID as well and we're going to do comma and we are going to do assigned user ID we're going to pass in number and we're going to grab in user ID from there as well so this makes it a little bit different and it just realize getting these kind of data and understanding the nuances for situations like this is very important as a developer I'm going to remove these comments and attachments as well and I'm going to say error retrieving users tasks over here here and it seems like I have spelled error retrieving trks over here so you can fix that but this is how we get task associated with a specific user now we're going to have a separate route for this so we're just going to go to task routes instead and under our task status we're going to do a router. getet but because we can't do the same endpoint we're going to do user slon user ID CU it's a Rec prams that we are passing in the user ID to grab it and we are going to grab get user task from the same controller and save it so now we have that particular endpoint we're going to close this out close that up out as well and now I can go to State and API and I'm probably going to put it right under get tasks and I'm just going to say get tasks by user we're going to do build. query we're going to pass in task with an array with the number and we're going to do a curly braces inside here we're going to do query and I'm going to pass in user ID with an arrow function and I'm going to set tasks slash user slash dollar sign user ID like so so we can hit the endpoint we just created and again we we need to provide tags and we need to kind of do the fancy results like so error and user ID because we are we want the result to be able to update each tag and have each tag as separate items so the result we're going to have a question mark with result. map pass in friends with an ID like that make sure sure you get all the PRS correct and then we have a type Callin of task plural comma ID and then Colin we are going to pass in type TX TXS tasks again as ID colon user ID like so that is our build query very similar to what we have with get task except we're passing in user ID so now now we're going to go down and we are going to do use get tasks by user query and finally we can create the priority pages so now as I mentioned these are very identical for each page so we're just going to create one page and we're going to reuse it across all these different pages just changing the Status for the for each one so let's go let's just going to move that over and in here I'm going to create a new folder and I'm going to call this priority and inside here I'm going to create a new folder called reusable priority page and this will be what we can use across all of these different pages I'm going to call this index. TSX so I'm close this out close this out I'm going to do TS r afce this is actually going to take some types so we're going to take priority and we're going to bring in priority from the types that we created I'm going to pass in priority from there and I'm also going to add a used client because we are using a table once again so we need to make this interactive and by the way there's no problem with Ed client some some people might assume that it's like a client component that makes it non performant but is actually pretty performant and provides SEO benefits that way better than react does so there are some small downsides but using use client if you did it on every single component it's still more performant than on a react application so just know that it's okay to do it so don't feel bad about using it so from here we're going to have a list view if we go back we want to see that that we have a list and table so we're just going to create some tabs so we need a state to say View and then set view as well and we're going to set you equals to use state from react and we're going to put in list as our default and then we're also going to add is model new task open and remember how we made it reusable and we put it in a folder that we can reuse it we can reuse the model pretty easily so we're going to do use State and it's going to be false by default and what we need is in our const we're going to grab our data again so we're going to use the use get TK task by user query so we're going to do is loading is error and we're just going to re rename it to is tasks error for this case and we're going to do use get task by user query so now this is where it gets kind of tricky because you need the user ID but how do we get the user ID because we did not create the authentication so for now we're just going to hardcode this I'm just going to set the user ID to be one or zero but for now one I put zero for later on when we actually have the user ID but we're just going to keep it as one well let's just remove that I don't want to confuse you guys so we are going to have a curly braces and I'm going to say skip so we only skip it if the user ID is null if it's equal to null like this we're going to skip it but let's actually hardcode the user ID over here we're just going to say one like this pass the user ID like this and put zero so now we typically don't have the user ID to be null or any of these conditions but later on when we actually add Cognito in authentication this user ID is going to be grabbed from the back end and the whole purpose of this skip is if when we are making an API call to grab the user information so the way this works is if we go to this particular page this priority page we are going to need the user ID to grab the user ID we need to make a backend call and that backend call is going to be made first on this component but this will automatically run right after you try to make the backend API call but this will happen before we get the user ID back this is why this skip parameter exists because if the user ID does not exist later on we're going to have something like use get AU user something uh user query we're going to have a function like this this is going to happen first but this is going to happen right after but this won't be able to grab the user ID fast enough so that's why we need to set the skip to be user ID equals null so right now it does not matter because user ID is hardcoded to be one but once we get to the Cognito authentication this is going to be useful for us and this is a feature provided by Redux toolkit query so hopefully that makes sense we're going to come back to it with our ethnic so over here I'm going to have it is dark mode and use app selector like we did before grab our state and inside here we're going to do state. global. is dark mode like so from here we're going to have a filtered list of tasks and it's going to be based on priority so it's not always going to be the same page but we're going to make sure we have the list of tasks and make sure this is plural I always forget the plural sometimes this is going to be friends task colon we're going to pass in task from at/ State API we're going to do task. priority make sure it is equal to the priority of this current page so let's do that there should be triple equals so by the way this priority is going to be specific to let's say urgent high medium low so we are making this reusable and it's going to be for each page so if we do Urgent this is going to be urgent and we're only going to get the task for Urgent and by the way I should change this name of Index this should be actually reusable priority page all right and then we're going to have a quick if check and it's going to be is tasks error and if task doesn't exist we're going to return with div error fetching tasks inside this div we're going to do class name with margin of five padding of four and inside here the reusable priority page we now can import our modal new task as well so that will happen when the modal is open so we've already set that up all we have to do is just open it as we did before so it's basically reusable we can just add that and anywhere we want so we're going to do set is modal new task open it's going to be false by default make sure we close that the only problem with the modal new task is that for this one we don't actually have a usable new task that we can pass in or like a p a project because when we have this model new task we actually have an ID that gets passed down so because of this we need to actually modify our Modo new task and we should be able to do it relatively simply but we first want to make this optional so I'm going to do string and it's going to be possibly null and the way it's going to be null is by default ID is going to be null so what happens is when no ID is provided for modal new task we are going to make this null by and then from here we're going to make sure we validate and the way we validate is to make sure that ID does not equal to null if it does not equal to null we're going to that project ID to be a valid value and project ID is going to be a state that we add because we're going to have to add a project ID if the user does not have a project ID we want the user to be able to input a project ID when it does not exist so in this case when we add task we need to have the user have an input for a project ID and then we're going to go down to create task and this is going to be slightly different we're going to say ID does not equal to null we are going to make sure that we are going to be using the ID that's provided like in the other situation but if it's not provided we're going to use the input value of project ID and then we also need to validate over here the same thing because this is what's going to check and validate that the user has a project ID when ID is not provided so we're going to go down all the way down over below assigned user ID and I'm going to be creating a new input but if ID is null so only in the situation when ID is not provided we are going to grab this input paste it over here and we are just going to call this project ID the value is going to be the project ID we already set and the set project ID will be the value or the set function that we have so that means now we can have this set model new task button without any issues and we'll come back to it so below this we're going to have a header component import that I'm going to call this name to be be priority page and I'm going to have a button component here as well inside this is going to be a button tag with class name let's actually put this on a new line like this and we're going to do margin right of three rounded background blue of 500 padding of four py of two font bold text of white hover background blue of 700 and we are going to say on click I'm going to add an arrow function set is modal new task open to be true like this I'm going to close this button tag add an add task button and then make sure everything is closed with our header and save it and we can now go to our create next app and our reusable priority page is not being shown anywhere so let's actually change that we can go to our Explorer we're going to create a new folder and we're going to call this urgent actually this should be lowercase urgent and inside here I'm going to create a new file called page. TSX and this is where we're going to use the reusable priority page so TS R AFC like we normally do and over here I'm going to call this urgent as the page but instead of the div we're just going to do return reusable priority page and this is how we make it reusable and super easy and the priority we're going to set is going to be the enum that we grab from our API typescript files and we're going to do Urgent like this and we are now going to save it and we can now click urgent and as you can see we have a priority page you might need to refresh it if it gives you an error but we have our add task button so as you can see when we have the add task we have a project ID that we need to add but over here if we go to back to our projects page and we want to add task this way this is already associated with the project ID we're basically creating a new task in that specific project because this is in the context of that project whereas over here this is urgent this is not in the context of any kind of project so the user has to be specified to add that project a little bit of nuance those little things can become quite a headache and then over here we're going to create the tabs that we saw before so below the header I'm going to create a div call this class name margin bottom of four Flex with justify start like this close that we're going to add a button call this class name and inside here curly braces I'm going to do padding of four and X Direction padding of two in the y direction and in here I'm going to say if View is equal to list I'm going to put a question mark background of gray 300 and then background of white and below this I'm going to say rounded L like this after this I'm going to do onclick have an arrow function with set view to be list like this close this out call this list for this button and then over here as you can see we have that we're going to add another button paste that entire thing and this should be table super easy super simple and table except this one should be table so we'll have different tabs for these and below this I'm going to say is loading question mark with the Turner operator I'm going to do a div close that with loading tasks dot dot dot slash div otherwise we're going to set if view is equal to list actually this should be lowercase list we are going to pass in a div with class name of grid grid Columns of one gap of four we're going to close that div as well and inside of here guess what we're going to use filtered tasks we're going to map it out pass the task and add the task from that so we have the typing and we are going to pass in task card the reasonable task card we've created before to make this super easy we have that list task as well and inside here I'm going to do a task is equal to a task like this close that we have our task card and then finally below this we're going to have the view for the table so view if it's equal to table and also we need to make sure filtered task exist so it doesn't error out we are going to create a div with class last name with with of full close that out make sure we have a closing div as well inside of here I'm going to add data grid material UI we're going to have rows to be filtered tasks over here this is going to be columns and we're going to pass in columns we're going to have a checkbox selection get row ID and this should be row should be transferred to row. ID class name should be the classes that we added before SX is equal to data grid SX Styles and we're passing in is dark mode like this now we're almost done oops we're almost done we need to add the columns so I'm going to go up here write const columns with grid call def from Material UI we're going to have an array and we are just going to we're going to go to our previous list in our projects we're going to go to table View and we're just going to go over here grab all the columns that we had prior and I'm going to copy and paste it over here let's actually see what we get from that so that's our list that's our table and it's exactly everything we need for our urgent page so list and table add task we're all good for some reason this a scroll bar is popping up over the create new task maybe it's a zindex thing so let's go to our modal new task and actually go to our modal component and to fix that basically I went to the modal component I changed this to Z50 once you change the Z50 it's going to pop up over the scroll bar so we can close it now it's good so over here we're going to go back close these models close the table View and in here we have everything we need for our urgent page but we need to create this for our high medium low and backlog so we're going to go over here we can actually just copy this entire thing we're going to create a new folder we're going to call this High create another new folder call this medium call this new folder call low and call the new folder called backlog so over here in our medium we can do page. TSX and we're going to paste it change this to priority medium and actually we should remove these props CU we don't need them so I'm going to save that copy this remove the props over here save it we're going to have we're going to do the same thing for low page. TSX paste it we're going to have priority should be low over here same with high we're going to do page. TSX paste it Priority high and over here create another one page. TSX paste it and we have backlog save it and I just want to double check I have everything correct medium urgent and everything should be good we can close all of this and now we can just quickly test everything so if it doesn't have anything it's not going to show so there you go we're not completely finished with priority because we want to grab the user and we want to use that user to grab a specific user's task instead but our application offline is pretty much complete we have nearly everything we need for our project there is a lot of pages for this application I went through some of it pretty fast because they're kind of redundant and in the future I'll probably go over a little more in detail probably have less pages but I'll add more features on those individual pages to bring out more of an real application I'm just doing this because it shows you different aspects different ways to use the same pieces of data modify them have different SQL queries and combine pieces of data as well and there's one last thing I want to correct if you go to projects right here under table View and inside index we have prams doval I put a question mark over here just in case and I did author and do assign I believe this was at username and there was no question mark so you get an error to see the table  over here so make sure you correct that and you'll be able to see everything and so we already did so much we had a local database we had local back end we had a front end we prepared every single one of these Pages we styled them and we had a large number of pages that we went through so now we can prepare our package for deployment so before we get into the AWS section I want to push our repo into GitHub and modify a few things in terms of our packages so we want to upload our repo into to GitHub but we need to do a few things before we do that so we're going to go to our directories we're going to close out client and server if your server is running and we're going to open up server and we are going to remove. get ignore and we're also going to go into client we're also going to remove. get ignore as well you can ignore that warning and I'm going to go into client and I'm going to write rm-rf dogit this is if you're on Mac if you're on Windows you're going to do remove directory like this SLS q.g so these two commands will basically remove the git folder that is in our nextjs client application and the reason why we're going to be doing this is because we're going to go we're going to go to our Parent Directory so I'm going to CD out and also actually I could just add a new file over here I'm going to dog ignore client SL node _ modules server SL nodecore modules client slist server slist client d.v server d.v client sl. nextt and we're going to keep it like that we're doing this because we're going to centralize our git repository in The Parent Directory so we do not have separate git folders in each client or server that will mess things up so we want to be able to push this entire repo both of these files into a repo so to do that in our Parent Directory I'm going to start by doing get a nit then I'm going to write git add dot so it adds everything and then I'm going to do git commit DM initialize that and then from here I want you to go to your GitHub repository so we're going to hit new inside here I'm going to choose myself as the owner I'm going to write the project repo name I've already created it so project-management is what I'm going to call it and we're just going to leave everything blank once we hit create repository it's going to give you some commands we can ignore everything because we did most of it except this particular line commit get remote at origin and the project repo URL so I'm going to paste that and hit enter and then from here I'm going to write get push origin Master once you've done that you can go to this same page and refresh it so I basically refresh it and you can see that I have my repo set up correctly now before we move on to the AWS section there's a few things I want to take care of before we go to those sections so in our server directory I'm going to create a new file and I'm going to call this ecosystem. config.js this basically this basic file is going to be for ec2 and it's going to be for our pm2 module that we're going to be installing so when we get to that point I will explain further what this will be doing so we're going to write module. exorts is equal to an object we're going to do apps and we're going to have an array inside this array we're going to have one object I'm going to call this name project-management comma script is going to be npm with comma args is going to be runev so we basically run our Command npn rev with this and we're going to set one EnV variable we're going to call this node EnV in caps lock with development as the value this is for later use for EC 2 when we want to set up pm2 I'll talk about that later and for our server to work on AWS we're going to go to index.ts and we're just going to make one slight modification I'm going to go down to Port I'm going to put number over this because we're going to get a typescript issue once we make a change right here is if under app. listen we actually need to write 0.0.0.0 comma so this adds an argument for later ecy to networking issues once you add this this is going to scream at you the port value and the number is going to fix that typescript issue so we're going to save this I'm going to open up our terminal I'm going to hit get add all so we can just save the changes that we just made I'm going to write git commit DM and write server modifications and I'm going to do get push origin master and then I'm going to refresh the project management page and you can see that we have the git commit server modification so it did make a few modifications I did change G ignore to not have the slash but it should have the trailing slash like this but it doesn't really matter and now with that our repo is basically set up and we are now ready to go onto AWS and now for the  most exciting part of this application which is where we deploy our application using using AWS now there are platforms like verell for nextjs or other services like post postresql which might be simpler I believe AWS is such a valuable skill to learn I really wanted to include it because it stands out on resumés and impresses interviewers because there's such complexity and such a wide range of services now I know AWS is pretty daunting with its extensive terminology and buzzwords but mastering it is really beneficial especially in this competitive job market and that it shows you can handle complex technical tasks Beyond basic crud applications if you could just click and deploy that is not a very useful skill also this entire tutorial where we deploy our applications it's going to be entirely free and I'm going to make sure that you understand everything about billing the free tier and budgets and we're going to go through all of that in depth so let's get started so if we go to AWS we have a sign up for AWS now I'm not going to go through this exact process but it's pretty simple you just have to follow the instruction so you would go through this process add your email there's going to ask for email confirmation it's going to ask for your billing info and then you can choose free tier just realize we're going to use a free tier account so I want you to put an alert for after 12 months to check when your free tier usage is up just in case so you don't get charged on after that 12 month now once you sign in  you'll probably see something like this particular page I just want to let you know there are three ways to interact with AWS and that includes the console which is what you see here which is the graphical UI for accessing AWS Services there's also CLI for those who prefer using the terminal to type commands we're not going to be using any of those and then there's the STK if you want to programmatically manage AWS services and have automatic you know automations that you want to interact with these Services now before we get started I want to talk about billing cost and free tier as well now this whole video is going to be about free so everything we do is going to be free for this entire project but I want to make some caveats just in case so that you don't get charged because you can still get charged accidentally if you don't do the right things so I just want you to be aware of this this is a huge part of AWS and a huge thing that you need to know first off there are some services that have free trials there's other ones that are 12 months free so you have a free tier account a lot of services have free tier options and then there are some options like always free that includes like Dynamo DB other things like that so you have to make sure what you're using is dependent on what you're looking for over here CU there's a lot of options and under here there's a lot of options over here so you can see all the link in the description all of these and the services that are going to charge you so you don't have to worry for each section I'm going to tell you what is free and what is not so we're going to get to that so let's go back to our console now we're going to go over here you can look up search you can look up services over here but it's better to just use the search and we're just going to go to billing and what we want to look at is billing and cost management and I'm going to briefly go through this so billing and cost management this is a very complicated page but there's only a few things that you really have to pay attention to the homepage is where you get a brief summary and overview I look at this this gives you a little cost breakdown it's pretty simple and then over here you can see the bills this obviously gives you the charges and importantly you can see what services will charge you right now I have everything to be zero if you followed my last tutorial I have reduced every cost to be zero so nothing is charging and a few other things is the cost Explorer if you want to use this this is more for advanced use cases you probably don't have to go through it I've been charged $19 because I was using a accidental VPC ipv4 which I removed and over here pricing calculator is another option you can use which will help you create an estimate but again this is probably for this is for very Advanced use cases and then there's also free tier over here this will be useful for your free tier account it shows you what you're actually using for the services that you are getting for free in your free tier account so the 12 month limit this is what you get so make sure you take a look at this this is an important page and then finally budgets is another useful one so what we can do is create a budget what I have is a free tier budget and it tells you when you are going to go over a limit so if you create a budget you can use a template and we can set zero spend budget and I'm just going to create that budget let's say okay and you just want to write your email so that you get a notification if it goes over that bound of the cost right now zero spend budget meaning anytime it exceeds 1 cent it's going to alert you once you create that budget you're going to see that the budget is set to $1 you can change into 1 cent but you might get warned a little too early you probably want to set it to maybe 10 cents or something like that if you want to do that you can go over here you can hit edit it and what I want to do is just go into enter your budget amount I'm going to say 10 cents like that so over here you're going to hit next next none of this really matters you can configure it you can look at all the options but it's pretty self-explanatory from there so if you hit 10 cents my forecast amount says 5 cents because this is incorrect you just have to be noting that this value might not be right so I have my zero spend budget at 10 cents which is warning me then and it's going to give me alerts so there you go that is mostly the budget is very important to understand see how to make it so we don't get charged for anything so one last caveat right now I'm recording this in 2024 but maybe you watch this in the future you have to watch out and be careful about aws's pricing because they do change quite frequently whether it's the products or services so you always want to make sure you understand that and the best way to figure that out is go to this particular free tier page go go down and go under here you can search for free tier products and if there's a service that you want to use and you want to check if it's free you can go to S3 and you can see that it has 12 months free it has 5 gigabyt that you can use for free for 12 months so you always want to make sure and double check over here this is a very good overview very good summary this is probably the most helpful page when it comes to pricing that I've discovered on AWS now real click this  part is optional if you watch my previous video you might have extra services that you had before so what you would do is you want to be able to delete all the services that you made prior and just in case you have issues with deleting Services you might not know what services you're currently running because you might have created a few things that you don't know and the way you can check is we can do two things we can go to the bills page to see what's running and you can see what's being charged of all of these you can see everything that we have 12 Total Access services so you can find what you already have in that specific region figure out what is being running currently so this is everything I have currently being shown but another way is you can go to the VPC and inside here you can see everything that all the services that we basically have so you might have some things that you probably don't know what it was all about so you can go through over here you can basically try and delete them just realize that deleting them can be kind of a pain it is a little bit difficult and they probably purposely do it but basically if you want to delete something like this it is hard because there are dependencies upon which services so you're just going to have to go through the manual TDS process to see which one can be deleted first for example if you try to delete a VPC it might prevent you from deleting it because you have all these subnets associated with that so there's a lot of dependencies on what you can delete so you're just going to have to go through figure out which ones are going to be deleted first so just letting you know make sure you delete the services if you already have them just in case you have it from a previous project now with all of that out of the way now we can focus on what we are building today so this is the AWS  diagram of everything that we're going to be using in AWS to deploy our application now this diagram looks a little bit intimidating but there are only five main things that we are going to be really worrying about everything else is just networking and how AWS does its own things this is very similar to the previous application if you watch that video but if you haven't you don't have to worry cuz I'm going to explain everything but there are slight differences so the first thing we're going to be doing is we're going to look at Amazon Amazon ec2 this is where we host our backend server Amazon RDS is where we're going to be hosting our database amplify is going to be where we host our front end which is nextjs and then S3 is going to be where we host our files and finally we're going to use Amazon Cognito for our authentication everything else you see is basically networking with that let's actually hide every single one of this so that we start from a blank slate so ads follows the security principle of giving people or service the least  amount of access possible as they need so this is a very important principle that you have to understand when AWS provides all of these networking Services now networking part of AWS all that all it is is basically security who gets what permissions and for what service that's all it is as simple as that so the first thing we need to do in our AWS cloud is to create a VPC a VPC is just an isolated set of services that or section in AWS that is dedicated for your own services so basically virtual private cloud is just a little section that you have in AWS where you can put all your servers you can have multiple vpcs but basically it just groups all the the servers and all the services that you want to use in a single location and isolates itself from everywhere else it is a property of just making everything secure so you by default don't have these Services exposed to The Wider internet so to get there we're going to go to AWS and up here where we have our search we can do VPC now you can look at all the services find it through here but we are going to just search it and we're going to click VPC and I'm going to go to your vpcs by default if you just created your Amazon account you might have a default VPC which you generally would end up using but we are going to create a fresh new VPC so you can understand this better so we're going to go over here under name tag I'm just going to say PM which is short for project management I'm going to sa VPC over here I'm going to give you a brief overview for block it is a little bit confusing but this is how we set up IP addresses IP addresses are locations where you have a specific service so if you are running like an ec2 which is basically a server it's going to need its own IP address but these IP addresses are isolated from the public IP addresses that you normally see on a regular website so these are private IP addresses that the VPC is going to contain so we have these cider blocks which is probably the most confusing aspect of vpcs and it's related to the IP addresses we were just talking about so I'm going to go over here and I'm going to explain what these cider block ranges represent so let's say we have a CER block range of 10.0.0.0 24 all that means this 24 represents 24 Bits And if you look at every number has a value of eight bits so 10 is 8 Bit Zero is another 8 bit 0 is another AP bit that adds up to 24 so what that means is when we set 24 we are essentially locking the first three numbers and only the last number can be basically changed and the last number can be changed from 0 to 255 so these here are examples of the IP addresses that we can use so we can assign any of the services within it any of the IP addresses from 0 0 to 255 for the last uh fourth number let's say we have 10.0.0.0 sl16 that means the first two are locked 8 bit plus 8bit that means the last two numbers can go from 0 to 255 so these are just examples again 15 38 these two numbers can be anywhere from 0 to 25 255 so in this case we have 255 * 255 potential addresses if we use this particular CER block range that means we have this many IP addresses or dis many services we can put in there to use for that particular uh VPC and the last one obviously is eight that means just the first one is locked so that's exactly what we're doing that's all you have to know about CER block ranges so we are going to go over here and we're going to set 10.0.0.0 point0 sl16 for this VPC so the last two numbers are Dynamic and we're going to keep everything else the same and we're going to hit create VPC so we have our VPC and you might think oh we should be able to upload our application directly into this VPC that is exactly not the case so if you go back to our diagram we actually need something called subnets subnets are just isolated sections which are just again another set of Ip ranges so cider block ranges where we can put our services within so you do need these public subnets and private subnets and this is just for networking organization if you are running a large Enterprise company you're going to have a lot of these requirements CU it's going to require a lot of of organization so we have these things subnets to do that we also have public subnet and private subnet and what we're going to do is we're going to create one public subnet which has access to the wider internet and two private subnets which do not have access to the outside internet so if you remember later we're going to have an ec2 in our public subet and an RDS in our private subnet so our RDS is not exposed to The Wider internet whereas ec2 is so we're going to create these two first so from here I'm going to click subnets and we are going to create subnet over here inside here I want you to select the correct VPC so I call it pmore VPC if you have the name we're going to select that and it's going to ask you to create your subnet so the first one I'm going to call pmore public- subnet d one this will be our public subnet now for the Avail availability Zone this might be a little different for you depending on your location but I'm just going to choose us East 2A but it might be dependent on your location and over here for the VPC cider block we're going to keep that the same because that's the VPC sub cider block but the subnet has its own cider block as well and in here we're going to say 10.0.0 .0 sl24 so we only have 256 IPS I made a mistake it's not 255 it's 256 so we have subnet cider block over here and then we're going to do the same thing for our private subnets so I'm going to say pmore private D subnet D1 and in here I'm going to choose the same availability zone for this particular one and I'm going to keep this as 10.0.0 or actually. 1.024 so this will be assigned to a different range of CER blocks than this one remember this is going to lock the first three numbers this will as well but this one will have one as locked for this set of ranges and then finally we're going to do one more we're going to do pmore private subnet D2 to we need private two private subnets if we want to create an RDS database you need two subnets in different availability zones now I didn't explain this but availability zones are locations within AWS where they might have different servers and different locations so essentially this is just so that if one service or goes down in one availability Zone you're going to have a backup in a different availability zone for your service to be able to still be running if those things go down and here I'm going to set the CER block range to be 10.0.2 sl24 and with that we have three subnets with different CER block ranges and we are going to create them now you might think oh we can now start putting things into our subnets um no it WS likes to make things fun to make them more difficult the first thing we actually want to do is create an internet gateway an internet gateway allows a VPC to connect to the Internet so it gives us access for different users to access our VPC so we're going to go over here go back to our AWS console we're going to click internet gateway we're going to create internet gateway and we're just going to call this PM internet Gateway like so and I'm going to hit create and this is pretty simple we're going to hit actions and we're going to attach to VPC and we're going to attach to pmore VPC attach that inter our gateway to the correct VPC and of course we're still not done let's go back to over here we can go and see that we need to create route tables so we're going to have a separate public route table for the public subnet and a private route table for private sub Nets by default vpcs come with their own main rate route table but generally when you want to create a subnet and a private subnet you want them to have their own route tables as good practice so we're going to ignore the main route table I'm going to go back to our VPC and I'm just going to show you right now what we have over here so as you can see we have three subnets set with a route table they're all set to the main route table that has been created but you want them you want the private subnets to be associated with their own route tables as well as a public subnet to their own and as you can see just FYI internet gateway is attached so we're going to go to our route tables and we are going to create our route table so I'm going to call this PM public route table-1 select the VPC and we're going to create a route table and over here I'm going to edit subnet Association so we created our route table but we not we did not associate them with the correct subnet so for this one this is public subnet or this is the public route table we want to associate with the public subnet so I'm going to save associations with that so I'm going to go back to our route tables and as you can see this is our main one it's by default like underscore we could change the name Main and we have pmore public route table one and obviously we can you know what we're going to do we're going to do PM private route table-1 select our VPC create the route table go to actions over here edit subnet associations we're going to select PM private subnet D1 save associations and we're going to go back to our route table and we're going to create one more route table call it PM private subnet D2 select our VPC create the route table go to actions edit subnet associations select the second one and save associations a lot of clicks but it's pretty simple and there we go we have our main route table we have our public route table we have two private route tables and for some reason I call this PM private subnet this should be route dt-2 now one thing we need to do with the public route table is to give it public access so we're going to click on this particular one we're going to hit routes and right now this is only for local that means it's only the private IP addresses so we want to edit that route so we can have an extra route that will come from everywhere so to do that we are going to choose 0.0.0.0 this gives access to the internet and we want to select internet gateway this is the internet gateway that we originally chose and once we hit save changes we have now a route table with access to the internet so if I go back to our diagram that allows this public route table to be connected to our internet gateway that is connected to the internet whereas the private route table will not have access to the internet gateway now you might think oh this is all all this unnecessary but why don't we just have public access to everything now when you're working at Enterprise company they have a lot of security concerns and they need to make sure everything is secure and networking is all about security and preventing Bad actors from entering their or accessing their services so that is exactly why we have all of this now you can think of Route tables as kind of like a white list what routes can act access what routes but then there is also this idea we're not going to create it I'm just going to show you in this diagram that we have something called knackles These are network access control list they also exist on the subnet level and what these are more like our Blacklist they tell they if you want to ever specify some things that you don't want it explicitly ever entering you use these knackles to prevent any kind of IP addresses or domains that you do not want access to that particular subnet so that is how you can do that later on we're going to talk about security groups that exist on Individual Services which is similar to the knackles but it is on a level of ec2 or RDS where you  prevent access from different Services they're basically again like a blacklist like a firewall essentially but we'll talk about that when it comes up and with that now we can Fin and create an ec2 which is where we're going to host our backend so we can finally upload part of our application into AWS with all this networking done past us now I was going to do this entire video with Lambda instead of ec2 to give you an alternative to ec2 but I ran into some serious issues with e uh Lambda and Prisma compatibility I was not able to resolve it so I ended up re-recording this entire AWS section because I wasn't able to figure out a fix but I do have future videos where I will use Lambda and I will show you how to do that so essentially ec2 is just a server that's on Amazon it's nothing else so it's basically like another computer and you can connect to it and run commands install things onto it and run it like you would just like you would run a server on your own computer so let's let's go back to AWS we're going to go to ec2 select on that and we are going to go to instances over here I'm going to hit launch instances and I'm going to call this pmore ec2 back end like so over here with the quick start selected we're going to select Amazon Linux AWS keep the Ami selected as you can see this is free tier eligible and speaking of free tier let's go to this page I'm going to write ec2 which is already shown up here we have 12 months free 750 hours if you calculate that it is a little over the number of hours that you would have in a month so you can do this for free for 12 months from when your account started note that this is different from always free tier so make sure you understand that this is 12 months free and also some of you guys have been concerned about ipv4 which is a address charge where they made a recent change in February about uh ipv4 getting charged like a specific type of IP addresses which is very common but you do get one month or 750 hours per month which is like one instance of ec2 of public ipv4 address which is what we're going to be using for this particular project and it'll all be free just make sure you don't run two ec2 instances because those hours do stack so just make sure if you're experimenting you just delete the ec2 if you've created another one and you just want one so going back to AWS we're going to go to key paare you're going to create a new key pair if you don't have it I already have it so just make sure you have that selected and you save it to a safe location now we go down over here we're going to look at our network settings and we're going to allow SSH traffic meaning that's how you connect to your instance you can allow your connectivity from there we're also going to connect HTTP as traffic and we're going to select HTTP we're just going to allow this access so we can test this make sure it works and we're going to hit create Security Group but before you do that make sure you select all three we're going to hit edit now we want we just want to make sure everything is in the right location so we have the VPC our VPC selected with our public subnet selected make sure it's not in a private or you will not have access and we want to autosign public IP now it says additional charges apply but remember I said you have one ipv4 address that you can run for an entire every month in the free tier account and just to show you right here AWS free tier now includes 750 hours so this is of what I'm referring to and then from here I'm going to change the security group name I'm going to call this pmore ec2 DSG and just FYI if we go back to our diagram we are basically creating this Security Group which can block access by default it's going to block everything that's why we needed to select the security groups that we had https HTTP so we can actually access our ec2 we're not doing an Enterprise level company so we just want everywhere access by default also I changed the pmc2 SG for the description up to you not not mandatory now we can scroll down we can ignore all of this keep everything free tier eligible and now we can actually hit launch instance when that's done we can go to instances and we're going to go over here and you'll see your instance running now the instance State might still be pending right away but I did wait so so you might see something different so going over here I'm going to select instance ID and now there is this button called connect once your ec2 is running you can go in here it says Port 22 is open to all ipv4 addresses but don't worry about that but now we can connect to our ec2 using ec2 instance connect connect so now we can hit connect over here now you'll see this page and what looks like basically a terminal this is basically us accessing this computer remotely so now we have access to another computer so you can do everything that you normally would on your own computer you can install node you can run a lot of commands you can run different programs you can do whatever you want with this ec2 instance all right so from here we're going to run a lot of commands but I have all those commands written down in a link in the description so look for something that talks about ec2 instructions and we're going to follow this and you can copy and paste some of those commands so we don't have to write some of those commands or manually basically because it'll take a while so first we're going to write pseudo su- this will give us Universal privilege and from here I'm going to copy the next line which is curl and this will basically install nbm onto our easy2 instance so I'm going to run those commands and then from here we're going to activate NVM by using this command dot tia. NVM NVM Dosh and then from here I'm going to do NVM install node NVM allows us to install node and manages our node packages quite easily and then just to double check we want to say node DV to check our version that we have it installed and an npm DV make sure you have those versions or you can use it doesn't matter which version as long as like 2022 something like that that should basically work out so we have node installed so basically this is basically installing node now we need to install git so we can actually pull down the GitHub repo that we created because we just want to take that GitHub repo install all the packages so we can run our server so first thing we're going to do is we're going to do pseudo yum update Dy make sure we update anything and then we're going to do pseudo yum install g-y so you're going to have all of those things happening and it's going to be installed let's just do git Das Das version just to double check we have git if you see that that means it's working and then from here you want to go to your repo once again to the project management repo we uploaded earlier make sure you don't do it with mine or you could probably if you want to do it with mine it's fine but do it with your project it'll make more sense so we're going to hit code we're going to select this https we're going to copy that URL to clipboard go back here I'm going to write get clone and I'm going to paste what I copied feed and hit enter and that's basically pulling our GitHub repo and from here I'm going to do LS just to check that we have that project file and I'm going to go into that so project CD space project management and then from here I'm going to do LS again to see that we have client and server like we expect we're going to go CD into our server and I'm going to run npmi in that server and there we go and we can just run npn run Dev just to double check that our server is working now we see that we have a command that's running just like we normally do but it's running on Port 3000 this is kind of a problem because if you go back to our instant details and we look at our security our security group will show you that we have inbound rules and what we are allowing is Port 80 443 and Port 22 but nowhere does it say Port 3000 so we actually need to change the environment variable to be 80 so I'm going to actually close this with command or control C and what I'm going to do is I'm going to create an environment variable and we do that by creating a folder or file we're going to do Echo and we're going to put Port equals 80 and we are going to do a greater than equal sign and then EnV greater than sign and that essentially will create an EnV file within our folder and then if we run npn run Dev now we should see that the server is now running on Port 80 part 80 all right so let's go instance details and now if you take a look at Auto assigned IP address this is the IP address that we are going to use to hit the AP or basically the endpoint so if I select open address we can see if we go over here we're going to see that it's going to go into an infinite Loop that usually means we just don't have access and that's because https is not going to allow us based because of the browser so we want to just for just this purpose we don't want the end result to be on https or HTTP but we're just going to remove the S over here and once we select HTTP and our public IP address we can see that we get this is Home Route and if you remember on our GitHub repo the default route is going to give us this value so that means we have now fully made our ECT ec2 work and it's we can connect to it via just a typical URL now we're going to do a few things more aside from this this but right now be happy that you're able to connect to it cuz it is a lot to just simply deploy a service and get it working this is actually a very good achievement that you have got to this point and if you go over here you can see that we have our logs showing that we connect connected to it before I had a few other ones where it just kind of errored out but this just means that we are getting our request everything is working as expected all right so now we have our ec2 server running but there's one last thing I want to do because if you take a look at the server if the ec2 does go down and sometimes these servers do go down in in production level applications you're going to have to find figure out a way to automatically restart the ec2 and restart this particular server and the way we do this is using something called pm2 pm2 is basically a production process manager with a built-in load balancer fancy name but basically allows us to just run our server as production level with nice monitoring processes and we can run it in clusters optionally if we need to but mainly for our case we just want the ec2 just always start up with the same server running as we would expect a server to do so we're going to go to our ec2 instance connect do contrl c to cancel out of it and we're going to start by doing npmi pm2 DG we're going to install pm2 now if you remember we installed or we created a file called ecosystem. config.js that is specifically for pm2 now if you want to take a look we can do LS and we see that we have ecosystem. config.js in our server directory if you ever wanted to modify it you can do you can use Nano ecosystem .c config.js to change it and it'll give you like this little editor and you can go down modify a few things we don't need to but if you do modify it you can use crl o to save and then CR X to exit after you've made your changes so right now we don't need to change anything so I'm going to hit contrl X to cancel out and then there is another command to make sure pm2 is running when it's Rebooted and that's the command we have in the little copy file that I've shown you or if you want you can just I'm going to paste it over here you can pause it and you can just write this out but this will allow us allow pm2 to restart whenever the server gets restart so we're going to hit enter and now with this we can now use pm2 commands so we're going to do pm2 start ecosystem. config JS that will start up this project management name project that you'll see over here and we can do pm2 status if we just want to see what is running or what is not so it just brings it basically up it's been up for 12 seconds it's online and a lot of information that is important for production level now we can do pm2 minut but basically it monitors so essentially it'll run your server and we can see that when it's running our server we can go back to this Home Route I'm going to refresh it and we can see that we're just logging it anytime I refresh it to go to this page it has very nice little metrics what's being used for production level is very nice and again we can do contrl c to exit just like we normally do but it's still running right now even though you don't see it it is still running so I can H pm to stop all if I want to stop them it still exist so you can also do delete all if you don't want it so now we don't have anything running  I'm just showing you different commands just in case you need to you messed up something and if you ever want to restart it you just do pm2 start ecosystem. config.js and I will run it again and so there we go this is pretty much our ec2 running nodejs running our server on it this is basically production level there's a lot more production things you can do like bundling your package packages making it more efficient having more production build production monitoring that kind of thing but we're not going to do that but this is just you know the base level of what you would do on a real application we will come back to this because we do need to connect to our database but first we want to create our RDS so we created our ec2 now we need to create our RDS the RDS is going to live in the private subnet we don't want wider internet access to be able to query your RDS that is not safe secure or you probably don't want that we also created two private subnets and that's required by RDS just in case one subnet goes down we have another Subnet in a different availability Zone to fall back to it is just required and we're also going to create the security group for this RDS to make sure it has access or ec2 has access to this RDS now going back to the free tier page we can go and search up RDS over here and we can see similar to ec2 we have 12 months free on the free account we have 750 hours of usage basically equivalent to one month of hour usage again be careful if you have two RDS running you will stack up the hours double time so just make sure you only have one at most all right so going back to our AWS dashboard we're going to go and search up for RDS this will be our database dashboard essentially where we can create our database so I'm going to go under databases and I'm going to hit create database now over here we can do easy create but the problem is we don't have a lot of flexibility that might cause us to get charged so we're going to select standard create under this I'm going to select postr SQL I'm going to leave all of these engine versions by default and I want to select free tier obviously scroll down and for this database identifier name I'm going to call this pm- RDS this one you cannot do underscore so it needs to be a hyphen now for the master username I'm going to keep it postgress but you can call it whatever you want but you do want to make sure you note this down this is going to be used in the database URL if you remember we need to have that database URL with the new configurations for this database URL and master usern name is one of those now for the master password I'm just going to call this hello my friend 2 3 4 You can call it whatever you want but just make sure you know these values and we're going to keep it like that and we're going to keep it self-managed over here as well we're going to scroll down keep this the same now under storage we're going to have all of this default but this storage autoscaling we're going to open this up and we're going to disable it just so we don't get charged accidentally if it ever scales it probably won't but just in case we're going to leave this don't connect to an ec2 compute resource we're going to make sure our VPC is connected and we want to have create new database subnet group now if you didn't create two private subnet groups this wouldn't be available so that is exactly why I needed to create two groups and make sure this public ACC access is no otherwise you're going to get charged you want to make sure this is set to no because we that would mean we would have two public IP addresses that means you get charged for that so you need to be careful about that one over here we don't want to choose existing VPC security groups we want to hit create new and we're going to call this PM RDS DSG and again this is the security group that we are talking about over here that is this guy the availability Zone we can just choose the first one I believe it doesn't matter we don't need to worry about any of these settings you don't need a tag we can keep the password authentication by default we can turn off performance insights just to make sure we don't get charged for anything keep everything the same over here and for additional configuration for the additional or initial database name I'm just going to call this project management this is another name value that we're going to be using so you can keep that as a value that we need for our database and over here with the enable automatic backups be very careful we want to disable this cuz at some point I got charged for a snapshot of this automated backup I don't know how it went over the free tier but it somehow did so disable that we're also going to disable encryption just in case and we can just leave everything as B and it says estimated monthly cost but I can tell you you don't get charged if you follow the free tier pricing that we mentioned so this is only if you are past the 12 months so we should be free if you're doing this correctly so over here we are doing create database and maybe you get some suggest add-ons don't do any of that we are going to be creating our database now so once that's created you'll see that the stat is available but before we do anything where we connect our ec2 to our database it's not going to work and that's because our security groups have been created for both the RDS and ec2 but we have not allow them to talk to each other so I'm going to go to VPC actually we can just go to PM RDS we can click that and what you can see is there's a lot of information what you'll see over here is VPC Security Group I'm going to select this this will take us to the security group associated with our RDS I'm going to go in here select the security group ID and in here we can select edit inbound rules and then from here I'm going to add a separate rule I'm going to select postgressql and the source is going to be custom and over here we want it specifically from the ec2 so right now we're in we're this particular Security Group we want it from ec2 Security Group basically this is allowing any inbound traffic specifically from this Security Group which is part of the ec2 so I'm going to hit save rule so now we allow the RDS to accept traffic from the ec2 but now we need to go to ec2 to set outbound rules to our security uh RDS Security Group so I'm going to go to instances select over here ec2 backend and I'm going to select security select the security group select outbound rules and right now it's already set to all traffic so this is probably unnecessary but just FYI you can just add a rule do postgressql once again do custom and we are going to select rdsg should be RDS SG but that is the security group we are going to allow outbound traffic so this step is probably not necessary because we already had it all traffic but just in case all right so with that now we can actually go back to our ec2 instance connect and over here just in case it's everything is still running I'm going to do pm2 delete all so in here I'm going to do Nano Dov so we're going to be able to modify our environment variable and if you remember correctly going back to our codebase going going to ourv folder or file we have database URL and we have the username the password the endpoint port and the database name name so we need exactly just that but connecting to our RDS database instead so I'm just going to copy this I'm going to be writing this over here now I told you to note the names that we had so postgress was the master username hello my friend was the password that I had for this particular RDS the database endpoint is if you go back we go to security group or basically our AWS we want to go to our RDS once again go to our databases select PM RDS and it has most of the information that we need so this endpoint is the endpoint we're going to be using we're going to copy that paste it over here instead of Local Host this port is 5432 unless you customize it if you followed my tutorial then this should be 5432 and this database name is project management you can check what it is if you go back over here database name project management which is what we said earlier and by the way Master username is over here master password you can't see it so I told you to note those down so we can paste it into this particular URL so now this is the URL that we need to connect to our database so we're going to copy this go back to our ec2 instance connect and we're already modifying our environment variables so on the next line I'm going to write database URL is equal to string paste all of that and I'm going to hit crl o and contrl c and crl x and we want to save it and make sure you hit enter after you do control o to save it now we're almost there there's a few things we need to do which because we're using Prisma we want to do npx Prisma generate this is like we did before and we're going to do npx Prisma migrate Dev D- name in it and finally I'm going to run npm run seed to seed R RDS database and if you see all this I I believe I modified the seed and if you see all this it should be working I'm not exactly sure why it's console logging multiple times all right chances are you probably won't see this CU I fixed it for me I have this but it should end up with the same result that you guys will have anyways we have our seated data so now we can do pm2 start ecosystem. config.js now we're running our instance now let's double check if it's actually working so I'm going to go back to database or AWS go to ec2 go to our instances select the instance that we want and over here we have open address and if you remember we actually need to get rid of the https and we have our home route and now we want to check if we have data in our database by doing SL projects and perfect I have a pretty print extension that will automatically align this as you can see we are now fetching our 10 projects and we can do this for every route if you got this far and it's working for you congratulations this is a very difficult task to be honest with all the networking and all those potential issues you might come into this can be extremely difficult for people who are new to AWS all right so now we have our ec2 talking to our RDS they are able to communicate with each other perfectly we have all the data seated into our RDS perfectly I just want to cover one last thing this is just we're not going to be building it but there is a possible way to create a VPC na Gateway this is just another way if you wanted the RDS for example or anything this private subnet to be able to talk to the internet allow Public Access for any of the services within private subnet you would create a natat Gateway but we're not going to be doing that cuz right now we have access to our RDS we don't want to expose that so we aren't going to pay attention now the next thing we're going to do is going to be using amplify so amplify is a service on AWS that you can host basically nextjs applications or front end applications it's similar to where you host your app on verell or  Cloud Pages which is like kind of like a free service that you can upload your front end basically although amplify is probably not as feature as versell but we're just going to keep this in AWS and there is a production way to upload nextjs we're not going to get into that cuz that's very complicated but we're going to keep this with amplifi so let's get to it so we're going to go back to AWS I'm going to write amplify select over here and over here if you create anything we can see this page and we're just going to hit create new app and if you take a look over here AWS amplify hosting we have 15 GB serve per month and it's part of our 12 months free tier so it's pretty easy it's free you don't have to worry about it so we're going to go back to AWS go over here and we can see that we have start building with amplify now you want to select GitHub and select next now you might see a different page cuz it's going to ask you to connect to your GitHub so make sure you connect to your GitHub right now I've only have my old one my previous project Inventory management selected but I'm going to hit update GitHub permissions now over here you're going to see you're going to go through whatever settings to log into your GitHub select authentication whatever and over here you want to do only select repositories I'm going to select project manag man agement over here you don't need Inventory management that's from a previous project so I'm going to hit save and once you do that you can go back to AWS and you should be able to see the repo that you have I'm going to select project management and I'm going to click my app is a monor repo because we have client and server in the same repo and what you want is monor repo root directory and what we want to write here is going to be client so it starts from the next JS app not the server so we're going to hit next if you do it correctly it should autodetect your framework you have npm run build. nextt which should be perfectly fine we're going to keep all of this default and we're going to hit advaned settings and we need to set up configurations now over here if I had new we had next public API base base URL these are environment variables if you remember we go back to our client directory env. example we have this but the base URL is going to be different obviously because this is going to be the URL to our backend so essentially if I go back this should technically be right here which HTTP like this paste it over here that should be our base URL this is not actually going to work unfortunately but I will show you why but let's keep it like this for now and we're going to hit next once we have that make sure everything is correct and we're going to hit save and deploy now once it's finished it's going to say deployed over here and then we can hit visit deployed URL so now if you take a look we have our website we can see the front end and everything here but we are getting error fetching data we are not able to access our backend from here if you go back go to Network tab over here refresh this page we're going to select uh fetch if you take a look over here you're going to get a status that says blocked mixed content what that means is that amplify is being hosted on an https but as you remember our back end is HTTP the browser rejects any type of calls where you're going from htps to http it's not going to allow that it's a security issue for them so what we need to do is set up our back end to be https there's a complicated way of doing it with certificates and doing all of that we're not going to do that we're instead going to use API Gateway to set up our backend and that will automatically allow us to use HTP https so that we can connect to it so if you go to our diagram once more instead of the Amplified XJ is trying to talk to the ec2 via the internet gateway we are going to use an API Gateway to connect to our ec2 and a lot of times when you have a backend you provide access to that backend using an API Gateway so before we create our API Gateway I'm  going to once again show you the free tier so I'm going to do API Gateway write that and see this is 12 months free Amazon API Gateway 1 million API calls re save per month I'm pretty sure you're not going to overed that so this should be fine so if we go back to our AWS dashboard we're going to go to API Gateway over here select that so you're going to be greeted with this page we're going to go down and we're going to see we have multiple options last tutorial I used HTTP API but since we're using Cognito we want to select rest API so I'm going to click that one and then click build I'm going to create new API I'm going to call this PM api-gateway keep this Regional keep it everything the same and we're just going to hit create API now there are two ways to handle the apis over here we can create a resource for every endpoint that we have in our backend so meaning if we go back to our page we have routes we have project search routes task routes we can create manually every single one for this but it's a little bit tedious so there is an alternative way using the proxy integration method which allows us to default to express and express will handle the routing for us so we can do that via create resource then from here I'm going to select proxy resource and I'm going to make sure the resource name is what we write over here which is Curly braces proxy plus curly braces like that it needs to be named that or else it won't work and then we have cores we should select that so we're going to hit create resource so now we have this proxy route we also need to set up an integration for this any method so we're going to hit edit integration over here and we are going to select HTTP and then from here we're going to select HTTP proxy integration we're going to select any and we want to get back our URL once again we're just going to copy this paste it over here and what we want to also add is proxy so we can forward this to the rest of our end points once we have that we're going to hit save and we need to do deploy API so over here I'm going to hit New Stage write prod and hit deploy and once we have that we can copy this create a new tab paste it over here and you can see we have a forbidden but our endpoints will be working so if I go to projects and you select now you can see we have our projects list so perfect so this is how we create our endpoint on a https instead of HTTP so now our front end can call our backend so right now our front end is not connected to our back end it's still connected to this URL right here so we are going to copy this link and we are going to go back to amplify we're going to go to view app actually hosting we're going to go to environment variables and we're going to hit manage variables we are going to go over here to the values paste and replace what we already had and we're going to hit save now if you refresh the page you'll realize it's still set to the old environment variables so we kind of need a way to redeploy it so so over here I'm going to select Master right here it's going to take you to this page and I'm going to hit redeploy this version and we're just going to have to wait for it to redeploy all right once that's redeployed now we can click on our domain and now you can see we have our data every endpoint is going we're going to open up our tab we're just going to refresh it make sure it is hitting the right end point as you can see we are getting back our perfect data so I'm going to close this we can see we have dark mode we have all our pages and it's blazing fast now I guess I missed uh styling this style bar but I believe it's in the final build so you can go to the global. CSS file and just adjust that so this will look a little more integrated because this scroll bar is kind of nasty looking but anyways we have our project fully deployed and now we can see our backend information on our front end everything is properly connected now right now you can see the images we have the image over here we have all of the image different like the  user images and the task images so now typically you would store these images into S3 right now we have it in public which is able to access but if have a lot of images and you want the images to be stored safely or in the proper location you would take these images put it into S3 we're going to do that you don't have to do this but we're just going to do this just to show you so I'm going to go to AWS once again go to S3 go over here and these are S3 buckets S3 is pretty simple again it is free 12 months free right here with 5 gigabytes and we can go back to our S3 and we can create a bucket a bucket is just a location basically a folder where you put all your images I'm just going to call this pms3 images like that now acl's right here is a little bit different from knackles so acl's is specific for S3 and it's another permission thing but we keep it disabled ACL is kind of more deprecated so right here we also have block public access block Public Access so if you untick it we're going to be able to access the S3 so by default it kind of shows you you want to make sure you hit the I acknowledge and we're just going to keep everything else the same and we're going to hit create bucket and it seems like we don't we aren't put able to add underscore like that so we're just going to hit create bucket like this so now we have this bucket over here we are now going to select this and now we can just upload like we do for any other app so I'm going to drag this so you can see what I'm doing this is our public folder with all our image files we're just going to select all of them drag it over here into this bucket and we're just going to hit upload this's a 16 megab so no worries on the size once that's finished we're going to go hit close and we need to do one more thing with permissions we need to create a bucket policy so in here we need a bucket policy that allows everyone access so in our policy we're going to be writing like a small object if you're in AWS you end up writing a lot of these like policy kind of things so in here we're going to do version it's going to be capitalized and we're going to put 2 12-10-17 WR comma we're going to put statement colon uh actually this should be an array with an object inside like so and we are going to do Sid colon public read get object comma we're going to do effect to be allow comma principle like so colon and we're going to put a star so we allow everything and then from here I'm going to do action colon S3 colon get object comma and finally resource is going to be the name so right here we're just going to copy this bucket Arn name we're going to put it in a string and I'm going to put slash star so this gives all access now these policies are just very common in AWS this is how it allows things how allow access to different Services via these Json objects so we're going to have that we're going to save the changes and it should be ready to go to be able to be accessed so if I go to objects over here and and I click open Link in new tab and I click object URL and I select it we can see that we have access to this particular image so perfect we have public access for these images it doesn't really matter cuz these images aren't very like heavy so you can just access it freely it's not a big deal it is a big deal if like the image is secure but right now we don't have to worry about that so we have these images accessible but we want to be able to access them access them from our codebase so we're going to go back to our code base go into a file called next. config MJS so this is just so we can allow access from AWS for our images so we just need to set a configuration for this so inside here I'm going to put images curly braces I'm going to do remote patterns colon put in Array and inside here is going to be an object we're going to set the protocol to be https comma the host name is going to be the host URL and we can actually grab it over here on one of our images so if you take a look let's just copy let's just copy the URL but we actually don't need most of this so we're just going to get rid of the everything from the slash upwards and everything from the slash after so we're going to keep that as the host name the port is going to be empty string path name should be colon slashstar star so by doing this now we can access our images it prevents like basically this is more of a security for nextjs it doesn't allow you to add any kind of images unless this is allowed right here and now from here we need to adjust the images to the correct URL so I'm going to copy this and we are going to have like a separate locations for where we have our images so actually let's go over here I'm going to do find in folder and I'm going to put slash Capital image so these are all the locations where we have our images so right now we have a file URL for task so essentially we just need to add this endpoint and we're going to do https col slash and that should essentially grab the image for our files so I'm going to save that so that's all we have to do for this URL we're going to select the next one as you can see I'm using the search right here so this shows you where you have the URLs we're going to do the same thing paste it like that save that and then go down one more and we're going to have that URL now we're going to go next in this list in the custom toolbar for the users page and just do the same exact thing over here you can probably just search it up but I prefer to do this a little bit manually so can make sure we get the URLs correct so I'm going down every every single one make sure we prefix every single URL with the URL we just created so we're going to save all of those and of course we're going to have to do get add get commit redirect images to S3 and we're going to do get push origin master and just to note with things like verell and amplify that we just uploaded once we push it it onto GitHub it's going to redeploy our application and we just have to wait for that to happen and so if I go to amplify now go to our app we can see it is deploying at the moment now once it's deployed we can do visit deployed URL and we can go back and see click projects see if our image is there our image is still there and just to double check that it's taking the right one I'm going to click Network and make sure I click image and refresh the page now you'll know if it's working when you go over here you have image and you can see the URL even though it's prefixed with this next image we have https and we have pms3 image like so so basically it is getting it from the right location so now we have our images redirected from S3 so everything is working we are getting so far we just have one last step which is authentication which is going to be kind of difficult but I'll show you the easy way to do Cognito authentication so with that we have our S3 basically set up and now for the last part is going to be AWS Cognito now when it comes to Cognito we  have a free tier which is always free for this so you have 50,000 monthly active users so most likely you won't exceed this problem so I was urgently deciding if I should add the AWS Cognito at the beginning or near the end like I'm doing right now but I put it at the end so it's part of aops so we kind of see a more integrated view of Cognito and we're not just adding authentication throughout the build of the application but just so we can see everything I'm doing everything with cognito in this part of this application so from here we're going to go to Cognito and inside of Cognito we're greeted with this page we are going to create user pool now to understand Cognito Cognito is a identity access management service so basically it saves all the information about the user in its own data pool so it has basically it's like its own data base and it authenticates and does authorization it does all of that so we're not saving the users sensitive information we will save users alternate data but we will save all the sensitive information like the email password into Cognito itself and you do this by creating user pools and inside our user pools we're going to set the signin options to be username and email you could set phone number but we're not going to have that and we're just going to click these two buttons allow users to sign in with the preferred username and then make username case sensitive so it's up to you to decide if you want to do that so we're going to hit next and here we're going to set the Cognito default so the password is going to be pretty extensive one number one special character one uppercase one lowercase you can set it to custom and change it but we're just going to keep it like this we're not going to do multiactor authentication to keep it simpler so I'm going to say no MFA I'm going to keep everything default so email only for the delivery method for user account recovery message you know when you forgot your password this is how you can send the email for Recovery figuring out the user account for them we're going to hit next so from here we're going to enable self-registration so that the user can sign up using like a UI and below this we're going to keep these two to be default allow Cognito to automatically send messages to verify and confirm and we're going to send email message to verify email address we're going to keep those default and we're going to keep going down and we're going to see required attributes we just have email but we're going to leave this blank we don't need anything else and for our developer purposes we're going to do send email with Cognito just to make it simpler you can do sces to actually send real emails but then you have to deal with all the actual email configurations but we're not going to do that to make it easier so we're just going to have from email address we're going to leave this to be default and over here I'm going to call this pm- project management user pool like that we're not going to use the Cognito hosted UI which is kind of like a like an app builder like a visual app builder but we're going to be building our own UI using aws's toolkit we're going to keep this to be public clients so basically an app client is something that needs to be created for our user pool so we can do authenticated API operations and over here I'm going to call this project management client like so and we're going to hit don't generate a client secret and everything else we're just going to leave default and I'm going to hit next and over here we're just going to review and create just check anything you want to change if you want to and we're going to go all the way down and we're going to create user pool and as you can see we have our user pool we can go in and we can see users we can create our user directly but generally we want the user to be able to sign up so we are going to create some code in our application to add all of this functionality so the first thing we want to do is actually create up create our signup form so I'm going to go to our app and we're going to start by going to app go into dashboard wrapper now inside this dashboard wrapper we're going to go to the bottom component and we're going to write off provider like so and we're going to wrap dashboard layout around it so that anytime we are going into our dashboard layout basically our entire application we are wrapping our authentication so from here I'm going to import o provider fromo provider we have not created this component just yet so in our app directory I'm going to create a new file I'm going to call this o provider. TSX and in here I'm going to just do TS RFC so we have a template I'm going to capitalize off provider like so and what we're going to do is we're going to be using an SDK AWS has their own SDK but there is something called amplify now this is not to be confused with the amplify service that we just used so if I go back to AWS I'm going to open up a new tab this service right here is more of a hosting application or hosting service but if you go over here there is an amplify SDK basically it's an easier way to write different things in AWS it's built on top of aws's SDK so it is a little confusing AWS has something called SDK which allows you to connect to your services and applications inside your code so if you want to write code that connects to your ads Services you would use the SDK but they also created amplifi toolkit which is more of like a library so it's like a package basically that you can use that will simplify even further and make SDK easier to use it's built on top of SDK so it's using SDK on top of it but if you take a look this particular page which is a link in the description this is the component that we're using in react it provides a component that we can use to sign in you have create account and sign in and this is exactly what we're going to create and it's going to make it super easy to do so so we're going to go back to our code and we're going to be installing two different packages it's going to be npmi aws-amplify and at aws-amplify SL ui- react and once that's installed we're going to change change a few things we're going to get rid of props cuz we don't need any but over here I'm just going to pass in children colon I'm just going to say any I know not best practice but we're just going to keep it like this for now because I want to focus on the authentication I'm going to add a class name of margin top of five so we just get some spacing on the top and inside of here we are going to grab authenticator and this is going to be imported from authenticator from AWS amplify like so and actually that's not correct a aws-amplify ui- react so that is correct right here so this is a basic component that we're using to wrap our children in so inside of here we are going to do these curly braces there's three curly braces with the user close two of those and put an arrow function and this allows us to basically use a user in our component so we're going to do user question mark and we are going to say if the user exists we're going to pass in children so basically what this is saying is we're going to render out the entire component we're rendering out the entire UI if the user already exists but if the user doesn't exist meaning they're not signed in we are going to do we're just going to write div we're going to say H1 tag I messed this up a little bit and I'm just going to write please sign in below colon like so and I'm going to make sure I get rid of one of these and this is not three curly braces this should be one PRS right there we're going to save it and we're just going to say any for now so this is basically all it is needed for our application to be running authentication we're going to have a user and we're going to do please sign in below there's also one thing we do need to configure which is is the user pool ID and the user client ID so what we're going to do is we're going to grab amplify and we are going to import amplify from aws-amplify like so and this is what we are going to use we're going to use configure and we're going to pass in an object we're going to say off colon curly braces cognito colon curly braces and inside here I'm going to write userpool ID and we are going to pass in process. env. nextore public Cognito user pool ID so this is an environment variable that we are going to configure and same thing over here we're going to say user pool client ID colon we're going to grab the process. n v paste it over here but we're going to change this to be Cognito userpool client uncore ID all right and by the way I did make a mistake I don't know if you caught on but right here I was in the wrong directory we need to be in the client directory so I'm going to delete all of this go into our run directory you're going to do CD client and inside our client directory I'm going to run npmi AWS amplify so make sure it is in the right directory that's why we're getting all these typescript errors so we want to fix that and over here we're just going to do empty string like this just so typescript doesn't yell at us but we're going to set some environment variables I'm going to all this next underscore Cognito Cognito userpool ID we're going to put this under local we're going to set that that equal to a string and we're going to go back to off provider copy this and we're going to paste this over here as a string and the way we get these userpool ID userpool client ID is we can now go back to Cognito go over here to our user pool we can grab the userpool ID over here copy copy that ID paste it save it and then go to client ID and the way we get our client ID is we go to app integration go scroll down all the way down and you're going to see app Client List and the client ID is exactly right here we're just going to copy that and paste it and now that should relieve this issue but we also are going to have to add this to our environment variables but we'll do that in just a second so let me just fix this so we have our linting not yelling at us we can save it and what we can do is I want to just run this locally we're going to run this locally and you can see that our hosted UI will basically work so I'm going to go back for this one go into server I'm going to make sure I use the right node you don't have to do this part and then I'm going to do npm runev and I'm going to do the same thing for client and I'm going to do npm runev I'm going to open up a new tab I'm going to go to Local Host and as you can see we have our username and password it's not very styled and that's because we actually need to import AWS Styles so I'm going to do import at aws-amplify UI react SL styles.css once we save that we can see we have our sign in and creating an account so this should be pretty nice so I'm going to just do for my username dummy user let's call that that and the password I'm just going to do hello my friend 2 3 4 so we have pretty strict requirements for our password so you're going to have to make sure we do that correctly so if I hit create account we realize attribute emails is required so we don't have emails over here which is a problem so if you go to the docs we have configure amplify categories so we can actually go over here and see that we can add our own custom form Fields actually yeah it's over here in the customization section I was looking at the wrong thing so over here you can see we have our own form Fields like this so so we just use that and then we pass the form Fields into our authenticator so we're going to do just that so I'm going to scroll back go to over here under configure I'm going to do form Fields like so put an object and I'm going to do sign up this will configure our Custom Custom inputs for authenticator cuz by default we had username and password but we need email as well so I'm going to do username colon I'm going to do order which is one which means it's just placed at the top we're going to have a placeholder we're going to do choose a username so that's just in the placeholder input we're going to set the label to be username we're going to set input props for required to be true because we need we definitely want someone to have the username for sure so I'm going to just copy this three times down like so one more time save it but we're going to obviously change this we're going to change this to email and then we're going to write enter your email address change the label to email and we are going to say type to be email and what's really cool is that this is going going to handle all your input validation all of it for you so there's not much configuration we have to do we don't have to do the validation which is really generally annoying to set up but here we can just do enter your password the label should be password capitalized type should be password no space in front I'm going to do comma right here and then finally confirm password will be our last one and this needs to have be underscore like that and the order should be four because it needs to be at the bottom I'm going to say confirm messed that up confirm your password this should be confirm password and the type should be password of course going to hit comma and over here in the authentic indicator we have a property called form fields and that's where we pass in the object we just created so if you save it go back to our Local Host refresh our page takes a minute and then if we go to create account we can see now it's changed and we have our email so I'm going to do dummy user like I did before I'm going to set the email to be just some dummy mail@gmail.com password is going to be hello my friend 1 2 3 4 exclamation paste it over here and we're going to hit create account we don't need to save it and now we got verification for our email now if you take a look I had this email I can just copy and paste this go back to our application confirm code and we are now fully logged in now we don't have our images because remember we adjusted the code so it's not going to be able to see a few things and we're not able to see this because we changed the URL to our actual database so it's not going to work but I just wanted to show that we can log in in and now one last thing I want to show you if I go back to our Cognito page on AWS we refresh it go back to users over here you can see our username with email address is there we have confirmed status we have status email verified everything is already set up normally this would be such a huge hassle but having this Amplified toolkit made it l easier it's just the only thing about AWS is it has everything it's just so hard sometimes with the documentation because it's just all over the place and they update it all right and now what we want to do is go back we have our environment variables we're just going to add this environment variables to our back end I'm going to close all of this out I'm going to go to let's just close one of these terminals go to our Parent Directory get add get commit added sign in sign up form and we're going to do get push origin Master now the only thing is if we get to next public Cognito user pool ID we want to add this to our amplify page because amplify is the front end so I'm going to go back to AWS hit view app I'm going to click hosting go to environment variables and we're going to hit manage variables going to hit add new paste the Cognito user pool ID I just moved it over here so it's easier to write all of this I'm going to paste the string in here for the Cognito user pool ID and then I'm going to add another one con nether user client ID paste it over here this string needs to be paste it over here and then I'm going to save it and of course it's probably not going to work cuz it's not updated this is going to be deploying on the old version so we don't have to worry about that we're just going to worry about that once we finish our completed application so that is a sign in sign up form but there is a number of other things that we need to do so while we have sign in and sign up there's a few issues that we need to address so let's take a look at this diagram so we have a Cognito user pool and this is a this is what's known as identity access management if you understand authentication this is a very important term now when you sign up we're going to sign up into cogniter user pool so that's the information that we're gra grabbing and that's going to save their sensitive user information their username password email so all of that good stuff but the problem is we also have our own RDS database in our own RDS database we have our own tables that are related to the users that have been signed in and this includes non-sensitive information and some RDS tables like their relationships so for example if we go back to our user diagram or like our data model diagram our user is connected to a lot of other things in our databases like what project they're on what team they're on what comments they've written what attachments so we actually need a way to connect the users that signed in to our user data model so we can do that via the Cognito ID so over here you can see that we have a property Cognito ID however to connect this when the user signs up we actually need to trigger some kind of Lambda for our backend that will create the user into our RDS databases so basically anytime a user signs up in our Cognito user pool we're going to trigger our backend to create our user in our own RDS database so we can save information about them that is not about sensitive user information or the fact that they need other relations to other tables so that is problem number one and let's give that a try it's going to be a little tricky to do this just give it a forewarning so first off we're going to go to our code base and we are actually going to need another route now typically I would create this in user routes but I'm going to put it over here to make it a little bit easier I'm just going to say app. poost in here I'm going to write SLC create-user SL comma asnc we're going to do Rec Callin request and we want the request coming from Express so I'm going to say comma request response so we'll have res with response over here and we're going to have an arrow function and inside of this we're just going to go to let's say user routes or user controller and I'm just going to copy all of this right here with the exception of request response I'm going to just paste this move the import above here and like I said you probably want to put this in the user controller but we're just going to keep it easy keep it like this and what I want to do is move the Prisma equals new Prisma client we're going to move that up right above the create user I'm going to get rid of everything in here but we're just going to keep the catch block like so and I want the tri block as well what I need to do is grab a number of values so we are going to be sending username Cognito ID profile picture URL which is equal to i1 jpeg comma team ID I'll explain shortly what these are doing and we're going to grab it from the rec. body like so and over here under users I'm going to replace this call this new user and we're going to do Prisma do user. create and inside here we're going to have curly braces with data call in username Cognito ID profile picture URL and team ID and over here this is going to be an object instead and this should be message it's going to be user created successfully like so call in like that remove that Curly braces and we have a curly braces over here and we save it and you know what let's actually move this to our user controller instead so we don't have any problems so I'm actually going to just cut this out go to user controller paste it over here and I'm going to just say export const move all of this export const post user is equal to async like that get rid of this ending friends and go to user routes and we're just going to write router. poost slash and then we are just going to do Post user we're going to import that from our user controller to make it easy go to index remove all of this like so and we're going to remove Prisma client as well so what we're essentially doing is we're creating a separate route and like I mentioned in our diagram over here we are basically creating an endpoint that will be triggered by our Cognito user pool when they sign up it's going to trigger our backend trigger that endpoint that we just created to create our user in our RDS database now that trigger comes with all this information and we're going to be setting this up for our user so we have our backend created we're just going to do go to our server and we're going to make sure we just do actually go into the Parent Directory we're going to do get add. gomit Das create user route post trigger and we're going to push this up so we have it in our full repo and we're now going to go back to AWS and what we need to do is create a Lambda trigger so basically we're going to create a Lambda function that includes a function that will be triggered once the user signs up as you can see we have a Lambda trigger over here but we don't have our Lambda created so I'm going to go to our service Lambda and we are going to create a function and over here we're going to do author from scratch we're going to do PM underscore Lambda Das trigger like so keep the runtime all default and we're just going to hit create function so these Lambda functions are just functions that we can run at any given time we can even put our API back in endpoints as well we can have we could have put Express on there but I did like I mentioned before I had some issues with Prisma but you can just create your function over here and in here all we're going to do is create a function that will take what we get from Cognito grab that information basically most importantly sending the Cognito ID and we're going to just make an API request to our backend to that endpoint route that we just created that's all we're going to be doing and once I show you how we're doing all this it's going to make a lot more sense so I'm going to do const https s is equal to require colon or string https like this semicolon and over here I'm just going to remove all of this because we don't need that I'm going to do const Post data is equal to json.stringify so we're just grabbing information that we're getting from Cognito and the username is going to be event do request. user attributes and this is coming from Cognito and it's called preferred uncore username so this is the username we're sending it back to our back end and we're just going to say if it does that doesn't exist we are going to say event. username capitalized comma and over here we're going to set Cognito ID which is the most important thing and that comes from event do username like so and then profile picture URL so the front end or the signup page does not have a profile picture that we're adding but we're just going to set this i1 to jpeg like this and then team ID we're just going to set it to default team ID of one so by default we don't assign a team they are just on the first team that's said so and over here we are going to make our API request I know we're not using fetch because I don't want to download the fetch thing it's a little bit easier not to do so so we're just going to create an options object so the host name is going to be the URL for my for our ec2 instance so again if we go back to AWS go to ec2 and actually sorry not ec2 API Gateway is what we're looking for click our API Gateway go to the any route and go to stages select the invoke URL and then we can go back over here the host name should be everything without the https so everything before the double slash and then remove the SLR at the end we're going to hit comma Port is going to be 443 comma path is going to be SLC create-user comma method is going to be post headers like this is going to be content cap capital content-type Colin application Json comma content-length colon buffer. byte length we're going we're going to do Post data so basically what we just wrote over here and then finally we are just going to return to make our API call we're going to use promise we're going to be a little bit old school with this because we kind of have to I'm going to say resolve reject like so put an arrow function with curly braces and I'm going to do const Rec is equal to https request so if you don't know this is a oldfashioned way to make an API call typically you would use fetch or axios but because it doesn't have that access we're just going to use https request and over here I'm going to do res. set encoding UTF 8 like so semicolon we're going to let response body be an empty string we kind of need a response body because it's a post request and we're going to do res. on we're going to set data comma with chunk response body plus equals chunk like this I know it's kind of a pain res. on we're going to do end comma Arrow function with resolve with the response body like so semicolon and right below our recre we're going to do w.on with error comma Arrow function with error we're going to do reject we're going to pass in our error object and then I'm going to say rec. write with post data and then rec. end like so and one last thing is we actually need to change this to for from require to import statement so I'm going to do import https from node colon https so I just kind of made a mistake it should be import and over here we're going to return the event otherwise not going to work this is part of Lambda and the triggers that's necessary I'm going to save that and then I'm going to hit deploy and we have our Lambda function running and again just real quick free tier Lambda is always free 1 million free request so you're free to use it all right so we created this Lambda trigger this will make an API call to our back end but we also need to create the Lambda trigger directly onto Cognito so over here this is my user pull I clicked on user pull properties and we're just going to hit add Lambda trigger and over here I want to select signup and you want to select post confirmation trigger and what we want to do is assign the Lambda trigger that we created and we're going to hit add Lambda trigger so we basically have this mostly set up we would typically push our changes to GitHub which we did but we also need to pull it into our ec2 instance because the ec2 instance has an outdated version of our code base but before we do that I want to do some other things because I don't want to constantly just pull it from the ec2 we're just going to do a number of changes before that happens so going back to our diagram we basically created our trigger to create a user into our database but the next step is we're going to go to is fetching users so essentially like before where we signed up we created a trigger to create the data now we want to when we grab our user information we want to also grab both the Cognito user information and our RDS inform information so when we trigger a API call to get our user information we're going to go to our Cognito user pool and this will retrieve the information like Cognito ID jot access token refresh token userpool data except the password you can never grab the password though so that gives us information but we don't get information from our RDS database so we need to call our backend with Cognito ID that we grab from Cognito user pool call our backend which will fetch the relevant data from our RDS database then finally we're going to get our user table data as well so we're going to combine both of those grab all that information together and the way we do this we go back to our code base and we're going to create another route for user controller so we have post user we had grab get users list but we don't have one that gets a specific user based on a Cognito ID so we're just going to above here right let me remove this remove this I'm going to say export const I'm not going to just copy paste all of this remove the plural of the get user and inside of here we're going to grab Cognito ID and that's going to be part of rec. prams like so and instead of find many we're going to do find unique so we're going to grab a singular cognito ID over here so where curly braces we're going to do Cognito ID grab the Cognito ID that we retrieved from the API request and inside here we're just going to say if user exist we're just going to say res. Json user like so else we're going to give and you know what let's just not do that for now let's just keep it simple we're just going to say res. Json and we are going to grab our singular user to the front end and we're just going to remove retrieve users error retrieving user so this will be our singular get user with Cognito ID then we need to go to user routes once again and we're just going to do router doget but this one is slon Cognito ID because we need to pass in cognito ID to grab this backend so get user so we're going to grab that from our user controller and I did miss a comma like that now with this we can actually create something on the front end that will grab the users authentication information so I'm going to close all of this out go to our front end now I can go to state go to API and we are going to create a separate endpoint so again this is a way to grab information from Cognito we can get the jot tokens the access tokens every information from Cognito by using this endpoint and we do this we're just going to call this get Au user so this is a separate API query build query PRS colon or curly braces and I'm going to write query FN colon async and I'm going to put underscore because we're not going to use that one underscore query API uncore extra options comma Fetch with base query which is BQ like so and an arrow function like this I'm going to put a comma over here and inside this query function I'm going to do a tri block actually let's do a try block we're going to do try and then catch over here we're going to say error call in any curly braces like that so inside our Tri block we're going to do const user and we are going to do await get current user and that actually comes from AWS amplify off so this is a function that we can grab from AWS amplify this allows us to fetch the user information from our Cognito once they've logged in and then I'm going to do con session we can do await fetch off section off session so this gives us even more information but this is for other parts of it so this is how you can grab it from Cognito and it provides easy ways to do so so that's all you have to do to grab their information and we're just going to throw an error just in case if session doesn't exist we're just going to do throw new error like so and we're going to say no session found and from here we're just going to get some information User sub this is basically the Cognito ID if we ever need the Cognito ID we can grab it from session I know it's called user sub but that's just the weird naming that they have and then the access token is for a authentication purposes we can say session. tokens double question mark empty object and that gives us the access token now that we have this this is all the information that we can basically return but let's say we want information from our own database that's where we are going to do const user details response we're going to do await Fetch with base query so if we want to make multiple API requests so this is the first API request to grab the information from Cognito but if we wanted to make an API request in sequentially after this we want to grab our information from our own databases from the endpoint that we just created we can use Fetch with base query like so and we just want to put users SL user sub like so as you you can see remember we need the Cognito ID to grab our user information that's why this is happening sequentially so it's a little bit of a detailed you know complicated scenario we have a sequential API call and it needs to happen right after we get the information that's exactly why we need to set this fancy little you know function and over here I'm going to do user details response data as user so this is just the typing we're just grabbing the response that we get from that API call putting it as user details and we are just going to return data colon in curly braces this is the information that we are just going to be using from our Redux toolkit so user user sub and user details we can use all of these information for our fr and over here I could do return with error colon error Dot message and we can say could not fetch user data and this alone gives us information that we need and we don't I just wanted to show you how you can grab the access token if you want to use that but this contains a lot of information that we basically need for our user and we are going to be using this in a few locations and so I'm going to go to navbar because that's where we're going to first use our information so I go the components and into nav so under our dark mode I'm going to grab the data with current user like this and I'm going to do use get AU user query and I did forget if we go back to our API we actually need to export this so I'm going to scroll down to use get Au user query save that and now if you do this we can see that we get it from our es lint and we're going to pass this in but you need to pass in an empty object for use get off user query so now we are grabbing the data from our user so we are able to access this super easy and I'm going to say if current let's say put this in PRS if current user does not exist this is going to be returning null so nothing inside just so we don't error out for a navbar and what we're going to do is we're going to grab handle sign out this is going to be a function so that if the user tries to sign out we can handle that function so I'm going to do await sign out like so I'm going to do catch with error like this and by the way this sign out is going to come from AWS amplify a I did forget that so this allows us to basically sign out so amplify makes it super easy to automate the sign out with just one line and I'm going to do console do ER and we are going to say error signing out colon comma error like so and then finally I'm going to do const current user details is equal to current user question mark. user details so this is just the user details when we created it we're just grabbing that information when we return it right here so now we can scroll down we can actually create our little log in user So Below this we're going to create a little bit of a component or not component but like some elements so I'm going to do class name is equal to Hidden if it's on smaller screens we're going to do item Center justify between with medium being Flex when it is larger screens so that means this sign out exist or like the signin profile username is at the top right when it's on larger screens but it's going to be hidden when it's on smaller screens and then in here I'm going to do a div give it a class name we're going to say align Das Center Flex height of nine width of nine justify Center like this curly braces we're going to say if the current user details question mark. profile picture URL if that exist we're going to do a double Boolean or double knot operator to make sure we force it into a Boolean type and in here I'm going to do an image tag and I'm going to search up another image tag over here just so we can copy it make our lives easier instead paste that like so and instead of tasks. attachment we're going to do current user details question mark. profile picture URL the alt is going to be current user details question mark. username and we're going to do user profile picture like so the width is going to be 100 height is going to be 50 this is going to be H full with rounded full object D cover and obviously we need to show when it's not a user so we're going to have an empty one we're just going to grab the user like that with class name height of six width of six cursor Das pointer self Center rounded Das full and when it's dark mode we're going to say text should be white and I'm going to do a self closing tag below this div I'm going to do span with class name MX3 text of gray of 800 with dark text white like so and inside here I'm going to do current user details question mark. username and below this span I'm going to do a button close that write sign out inside here I'm going to do class name it's going to be hidden rounded background blue 400 PX4 py of2 text extra small font bold text of white hover background blue 500 and MD of block inside here I'm going to do onclick and I'm going to pass in handle sign out for the function that we created earlier so I know we can't visualize it yet CU it's going to require us to handle some authentication that we'll handle a little later but basically the idea is that we just have the user profile image with the username and a sign out button and this is using information from the authentication that we created for Cognito so we're going to do something similar to this uh sidebar so I'm going to copy majority of this like this copy that and now we can go to our sidebar because we also have user information over here I'm going to go down and I'm just going to paste this at near the bottom and right below our closing div we're going to paste what we just had now I'm going to modify a few things and I'm going to address the underscored items I'm going to create another div on top like this close this out like so and inside of here I'm going to do class name of Z10 margin top of 32 Flex with full Flex column there just a bunch of styling we're just going to rush through this is getting kind of long so background white PX of 8 p y of four and by the way in the future videos I'm going to start putting all these classes as class names so there will be less styling involved cuz I feel like there's not much educ ational value for me to just go through and just write every single one of these anyways we're going to have Flex with full for this one items Center below this line Center Flex H9 we're going to keep that the same everything else can stay the same except instead of hidden over here I'm going to do self start so that will be different styling and with that now we can address what we are missing which is similar to what we had in our Navar so I'm going to scroll up and I'm going to go back to our nav bar scroll up here as well copy just these lines right here and we are going to paste that we're going to make sure we import the correct items as well as sign out and also we need to make sure we grab this information and save it that should be our sidebar and I know you guys probably want to see it but just hold off just for a little bit we're just going to fix one more thing and that's in the reusable priority page because if you remember we basically hardcoded one of the values in this particular page when we used user ID we just have user ID one but we want to use the user ID that we're grabbing from Cognito so that's what we need to do so we're just going to again grab the use get o user query paste it over here and we're just going to import use get o user query with current user and we want to grab the user ID via current user question mark. user details question mark. user ID and we're going to hit null like so and with that our priority page will now fetch the actual users's ID the one who is logged in it will grab their tasks and the priorities that they need for their projects all right we're almost done we're almost done okay let's close all of that out we're almost there so if you go back I'm just going to show you one last thing is that we want to secure our backend with make making sure that whoever is logged into our back end is signed in so if you take a look we are going to add what's called a Cognito authorizer on our API Gateway so we're going to add that to our API Gateway to secure it so that if we try to call our back end without the token JWT the jot token that we get from the O user we are going to be blocked we're not going to be able to do this so in said what we need to do is we're going to grab the jot token then we are able to call Cognito user pull and call our backend with this JW token so that we can now fetch relevant data this is more for security and it's this is super easy to do so what we're going to do is go to our AWS we're going to go to our API Gateway going to our API Gateway way go over here we're going to select this any and we are going to actually we don't need to select that we're going to go to authorizer and we are going to create an authorizer we're going to call this pm api-gateway authorizer and we are going to use Cognito we're going to select our user pool and we're going to set the token source to be authorization and we're going to hit create authorizer so this API Gateway now has this authorizer attached so now we just need to go to our code one last time this is the final time I promise and this is kind of cool this is what makes Redux toolkit query very nice is that for every single API call we are going to be blocked by API Gateway unless we provide a header token of the access token that we basic Ally need to confirm that API Gateway gives us proper access so instead in our base query we can add another property to our F fetch based query we're going to do prepare headers like so and I'm going to do async headers like this do an arrow function and I'm going to say con session is equal to await fetch off session and like we did before we grab we're grabbing our session but this time we're going to grab the access token so I'm going to do const access token once again equals we're going to do sessions. tokens question double question mark with curly braces and we are going to say if access token is available we are going to do headers doet put our authorization Source that's why we called this authorization and we're going to put in template strings Bearer you always need this Bearer tag we're going to put access token over here and that will set our headers for every API call that happens inside these end points this prepare headers attaches it so that we now have access to our API Gateway because the heads is being set with our access token and that is basically all the authentication that we need it is a lot and I think in the future I'll make this a little more streamlined it was a little bit rough I didn't expect it to be this convoluted after I recorded this but let's get this finished and let's get this tested so we're almost at the home stretch so I'm going to save this all right so the last thing we need to do is we need to push this code up we need to update our ec2 so we need to grab that information from GitHub to update the ec2s backend code as well and then from there we can check if everything is working as we would expect so I'm going to go to our Parent Directory our run I'm going to do get add score get commit DM added authentication and authorization and then we're going to do get push origin master so I'm going to make a quick check that we have project management that we added authentication authorization so a lot of our changes are there so now I'm going to go back to AWS we're going to go to ec2 click on this click on my instances click on this instance go to connect connect using ec2 instance connect and we are going to connect to that we're going to be back again into our ec2 ter terminal I'm going to write pseudo su- going to make sure we have project management we're going to go in there and we're just going to do get pull and once we do that we're going to get all the new changes that we have from our code now again we just need the server go into our server I'm going to write LS and I just want to double check our EnV file is still there and modified we have it correct cancel that out I'm going to do pm to delete all so we can restart our server I'm going to do pm2 Monet or actually pm2 start ecosystem. config.js and we can just do pm2 monit if we just want to monitor it and can we can see that it's trying to run while that's waiting we're just going to go back to our AWS go to amplify and we want to just get our actual URL let's go to view app and we can visit deployed URL all right so we do have our account and let's give this a shot so I'm going to open up one more tab we're going to go to AWS go to Cognito go to our user pool and I've created this user but I want to go through the entire process again so let's delete this user so you hit disable user access and then you can hit delete so we're going to recreate my user going to do dummy user just some dummy email and actually that's not it hello my friend 1 2 3 4 exclamation make sure that's correct copy paste it to create the account let's just save it for now I'm going to get the confirmation code confirm it if you can see we have our sign out with the user but it does seem like we are we have a few issues with the top bar and the user not being accessible to us but let's actually just check if we decrease this we get our sign out over here which is perfect once we are on bigger screens we have a sign out up here so right now this is as expected the only problem is this out let's try the sign out button and as you can see we have our sign out working properly I think I know why this top part is existing it'll be a simple change which is the margin top to six but yeah let's fix this top and let's actually fix this uh nav bar so we're going to go back to our code this will be a simple change the final thing that we'll be doing because I know this has been quite long everything's been pretty complicated so we're going to go back to our off provider scroll down we're just going to get rid of this class name so we just get rid of the top thing and then we're going to go to global. CSS scroll all the way down and over here I'm going to just do colon colon Das webkit-scrollbar curly braces width of Zer pixel height of zero pixel like so that should fix our problems so I'm going to do get add get commit CSS styling final changes and get push origin master and we don't need to change ec2 because only the client has been changed so the front end will be changed so once you have that your project will automatically redeploy and we're just going to wait for that to finish and once that's deployed you can see that we have are issues taken care of the scroll bars are not visible over here so we don't have that problem and the top is good now I just wanted to show you one last thing about the Redux or basically the getting the O user I wanted to be able to show this I probably should have console logged it but I'll show you over here so this is our state that we currently have and in Redux toolkit we basically have the global state which is where we stored is sidebar collapsed is dark mode so that is our state over there but we also have our API query States as well so we have get projects and we have our list of projects in there but more importantly we have get off user so this is the function that we created and this is the function that it grabs the data from the user pool so right now we have the user information dummy user ID with signin details and the user sub is the Cognito ID as for user details I was not able to manage to get the trigger the Lambda trigger that we created to be set up correctly in the future video I will probably fix that making sure we get that but it's already gone so long and I will come back to Cognito maybe make it easier to flow because it was even even for me this was a little bit over the head so I will come back to it Streamlight it so it's a little bit of an easier process so you can see we do have our Au authentication information and we are already hitting the end point meaning even though we added the Cognito authorizer we're still able to hit the endpoint meaning we did that correctly so just wanted to let you guys know and there you go we did so much in this application if you got this far congratulations on getting this far not many people get here all the way building this entire application but you've done an amazing job I was planning to do Lambda for this one but went into some insurmountable roadblocks and I re-recorded I had to drop two hours of recording because of that so just FYI I was it was a struggle for me too and also you guys have been requesting some of you have been requesting a real production level application I mean this this is pretty close to a real production level application it is not designed for like a SAS product or anything of that sort because it's not designated for that use case but it is an Enterprise level application where cuz we're using AWS they do plan to create some applications that are designated more for a specific use case and it'll be more of a complete application in the sense of the functionality of the application anyways I'm so glad you're here at the end you don't have to like comment and subscribe at this point I'm just glad you're able to watch it that is just amazing that you're able to get so far congrats and hope to see you next time